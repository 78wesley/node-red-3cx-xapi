'use strict';
var lib = require('./lib.js');

module.exports = function (RED) {
    function XapiNode(config) {
        RED.nodes.createNode(this, config);
        this.service = RED.nodes.getNode(config.service);
        this.method = config.method;
        this.ListActiveCall_top = config.ListActiveCall_top;
        this.ListActiveCall_topType = config.ListActiveCall_topType || 'str';
        this.ListActiveCall_skip = config.ListActiveCall_skip;
        this.ListActiveCall_skipType = config.ListActiveCall_skipType || 'str';
        this.ListActiveCall_search = config.ListActiveCall_search;
        this.ListActiveCall_searchType = config.ListActiveCall_searchType || 'str';
        this.ListActiveCall_filter = config.ListActiveCall_filter;
        this.ListActiveCall_filterType = config.ListActiveCall_filterType || 'str';
        this.ListActiveCall_count = config.ListActiveCall_count;
        this.ListActiveCall_countType = config.ListActiveCall_countType || 'str';
        this.ListActiveCall_orderby = config.ListActiveCall_orderby;
        this.ListActiveCall_orderbyType = config.ListActiveCall_orderbyType || 'str';
        this.ListActiveCall_select = config.ListActiveCall_select;
        this.ListActiveCall_selectType = config.ListActiveCall_selectType || 'str';
        this.ListActiveCall_expand = config.ListActiveCall_expand;
        this.ListActiveCall_expandType = config.ListActiveCall_expandType || 'str';
        this.DropCall_id = config.DropCall_id;
        this.DropCall_idType = config.DropCall_idType || 'str';
        this.GetLogs_extension = config.GetLogs_extension;
        this.GetLogs_extensionType = config.GetLogs_extensionType || 'str';
        this.GetLogs_call = config.GetLogs_call;
        this.GetLogs_callType = config.GetLogs_callType || 'str';
        this.GetLogs_search = config.GetLogs_search;
        this.GetLogs_searchType = config.GetLogs_searchType || 'str';
        this.GetLogs_severity = config.GetLogs_severity;
        this.GetLogs_severityType = config.GetLogs_severityType || 'str';
        this.GetLogs_top = config.GetLogs_top;
        this.GetLogs_topType = config.GetLogs_topType || 'str';
        this.GetLogs_skip = config.GetLogs_skip;
        this.GetLogs_skipType = config.GetLogs_skipType || 'str';
        this.GetLogs_top = config.GetLogs_top;
        this.GetLogs_topType = config.GetLogs_topType || 'str';
        this.GetLogs_skip = config.GetLogs_skip;
        this.GetLogs_skipType = config.GetLogs_skipType || 'str';
        this.GetLogs_search = config.GetLogs_search;
        this.GetLogs_searchType = config.GetLogs_searchType || 'str';
        this.GetLogs_filter = config.GetLogs_filter;
        this.GetLogs_filterType = config.GetLogs_filterType || 'str';
        this.GetLogs_count = config.GetLogs_count;
        this.GetLogs_countType = config.GetLogs_countType || 'str';
        this.GetLogs_select = config.GetLogs_select;
        this.GetLogs_selectType = config.GetLogs_selectType || 'str';
        this.GetLogs_orderby = config.GetLogs_orderby;
        this.GetLogs_orderbyType = config.GetLogs_orderbyType || 'str';
        this.GetLogs_expand = config.GetLogs_expand;
        this.GetLogs_expandType = config.GetLogs_expandType || 'str';
        this.GetAntiHackingSettings_select = config.GetAntiHackingSettings_select;
        this.GetAntiHackingSettings_selectType = config.GetAntiHackingSettings_selectType || 'str';
        this.GetAntiHackingSettings_expand = config.GetAntiHackingSettings_expand;
        this.GetAntiHackingSettings_expandType = config.GetAntiHackingSettings_expandType || 'str';
        this.UpdateAntiHackingSettings_body = config.UpdateAntiHackingSettings_body;
        this.UpdateAntiHackingSettings_bodyType = config.UpdateAntiHackingSettings_bodyType || 'str';
        this.ListBackups_top = config.ListBackups_top;
        this.ListBackups_topType = config.ListBackups_topType || 'str';
        this.ListBackups_skip = config.ListBackups_skip;
        this.ListBackups_skipType = config.ListBackups_skipType || 'str';
        this.ListBackups_search = config.ListBackups_search;
        this.ListBackups_searchType = config.ListBackups_searchType || 'str';
        this.ListBackups_filter = config.ListBackups_filter;
        this.ListBackups_filterType = config.ListBackups_filterType || 'str';
        this.ListBackups_count = config.ListBackups_count;
        this.ListBackups_countType = config.ListBackups_countType || 'str';
        this.ListBackups_orderby = config.ListBackups_orderby;
        this.ListBackups_orderbyType = config.ListBackups_orderbyType || 'str';
        this.ListBackups_select = config.ListBackups_select;
        this.ListBackups_selectType = config.ListBackups_selectType || 'str';
        this.ListBackups_expand = config.ListBackups_expand;
        this.ListBackups_expandType = config.ListBackups_expandType || 'str';
        this.GetBackupExtras_fileName = config.GetBackupExtras_fileName;
        this.GetBackupExtras_fileNameType = config.GetBackupExtras_fileNameType || 'str';
        this.DeleteBackups_fileName = config.DeleteBackups_fileName;
        this.DeleteBackups_fileNameType = config.DeleteBackups_fileNameType || 'str';
        this.DeleteBackups_ifMatch = config.DeleteBackups_ifMatch;
        this.DeleteBackups_ifMatchType = config.DeleteBackups_ifMatchType || 'str';
        this.Restore_fileName = config.Restore_fileName;
        this.Restore_fileNameType = config.Restore_fileNameType || 'str';
        this.Restore_body = config.Restore_body;
        this.Restore_bodyType = config.Restore_bodyType || 'str';
        this.Backup_body = config.Backup_body;
        this.Backup_bodyType = config.Backup_bodyType || 'str';
        this.SetBackupFailoverSettings_body = config.SetBackupFailoverSettings_body;
        this.SetBackupFailoverSettings_bodyType = config.SetBackupFailoverSettings_bodyType || 'str';
        this.GetFailoverScripts_top = config.GetFailoverScripts_top;
        this.GetFailoverScripts_topType = config.GetFailoverScripts_topType || 'str';
        this.GetFailoverScripts_skip = config.GetFailoverScripts_skip;
        this.GetFailoverScripts_skipType = config.GetFailoverScripts_skipType || 'str';
        this.GetFailoverScripts_search = config.GetFailoverScripts_search;
        this.GetFailoverScripts_searchType = config.GetFailoverScripts_searchType || 'str';
        this.GetFailoverScripts_filter = config.GetFailoverScripts_filter;
        this.GetFailoverScripts_filterType = config.GetFailoverScripts_filterType || 'str';
        this.GetFailoverScripts_count = config.GetFailoverScripts_count;
        this.GetFailoverScripts_countType = config.GetFailoverScripts_countType || 'str';
        this.SetBackupSettings_body = config.SetBackupSettings_body;
        this.SetBackupSettings_bodyType = config.SetBackupSettings_bodyType || 'str';
        this.SetBackupRepositorySettings_body = config.SetBackupRepositorySettings_body;
        this.SetBackupRepositorySettings_bodyType = config.SetBackupRepositorySettings_bodyType || 'str';
        this.SetRestoreSettings_body = config.SetRestoreSettings_body;
        this.SetRestoreSettings_bodyType = config.SetRestoreSettings_bodyType || 'str';
        this.ListBlackListNumber_top = config.ListBlackListNumber_top;
        this.ListBlackListNumber_topType = config.ListBlackListNumber_topType || 'str';
        this.ListBlackListNumber_skip = config.ListBlackListNumber_skip;
        this.ListBlackListNumber_skipType = config.ListBlackListNumber_skipType || 'str';
        this.ListBlackListNumber_search = config.ListBlackListNumber_search;
        this.ListBlackListNumber_searchType = config.ListBlackListNumber_searchType || 'str';
        this.ListBlackListNumber_filter = config.ListBlackListNumber_filter;
        this.ListBlackListNumber_filterType = config.ListBlackListNumber_filterType || 'str';
        this.ListBlackListNumber_count = config.ListBlackListNumber_count;
        this.ListBlackListNumber_countType = config.ListBlackListNumber_countType || 'str';
        this.ListBlackListNumber_orderby = config.ListBlackListNumber_orderby;
        this.ListBlackListNumber_orderbyType = config.ListBlackListNumber_orderbyType || 'str';
        this.ListBlackListNumber_select = config.ListBlackListNumber_select;
        this.ListBlackListNumber_selectType = config.ListBlackListNumber_selectType || 'str';
        this.ListBlackListNumber_expand = config.ListBlackListNumber_expand;
        this.ListBlackListNumber_expandType = config.ListBlackListNumber_expandType || 'str';
        this.CreateBlackListNumber_body = config.CreateBlackListNumber_body;
        this.CreateBlackListNumber_bodyType = config.CreateBlackListNumber_bodyType || 'str';
        this.GetBlackListNumber_id = config.GetBlackListNumber_id;
        this.GetBlackListNumber_idType = config.GetBlackListNumber_idType || 'str';
        this.GetBlackListNumber_select = config.GetBlackListNumber_select;
        this.GetBlackListNumber_selectType = config.GetBlackListNumber_selectType || 'str';
        this.GetBlackListNumber_expand = config.GetBlackListNumber_expand;
        this.GetBlackListNumber_expandType = config.GetBlackListNumber_expandType || 'str';
        this.UpdateBlackListNumber_id = config.UpdateBlackListNumber_id;
        this.UpdateBlackListNumber_idType = config.UpdateBlackListNumber_idType || 'str';
        this.UpdateBlackListNumber_body = config.UpdateBlackListNumber_body;
        this.UpdateBlackListNumber_bodyType = config.UpdateBlackListNumber_bodyType || 'str';
        this.DeleteBlackListNumber_id = config.DeleteBlackListNumber_id;
        this.DeleteBlackListNumber_idType = config.DeleteBlackListNumber_idType || 'str';
        this.DeleteBlackListNumber_ifMatch = config.DeleteBlackListNumber_ifMatch;
        this.DeleteBlackListNumber_ifMatchType = config.DeleteBlackListNumber_ifMatchType || 'str';
        this.BulkNumbersDelete_body = config.BulkNumbersDelete_body;
        this.BulkNumbersDelete_bodyType = config.BulkNumbersDelete_bodyType || 'str';
        this.ListBlocklistAddr_top = config.ListBlocklistAddr_top;
        this.ListBlocklistAddr_topType = config.ListBlocklistAddr_topType || 'str';
        this.ListBlocklistAddr_skip = config.ListBlocklistAddr_skip;
        this.ListBlocklistAddr_skipType = config.ListBlocklistAddr_skipType || 'str';
        this.ListBlocklistAddr_search = config.ListBlocklistAddr_search;
        this.ListBlocklistAddr_searchType = config.ListBlocklistAddr_searchType || 'str';
        this.ListBlocklistAddr_filter = config.ListBlocklistAddr_filter;
        this.ListBlocklistAddr_filterType = config.ListBlocklistAddr_filterType || 'str';
        this.ListBlocklistAddr_count = config.ListBlocklistAddr_count;
        this.ListBlocklistAddr_countType = config.ListBlocklistAddr_countType || 'str';
        this.ListBlocklistAddr_orderby = config.ListBlocklistAddr_orderby;
        this.ListBlocklistAddr_orderbyType = config.ListBlocklistAddr_orderbyType || 'str';
        this.ListBlocklistAddr_select = config.ListBlocklistAddr_select;
        this.ListBlocklistAddr_selectType = config.ListBlocklistAddr_selectType || 'str';
        this.ListBlocklistAddr_expand = config.ListBlocklistAddr_expand;
        this.ListBlocklistAddr_expandType = config.ListBlocklistAddr_expandType || 'str';
        this.CreateBlocklistAddr_body = config.CreateBlocklistAddr_body;
        this.CreateBlocklistAddr_bodyType = config.CreateBlocklistAddr_bodyType || 'str';
        this.GetBlocklistAddr_id = config.GetBlocklistAddr_id;
        this.GetBlocklistAddr_idType = config.GetBlocklistAddr_idType || 'str';
        this.GetBlocklistAddr_select = config.GetBlocklistAddr_select;
        this.GetBlocklistAddr_selectType = config.GetBlocklistAddr_selectType || 'str';
        this.GetBlocklistAddr_expand = config.GetBlocklistAddr_expand;
        this.GetBlocklistAddr_expandType = config.GetBlocklistAddr_expandType || 'str';
        this.UpdateBlocklistAddr_id = config.UpdateBlocklistAddr_id;
        this.UpdateBlocklistAddr_idType = config.UpdateBlocklistAddr_idType || 'str';
        this.UpdateBlocklistAddr_body = config.UpdateBlocklistAddr_body;
        this.UpdateBlocklistAddr_bodyType = config.UpdateBlocklistAddr_bodyType || 'str';
        this.DeleteBlocklistAddr_id = config.DeleteBlocklistAddr_id;
        this.DeleteBlocklistAddr_idType = config.DeleteBlocklistAddr_idType || 'str';
        this.DeleteBlocklistAddr_ifMatch = config.DeleteBlocklistAddr_ifMatch;
        this.DeleteBlocklistAddr_ifMatchType = config.DeleteBlocklistAddr_ifMatchType || 'str';
        this.BulkIpsDelete_body = config.BulkIpsDelete_body;
        this.BulkIpsDelete_bodyType = config.BulkIpsDelete_bodyType || 'str';
        this.ListCallCostSettings_top = config.ListCallCostSettings_top;
        this.ListCallCostSettings_topType = config.ListCallCostSettings_topType || 'str';
        this.ListCallCostSettings_skip = config.ListCallCostSettings_skip;
        this.ListCallCostSettings_skipType = config.ListCallCostSettings_skipType || 'str';
        this.ListCallCostSettings_search = config.ListCallCostSettings_search;
        this.ListCallCostSettings_searchType = config.ListCallCostSettings_searchType || 'str';
        this.ListCallCostSettings_filter = config.ListCallCostSettings_filter;
        this.ListCallCostSettings_filterType = config.ListCallCostSettings_filterType || 'str';
        this.ListCallCostSettings_count = config.ListCallCostSettings_count;
        this.ListCallCostSettings_countType = config.ListCallCostSettings_countType || 'str';
        this.ListCallCostSettings_orderby = config.ListCallCostSettings_orderby;
        this.ListCallCostSettings_orderbyType = config.ListCallCostSettings_orderbyType || 'str';
        this.ListCallCostSettings_select = config.ListCallCostSettings_select;
        this.ListCallCostSettings_selectType = config.ListCallCostSettings_selectType || 'str';
        this.ListCallCostSettings_expand = config.ListCallCostSettings_expand;
        this.ListCallCostSettings_expandType = config.ListCallCostSettings_expandType || 'str';
        this.UpdateCost_body = config.UpdateCost_body;
        this.UpdateCost_bodyType = config.UpdateCost_bodyType || 'str';
        this.GetCallFlowApp_id = config.GetCallFlowApp_id;
        this.GetCallFlowApp_idType = config.GetCallFlowApp_idType || 'str';
        this.GetCallFlowApp_select = config.GetCallFlowApp_select;
        this.GetCallFlowApp_selectType = config.GetCallFlowApp_selectType || 'str';
        this.GetCallFlowApp_expand = config.GetCallFlowApp_expand;
        this.GetCallFlowApp_expandType = config.GetCallFlowApp_expandType || 'str';
        this.UpdateCallFlowApp_id = config.UpdateCallFlowApp_id;
        this.UpdateCallFlowApp_idType = config.UpdateCallFlowApp_idType || 'str';
        this.UpdateCallFlowApp_body = config.UpdateCallFlowApp_body;
        this.UpdateCallFlowApp_bodyType = config.UpdateCallFlowApp_bodyType || 'str';
        this.DeleteCallFlowApp_id = config.DeleteCallFlowApp_id;
        this.DeleteCallFlowApp_idType = config.DeleteCallFlowApp_idType || 'str';
        this.DeleteCallFlowApp_ifMatch = config.DeleteCallFlowApp_ifMatch;
        this.DeleteCallFlowApp_ifMatchType = config.DeleteCallFlowApp_ifMatchType || 'str';
        this.ListCallFlowApp_top = config.ListCallFlowApp_top;
        this.ListCallFlowApp_topType = config.ListCallFlowApp_topType || 'str';
        this.ListCallFlowApp_skip = config.ListCallFlowApp_skip;
        this.ListCallFlowApp_skipType = config.ListCallFlowApp_skipType || 'str';
        this.ListCallFlowApp_search = config.ListCallFlowApp_search;
        this.ListCallFlowApp_searchType = config.ListCallFlowApp_searchType || 'str';
        this.ListCallFlowApp_filter = config.ListCallFlowApp_filter;
        this.ListCallFlowApp_filterType = config.ListCallFlowApp_filterType || 'str';
        this.ListCallFlowApp_count = config.ListCallFlowApp_count;
        this.ListCallFlowApp_countType = config.ListCallFlowApp_countType || 'str';
        this.ListCallFlowApp_orderby = config.ListCallFlowApp_orderby;
        this.ListCallFlowApp_orderbyType = config.ListCallFlowApp_orderbyType || 'str';
        this.ListCallFlowApp_select = config.ListCallFlowApp_select;
        this.ListCallFlowApp_selectType = config.ListCallFlowApp_selectType || 'str';
        this.ListCallFlowApp_expand = config.ListCallFlowApp_expand;
        this.ListCallFlowApp_expandType = config.ListCallFlowApp_expandType || 'str';
        this.CreateCallFlowApp_body = config.CreateCallFlowApp_body;
        this.CreateCallFlowApp_bodyType = config.CreateCallFlowApp_bodyType || 'str';
        this.GetAudioFiles_id = config.GetAudioFiles_id;
        this.GetAudioFiles_idType = config.GetAudioFiles_idType || 'str';
        this.GetAudioFiles_top = config.GetAudioFiles_top;
        this.GetAudioFiles_topType = config.GetAudioFiles_topType || 'str';
        this.GetAudioFiles_skip = config.GetAudioFiles_skip;
        this.GetAudioFiles_skipType = config.GetAudioFiles_skipType || 'str';
        this.GetAudioFiles_search = config.GetAudioFiles_search;
        this.GetAudioFiles_searchType = config.GetAudioFiles_searchType || 'str';
        this.GetAudioFiles_filter = config.GetAudioFiles_filter;
        this.GetAudioFiles_filterType = config.GetAudioFiles_filterType || 'str';
        this.GetAudioFiles_count = config.GetAudioFiles_count;
        this.GetAudioFiles_countType = config.GetAudioFiles_countType || 'str';
        this.DeleteAudioFile_id = config.DeleteAudioFile_id;
        this.DeleteAudioFile_idType = config.DeleteAudioFile_idType || 'str';
        this.DeleteAudioFile_body = config.DeleteAudioFile_body;
        this.DeleteAudioFile_bodyType = config.DeleteAudioFile_bodyType || 'str';
        this.DownloadCallHistory_top = config.DownloadCallHistory_top;
        this.DownloadCallHistory_topType = config.DownloadCallHistory_topType || 'str';
        this.DownloadCallHistory_skip = config.DownloadCallHistory_skip;
        this.DownloadCallHistory_skipType = config.DownloadCallHistory_skipType || 'str';
        this.DownloadCallHistory_search = config.DownloadCallHistory_search;
        this.DownloadCallHistory_searchType = config.DownloadCallHistory_searchType || 'str';
        this.DownloadCallHistory_filter = config.DownloadCallHistory_filter;
        this.DownloadCallHistory_filterType = config.DownloadCallHistory_filterType || 'str';
        this.DownloadCallHistory_count = config.DownloadCallHistory_count;
        this.DownloadCallHistory_countType = config.DownloadCallHistory_countType || 'str';
        this.DownloadCallHistory_select = config.DownloadCallHistory_select;
        this.DownloadCallHistory_selectType = config.DownloadCallHistory_selectType || 'str';
        this.DownloadCallHistory_orderby = config.DownloadCallHistory_orderby;
        this.DownloadCallHistory_orderbyType = config.DownloadCallHistory_orderbyType || 'str';
        this.DownloadCallHistory_expand = config.DownloadCallHistory_expand;
        this.DownloadCallHistory_expandType = config.DownloadCallHistory_expandType || 'str';
        this.ListCallHistoryView_top = config.ListCallHistoryView_top;
        this.ListCallHistoryView_topType = config.ListCallHistoryView_topType || 'str';
        this.ListCallHistoryView_skip = config.ListCallHistoryView_skip;
        this.ListCallHistoryView_skipType = config.ListCallHistoryView_skipType || 'str';
        this.ListCallHistoryView_search = config.ListCallHistoryView_search;
        this.ListCallHistoryView_searchType = config.ListCallHistoryView_searchType || 'str';
        this.ListCallHistoryView_filter = config.ListCallHistoryView_filter;
        this.ListCallHistoryView_filterType = config.ListCallHistoryView_filterType || 'str';
        this.ListCallHistoryView_count = config.ListCallHistoryView_count;
        this.ListCallHistoryView_countType = config.ListCallHistoryView_countType || 'str';
        this.ListCallHistoryView_orderby = config.ListCallHistoryView_orderby;
        this.ListCallHistoryView_orderbyType = config.ListCallHistoryView_orderbyType || 'str';
        this.ListCallHistoryView_select = config.ListCallHistoryView_select;
        this.ListCallHistoryView_selectType = config.ListCallHistoryView_selectType || 'str';
        this.ListCallHistoryView_expand = config.ListCallHistoryView_expand;
        this.ListCallHistoryView_expandType = config.ListCallHistoryView_expandType || 'str';
        this.GetCallParkingSettings_select = config.GetCallParkingSettings_select;
        this.GetCallParkingSettings_selectType = config.GetCallParkingSettings_selectType || 'str';
        this.GetCallParkingSettings_expand = config.GetCallParkingSettings_expand;
        this.GetCallParkingSettings_expandType = config.GetCallParkingSettings_expandType || 'str';
        this.UpdateCallParkingSettings_body = config.UpdateCallParkingSettings_body;
        this.UpdateCallParkingSettings_bodyType = config.UpdateCallParkingSettings_bodyType || 'str';
        this.GetCallTypesSettings_select = config.GetCallTypesSettings_select;
        this.GetCallTypesSettings_selectType = config.GetCallTypesSettings_selectType || 'str';
        this.GetCallTypesSettings_expand = config.GetCallTypesSettings_expand;
        this.GetCallTypesSettings_expandType = config.GetCallTypesSettings_expandType || 'str';
        this.UpdateCallTypesSettings_body = config.UpdateCallTypesSettings_body;
        this.UpdateCallTypesSettings_bodyType = config.UpdateCallTypesSettings_bodyType || 'str';
        this.GetCDRSettings_select = config.GetCDRSettings_select;
        this.GetCDRSettings_selectType = config.GetCDRSettings_selectType || 'str';
        this.GetCDRSettings_expand = config.GetCDRSettings_expand;
        this.GetCDRSettings_expandType = config.GetCDRSettings_expandType || 'str';
        this.UpdateCDRSettings_body = config.UpdateCDRSettings_body;
        this.UpdateCDRSettings_bodyType = config.UpdateCDRSettings_bodyType || 'str';
        this.DownloadChatHistory_clientTimeZone = config.DownloadChatHistory_clientTimeZone;
        this.DownloadChatHistory_clientTimeZoneType = config.DownloadChatHistory_clientTimeZoneType || 'str';
        this.DownloadChatHistory_top = config.DownloadChatHistory_top;
        this.DownloadChatHistory_topType = config.DownloadChatHistory_topType || 'str';
        this.DownloadChatHistory_skip = config.DownloadChatHistory_skip;
        this.DownloadChatHistory_skipType = config.DownloadChatHistory_skipType || 'str';
        this.DownloadChatHistory_search = config.DownloadChatHistory_search;
        this.DownloadChatHistory_searchType = config.DownloadChatHistory_searchType || 'str';
        this.DownloadChatHistory_filter = config.DownloadChatHistory_filter;
        this.DownloadChatHistory_filterType = config.DownloadChatHistory_filterType || 'str';
        this.DownloadChatHistory_count = config.DownloadChatHistory_count;
        this.DownloadChatHistory_countType = config.DownloadChatHistory_countType || 'str';
        this.DownloadChatHistory_select = config.DownloadChatHistory_select;
        this.DownloadChatHistory_selectType = config.DownloadChatHistory_selectType || 'str';
        this.DownloadChatHistory_orderby = config.DownloadChatHistory_orderby;
        this.DownloadChatHistory_orderbyType = config.DownloadChatHistory_orderbyType || 'str';
        this.DownloadChatHistory_expand = config.DownloadChatHistory_expand;
        this.DownloadChatHistory_expandType = config.DownloadChatHistory_expandType || 'str';
        this.ListChatHistoryView_top = config.ListChatHistoryView_top;
        this.ListChatHistoryView_topType = config.ListChatHistoryView_topType || 'str';
        this.ListChatHistoryView_skip = config.ListChatHistoryView_skip;
        this.ListChatHistoryView_skipType = config.ListChatHistoryView_skipType || 'str';
        this.ListChatHistoryView_search = config.ListChatHistoryView_search;
        this.ListChatHistoryView_searchType = config.ListChatHistoryView_searchType || 'str';
        this.ListChatHistoryView_filter = config.ListChatHistoryView_filter;
        this.ListChatHistoryView_filterType = config.ListChatHistoryView_filterType || 'str';
        this.ListChatHistoryView_count = config.ListChatHistoryView_count;
        this.ListChatHistoryView_countType = config.ListChatHistoryView_countType || 'str';
        this.ListChatHistoryView_orderby = config.ListChatHistoryView_orderby;
        this.ListChatHistoryView_orderbyType = config.ListChatHistoryView_orderbyType || 'str';
        this.ListChatHistoryView_select = config.ListChatHistoryView_select;
        this.ListChatHistoryView_selectType = config.ListChatHistoryView_selectType || 'str';
        this.ListChatHistoryView_expand = config.ListChatHistoryView_expand;
        this.ListChatHistoryView_expandType = config.ListChatHistoryView_expandType || 'str';
        this.GetChatLogSettings_select = config.GetChatLogSettings_select;
        this.GetChatLogSettings_selectType = config.GetChatLogSettings_selectType || 'str';
        this.GetChatLogSettings_expand = config.GetChatLogSettings_expand;
        this.GetChatLogSettings_expandType = config.GetChatLogSettings_expandType || 'str';
        this.UpdateChatLogSettings_body = config.UpdateChatLogSettings_body;
        this.UpdateChatLogSettings_bodyType = config.UpdateChatLogSettings_bodyType || 'str';
        this.DownloadChatMessagesHistory_clientTimeZone = config.DownloadChatMessagesHistory_clientTimeZone;
        this.DownloadChatMessagesHistory_clientTimeZoneType = config.DownloadChatMessagesHistory_clientTimeZoneType || 'str';
        this.DownloadChatMessagesHistory_top = config.DownloadChatMessagesHistory_top;
        this.DownloadChatMessagesHistory_topType = config.DownloadChatMessagesHistory_topType || 'str';
        this.DownloadChatMessagesHistory_skip = config.DownloadChatMessagesHistory_skip;
        this.DownloadChatMessagesHistory_skipType = config.DownloadChatMessagesHistory_skipType || 'str';
        this.DownloadChatMessagesHistory_search = config.DownloadChatMessagesHistory_search;
        this.DownloadChatMessagesHistory_searchType = config.DownloadChatMessagesHistory_searchType || 'str';
        this.DownloadChatMessagesHistory_filter = config.DownloadChatMessagesHistory_filter;
        this.DownloadChatMessagesHistory_filterType = config.DownloadChatMessagesHistory_filterType || 'str';
        this.DownloadChatMessagesHistory_count = config.DownloadChatMessagesHistory_count;
        this.DownloadChatMessagesHistory_countType = config.DownloadChatMessagesHistory_countType || 'str';
        this.DownloadChatMessagesHistory_select = config.DownloadChatMessagesHistory_select;
        this.DownloadChatMessagesHistory_selectType = config.DownloadChatMessagesHistory_selectType || 'str';
        this.DownloadChatMessagesHistory_orderby = config.DownloadChatMessagesHistory_orderby;
        this.DownloadChatMessagesHistory_orderbyType = config.DownloadChatMessagesHistory_orderbyType || 'str';
        this.DownloadChatMessagesHistory_expand = config.DownloadChatMessagesHistory_expand;
        this.DownloadChatMessagesHistory_expandType = config.DownloadChatMessagesHistory_expandType || 'str';
        this.ListChatMessagesHistoryView_top = config.ListChatMessagesHistoryView_top;
        this.ListChatMessagesHistoryView_topType = config.ListChatMessagesHistoryView_topType || 'str';
        this.ListChatMessagesHistoryView_skip = config.ListChatMessagesHistoryView_skip;
        this.ListChatMessagesHistoryView_skipType = config.ListChatMessagesHistoryView_skipType || 'str';
        this.ListChatMessagesHistoryView_search = config.ListChatMessagesHistoryView_search;
        this.ListChatMessagesHistoryView_searchType = config.ListChatMessagesHistoryView_searchType || 'str';
        this.ListChatMessagesHistoryView_filter = config.ListChatMessagesHistoryView_filter;
        this.ListChatMessagesHistoryView_filterType = config.ListChatMessagesHistoryView_filterType || 'str';
        this.ListChatMessagesHistoryView_count = config.ListChatMessagesHistoryView_count;
        this.ListChatMessagesHistoryView_countType = config.ListChatMessagesHistoryView_countType || 'str';
        this.ListChatMessagesHistoryView_orderby = config.ListChatMessagesHistoryView_orderby;
        this.ListChatMessagesHistoryView_orderbyType = config.ListChatMessagesHistoryView_orderbyType || 'str';
        this.ListChatMessagesHistoryView_select = config.ListChatMessagesHistoryView_select;
        this.ListChatMessagesHistoryView_selectType = config.ListChatMessagesHistoryView_selectType || 'str';
        this.ListChatMessagesHistoryView_expand = config.ListChatMessagesHistoryView_expand;
        this.ListChatMessagesHistoryView_expandType = config.ListChatMessagesHistoryView_expandType || 'str';
        this.GetCodecsSettings_select = config.GetCodecsSettings_select;
        this.GetCodecsSettings_selectType = config.GetCodecsSettings_selectType || 'str';
        this.GetCodecsSettings_expand = config.GetCodecsSettings_expand;
        this.GetCodecsSettings_expandType = config.GetCodecsSettings_expandType || 'str';
        this.UpdateCodecsSettings_body = config.UpdateCodecsSettings_body;
        this.UpdateCodecsSettings_bodyType = config.UpdateCodecsSettings_bodyType || 'str';
        this.GetWebMeetingZones_top = config.GetWebMeetingZones_top;
        this.GetWebMeetingZones_topType = config.GetWebMeetingZones_topType || 'str';
        this.GetWebMeetingZones_skip = config.GetWebMeetingZones_skip;
        this.GetWebMeetingZones_skipType = config.GetWebMeetingZones_skipType || 'str';
        this.GetWebMeetingZones_search = config.GetWebMeetingZones_search;
        this.GetWebMeetingZones_searchType = config.GetWebMeetingZones_searchType || 'str';
        this.GetWebMeetingZones_filter = config.GetWebMeetingZones_filter;
        this.GetWebMeetingZones_filterType = config.GetWebMeetingZones_filterType || 'str';
        this.GetWebMeetingZones_count = config.GetWebMeetingZones_count;
        this.GetWebMeetingZones_countType = config.GetWebMeetingZones_countType || 'str';
        this.GetConferenceSettings_select = config.GetConferenceSettings_select;
        this.GetConferenceSettings_selectType = config.GetConferenceSettings_selectType || 'str';
        this.GetConferenceSettings_expand = config.GetConferenceSettings_expand;
        this.GetConferenceSettings_expandType = config.GetConferenceSettings_expandType || 'str';
        this.UpdateConferenceSettings_body = config.UpdateConferenceSettings_body;
        this.UpdateConferenceSettings_bodyType = config.UpdateConferenceSettings_bodyType || 'str';
        this.GetOnboardMcuData_top = config.GetOnboardMcuData_top;
        this.GetOnboardMcuData_topType = config.GetOnboardMcuData_topType || 'str';
        this.GetOnboardMcuData_skip = config.GetOnboardMcuData_skip;
        this.GetOnboardMcuData_skipType = config.GetOnboardMcuData_skipType || 'str';
        this.GetOnboardMcuData_search = config.GetOnboardMcuData_search;
        this.GetOnboardMcuData_searchType = config.GetOnboardMcuData_searchType || 'str';
        this.GetOnboardMcuData_filter = config.GetOnboardMcuData_filter;
        this.GetOnboardMcuData_filterType = config.GetOnboardMcuData_filterType || 'str';
        this.GetOnboardMcuData_count = config.GetOnboardMcuData_count;
        this.GetOnboardMcuData_countType = config.GetOnboardMcuData_countType || 'str';
        this.GetOnboardMeetings_top = config.GetOnboardMeetings_top;
        this.GetOnboardMeetings_topType = config.GetOnboardMeetings_topType || 'str';
        this.GetOnboardMeetings_skip = config.GetOnboardMeetings_skip;
        this.GetOnboardMeetings_skipType = config.GetOnboardMeetings_skipType || 'str';
        this.GetOnboardMeetings_search = config.GetOnboardMeetings_search;
        this.GetOnboardMeetings_searchType = config.GetOnboardMeetings_searchType || 'str';
        this.GetOnboardMeetings_filter = config.GetOnboardMeetings_filter;
        this.GetOnboardMeetings_filterType = config.GetOnboardMeetings_filterType || 'str';
        this.GetOnboardMeetings_count = config.GetOnboardMeetings_count;
        this.GetOnboardMeetings_countType = config.GetOnboardMeetings_countType || 'str';
        this.GetMCURows_top = config.GetMCURows_top;
        this.GetMCURows_topType = config.GetMCURows_topType || 'str';
        this.GetMCURows_skip = config.GetMCURows_skip;
        this.GetMCURows_skipType = config.GetMCURows_skipType || 'str';
        this.GetMCURows_search = config.GetMCURows_search;
        this.GetMCURows_searchType = config.GetMCURows_searchType || 'str';
        this.GetMCURows_filter = config.GetMCURows_filter;
        this.GetMCURows_filterType = config.GetMCURows_filterType || 'str';
        this.GetMCURows_count = config.GetMCURows_count;
        this.GetMCURows_countType = config.GetMCURows_countType || 'str';
        this.GetMCURow_guid = config.GetMCURow_guid;
        this.GetMCURow_guidType = config.GetMCURow_guidType || 'str';
        this.UpdateMCURequestStatus_body = config.UpdateMCURequestStatus_body;
        this.UpdateMCURequestStatus_bodyType = config.UpdateMCURequestStatus_bodyType || 'str';
        this.GetConsoleRestrictions_select = config.GetConsoleRestrictions_select;
        this.GetConsoleRestrictions_selectType = config.GetConsoleRestrictions_selectType || 'str';
        this.GetConsoleRestrictions_expand = config.GetConsoleRestrictions_expand;
        this.GetConsoleRestrictions_expandType = config.GetConsoleRestrictions_expandType || 'str';
        this.UpdateConsoleRestrictions_body = config.UpdateConsoleRestrictions_body;
        this.UpdateConsoleRestrictions_bodyType = config.UpdateConsoleRestrictions_bodyType || 'str';
        this.ListContact_top = config.ListContact_top;
        this.ListContact_topType = config.ListContact_topType || 'str';
        this.ListContact_skip = config.ListContact_skip;
        this.ListContact_skipType = config.ListContact_skipType || 'str';
        this.ListContact_search = config.ListContact_search;
        this.ListContact_searchType = config.ListContact_searchType || 'str';
        this.ListContact_filter = config.ListContact_filter;
        this.ListContact_filterType = config.ListContact_filterType || 'str';
        this.ListContact_count = config.ListContact_count;
        this.ListContact_countType = config.ListContact_countType || 'str';
        this.ListContact_orderby = config.ListContact_orderby;
        this.ListContact_orderbyType = config.ListContact_orderbyType || 'str';
        this.ListContact_select = config.ListContact_select;
        this.ListContact_selectType = config.ListContact_selectType || 'str';
        this.ListContact_expand = config.ListContact_expand;
        this.ListContact_expandType = config.ListContact_expandType || 'str';
        this.CreateContact_body = config.CreateContact_body;
        this.CreateContact_bodyType = config.CreateContact_bodyType || 'str';
        this.SetDirSearchSettings_body = config.SetDirSearchSettings_body;
        this.SetDirSearchSettings_bodyType = config.SetDirSearchSettings_bodyType || 'str';
        this.BatchContactsDelete_body = config.BatchContactsDelete_body;
        this.BatchContactsDelete_bodyType = config.BatchContactsDelete_bodyType || 'str';
        this.GetContact_id = config.GetContact_id;
        this.GetContact_idType = config.GetContact_idType || 'str';
        this.GetContact_select = config.GetContact_select;
        this.GetContact_selectType = config.GetContact_selectType || 'str';
        this.GetContact_expand = config.GetContact_expand;
        this.GetContact_expandType = config.GetContact_expandType || 'str';
        this.UpdateContact_id = config.UpdateContact_id;
        this.UpdateContact_idType = config.UpdateContact_idType || 'str';
        this.UpdateContact_body = config.UpdateContact_body;
        this.UpdateContact_bodyType = config.UpdateContact_bodyType || 'str';
        this.DeleteContact_id = config.DeleteContact_id;
        this.DeleteContact_idType = config.DeleteContact_idType || 'str';
        this.DeleteContact_ifMatch = config.DeleteContact_ifMatch;
        this.DeleteContact_ifMatchType = config.DeleteContact_ifMatchType || 'str';
        this.ListCountry_top = config.ListCountry_top;
        this.ListCountry_topType = config.ListCountry_topType || 'str';
        this.ListCountry_skip = config.ListCountry_skip;
        this.ListCountry_skipType = config.ListCountry_skipType || 'str';
        this.ListCountry_search = config.ListCountry_search;
        this.ListCountry_searchType = config.ListCountry_searchType || 'str';
        this.ListCountry_filter = config.ListCountry_filter;
        this.ListCountry_filterType = config.ListCountry_filterType || 'str';
        this.ListCountry_count = config.ListCountry_count;
        this.ListCountry_countType = config.ListCountry_countType || 'str';
        this.ListCountry_orderby = config.ListCountry_orderby;
        this.ListCountry_orderbyType = config.ListCountry_orderbyType || 'str';
        this.ListCountry_select = config.ListCountry_select;
        this.ListCountry_selectType = config.ListCountry_selectType || 'str';
        this.ListCountry_expand = config.ListCountry_expand;
        this.ListCountry_expandType = config.ListCountry_expandType || 'str';
        this.GetCountryCodes_select = config.GetCountryCodes_select;
        this.GetCountryCodes_selectType = config.GetCountryCodes_selectType || 'str';
        this.GetCountryCodes_expand = config.GetCountryCodes_expand;
        this.GetCountryCodes_expandType = config.GetCountryCodes_expandType || 'str';
        this.UpdateCountryCodes_body = config.UpdateCountryCodes_body;
        this.UpdateCountryCodes_bodyType = config.UpdateCountryCodes_bodyType || 'str';
        this.GetCrmIntegration_select = config.GetCrmIntegration_select;
        this.GetCrmIntegration_selectType = config.GetCrmIntegration_selectType || 'str';
        this.GetCrmIntegration_expand = config.GetCrmIntegration_expand;
        this.GetCrmIntegration_expandType = config.GetCrmIntegration_expandType || 'str';
        this.UpdateCrmIntegration_body = config.UpdateCrmIntegration_body;
        this.UpdateCrmIntegration_bodyType = config.UpdateCrmIntegration_bodyType || 'str';
        this.Test_body = config.Test_body;
        this.Test_bodyType = config.Test_bodyType || 'str';
        this.SetOAuthState_body = config.SetOAuthState_body;
        this.SetOAuthState_bodyType = config.SetOAuthState_bodyType || 'str';
        this.GetOAuth_variable = config.GetOAuth_variable;
        this.GetOAuth_variableType = config.GetOAuth_variableType || 'str';
        this.GetCrmTemplateSource_name = config.GetCrmTemplateSource_name;
        this.GetCrmTemplateSource_nameType = config.GetCrmTemplateSource_nameType || 'str';
        this.GeCrmtTemplates_top = config.GeCrmtTemplates_top;
        this.GeCrmtTemplates_topType = config.GeCrmtTemplates_topType || 'str';
        this.GeCrmtTemplates_skip = config.GeCrmtTemplates_skip;
        this.GeCrmtTemplates_skipType = config.GeCrmtTemplates_skipType || 'str';
        this.GeCrmtTemplates_search = config.GeCrmtTemplates_search;
        this.GeCrmtTemplates_searchType = config.GeCrmtTemplates_searchType || 'str';
        this.GeCrmtTemplates_filter = config.GeCrmtTemplates_filter;
        this.GeCrmtTemplates_filterType = config.GeCrmtTemplates_filterType || 'str';
        this.GeCrmtTemplates_count = config.GeCrmtTemplates_count;
        this.GeCrmtTemplates_countType = config.GeCrmtTemplates_countType || 'str';
        this.GeCrmtTemplates_select = config.GeCrmtTemplates_select;
        this.GeCrmtTemplates_selectType = config.GeCrmtTemplates_selectType || 'str';
        this.GeCrmtTemplates_orderby = config.GeCrmtTemplates_orderby;
        this.GeCrmtTemplates_orderbyType = config.GeCrmtTemplates_orderbyType || 'str';
        this.GeCrmtTemplates_expand = config.GeCrmtTemplates_expand;
        this.GeCrmtTemplates_expandType = config.GeCrmtTemplates_expandType || 'str';
        this.GetCrmTemplate_name = config.GetCrmTemplate_name;
        this.GetCrmTemplate_nameType = config.GetCrmTemplate_nameType || 'str';
        this.GetCrmTemplate_select = config.GetCrmTemplate_select;
        this.GetCrmTemplate_selectType = config.GetCrmTemplate_selectType || 'str';
        this.GetCrmTemplate_expand = config.GetCrmTemplate_expand;
        this.GetCrmTemplate_expandType = config.GetCrmTemplate_expandType || 'str';
        this.DeleteCrmTemplate_name = config.DeleteCrmTemplate_name;
        this.DeleteCrmTemplate_nameType = config.DeleteCrmTemplate_nameType || 'str';
        this.DeleteCrmTemplate_ifMatch = config.DeleteCrmTemplate_ifMatch;
        this.DeleteCrmTemplate_ifMatchType = config.DeleteCrmTemplate_ifMatchType || 'str';
        this.ListCustomPrompt_top = config.ListCustomPrompt_top;
        this.ListCustomPrompt_topType = config.ListCustomPrompt_topType || 'str';
        this.ListCustomPrompt_skip = config.ListCustomPrompt_skip;
        this.ListCustomPrompt_skipType = config.ListCustomPrompt_skipType || 'str';
        this.ListCustomPrompt_search = config.ListCustomPrompt_search;
        this.ListCustomPrompt_searchType = config.ListCustomPrompt_searchType || 'str';
        this.ListCustomPrompt_filter = config.ListCustomPrompt_filter;
        this.ListCustomPrompt_filterType = config.ListCustomPrompt_filterType || 'str';
        this.ListCustomPrompt_count = config.ListCustomPrompt_count;
        this.ListCustomPrompt_countType = config.ListCustomPrompt_countType || 'str';
        this.ListCustomPrompt_orderby = config.ListCustomPrompt_orderby;
        this.ListCustomPrompt_orderbyType = config.ListCustomPrompt_orderbyType || 'str';
        this.ListCustomPrompt_select = config.ListCustomPrompt_select;
        this.ListCustomPrompt_selectType = config.ListCustomPrompt_selectType || 'str';
        this.ListCustomPrompt_expand = config.ListCustomPrompt_expand;
        this.ListCustomPrompt_expandType = config.ListCustomPrompt_expandType || 'str';
        this.DeleteCustomPrompt_filename = config.DeleteCustomPrompt_filename;
        this.DeleteCustomPrompt_filenameType = config.DeleteCustomPrompt_filenameType || 'str';
        this.DeleteCustomPrompt_ifMatch = config.DeleteCustomPrompt_ifMatch;
        this.DeleteCustomPrompt_ifMatchType = config.DeleteCustomPrompt_ifMatchType || 'str';
        this.GetDefs_select = config.GetDefs_select;
        this.GetDefs_selectType = config.GetDefs_selectType || 'str';
        this.GetDefs_expand = config.GetDefs_expand;
        this.GetDefs_expandType = config.GetDefs_expandType || 'str';
        this.ListCodecs_top = config.ListCodecs_top;
        this.ListCodecs_topType = config.ListCodecs_topType || 'str';
        this.ListCodecs_skip = config.ListCodecs_skip;
        this.ListCodecs_skipType = config.ListCodecs_skipType || 'str';
        this.ListCodecs_search = config.ListCodecs_search;
        this.ListCodecs_searchType = config.ListCodecs_searchType || 'str';
        this.ListCodecs_filter = config.ListCodecs_filter;
        this.ListCodecs_filterType = config.ListCodecs_filterType || 'str';
        this.ListCodecs_count = config.ListCodecs_count;
        this.ListCodecs_countType = config.ListCodecs_countType || 'str';
        this.ListCodecs_orderby = config.ListCodecs_orderby;
        this.ListCodecs_orderbyType = config.ListCodecs_orderbyType || 'str';
        this.ListCodecs_select = config.ListCodecs_select;
        this.ListCodecs_selectType = config.ListCodecs_selectType || 'str';
        this.ListCodecs_expand = config.ListCodecs_expand;
        this.ListCodecs_expandType = config.ListCodecs_expandType || 'str';
        this.ListGatewayParameters_top = config.ListGatewayParameters_top;
        this.ListGatewayParameters_topType = config.ListGatewayParameters_topType || 'str';
        this.ListGatewayParameters_skip = config.ListGatewayParameters_skip;
        this.ListGatewayParameters_skipType = config.ListGatewayParameters_skipType || 'str';
        this.ListGatewayParameters_search = config.ListGatewayParameters_search;
        this.ListGatewayParameters_searchType = config.ListGatewayParameters_searchType || 'str';
        this.ListGatewayParameters_filter = config.ListGatewayParameters_filter;
        this.ListGatewayParameters_filterType = config.ListGatewayParameters_filterType || 'str';
        this.ListGatewayParameters_count = config.ListGatewayParameters_count;
        this.ListGatewayParameters_countType = config.ListGatewayParameters_countType || 'str';
        this.ListGatewayParameters_orderby = config.ListGatewayParameters_orderby;
        this.ListGatewayParameters_orderbyType = config.ListGatewayParameters_orderbyType || 'str';
        this.ListGatewayParameters_select = config.ListGatewayParameters_select;
        this.ListGatewayParameters_selectType = config.ListGatewayParameters_selectType || 'str';
        this.ListGatewayParameters_expand = config.ListGatewayParameters_expand;
        this.ListGatewayParameters_expandType = config.ListGatewayParameters_expandType || 'str';
        this.ListGatewayParameterValues_top = config.ListGatewayParameterValues_top;
        this.ListGatewayParameterValues_topType = config.ListGatewayParameterValues_topType || 'str';
        this.ListGatewayParameterValues_skip = config.ListGatewayParameterValues_skip;
        this.ListGatewayParameterValues_skipType = config.ListGatewayParameterValues_skipType || 'str';
        this.ListGatewayParameterValues_search = config.ListGatewayParameterValues_search;
        this.ListGatewayParameterValues_searchType = config.ListGatewayParameterValues_searchType || 'str';
        this.ListGatewayParameterValues_filter = config.ListGatewayParameterValues_filter;
        this.ListGatewayParameterValues_filterType = config.ListGatewayParameterValues_filterType || 'str';
        this.ListGatewayParameterValues_count = config.ListGatewayParameterValues_count;
        this.ListGatewayParameterValues_countType = config.ListGatewayParameterValues_countType || 'str';
        this.ListGatewayParameterValues_orderby = config.ListGatewayParameterValues_orderby;
        this.ListGatewayParameterValues_orderbyType = config.ListGatewayParameterValues_orderbyType || 'str';
        this.ListGatewayParameterValues_select = config.ListGatewayParameterValues_select;
        this.ListGatewayParameterValues_selectType = config.ListGatewayParameterValues_selectType || 'str';
        this.ListGatewayParameterValues_expand = config.ListGatewayParameterValues_expand;
        this.ListGatewayParameterValues_expandType = config.ListGatewayParameterValues_expandType || 'str';
        this.ListTimeZones_top = config.ListTimeZones_top;
        this.ListTimeZones_topType = config.ListTimeZones_topType || 'str';
        this.ListTimeZones_skip = config.ListTimeZones_skip;
        this.ListTimeZones_skipType = config.ListTimeZones_skipType || 'str';
        this.ListTimeZones_search = config.ListTimeZones_search;
        this.ListTimeZones_searchType = config.ListTimeZones_searchType || 'str';
        this.ListTimeZones_filter = config.ListTimeZones_filter;
        this.ListTimeZones_filterType = config.ListTimeZones_filterType || 'str';
        this.ListTimeZones_count = config.ListTimeZones_count;
        this.ListTimeZones_countType = config.ListTimeZones_countType || 'str';
        this.ListTimeZones_orderby = config.ListTimeZones_orderby;
        this.ListTimeZones_orderbyType = config.ListTimeZones_orderbyType || 'str';
        this.ListTimeZones_select = config.ListTimeZones_select;
        this.ListTimeZones_selectType = config.ListTimeZones_selectType || 'str';
        this.ListTimeZones_expand = config.ListTimeZones_expand;
        this.ListTimeZones_expandType = config.ListTimeZones_expandType || 'str';
        this.GetRoutes_body = config.GetRoutes_body;
        this.GetRoutes_bodyType = config.GetRoutes_bodyType || 'str';
        this.ListDeviceInfo_top = config.ListDeviceInfo_top;
        this.ListDeviceInfo_topType = config.ListDeviceInfo_topType || 'str';
        this.ListDeviceInfo_skip = config.ListDeviceInfo_skip;
        this.ListDeviceInfo_skipType = config.ListDeviceInfo_skipType || 'str';
        this.ListDeviceInfo_search = config.ListDeviceInfo_search;
        this.ListDeviceInfo_searchType = config.ListDeviceInfo_searchType || 'str';
        this.ListDeviceInfo_filter = config.ListDeviceInfo_filter;
        this.ListDeviceInfo_filterType = config.ListDeviceInfo_filterType || 'str';
        this.ListDeviceInfo_count = config.ListDeviceInfo_count;
        this.ListDeviceInfo_countType = config.ListDeviceInfo_countType || 'str';
        this.ListDeviceInfo_orderby = config.ListDeviceInfo_orderby;
        this.ListDeviceInfo_orderbyType = config.ListDeviceInfo_orderbyType || 'str';
        this.ListDeviceInfo_select = config.ListDeviceInfo_select;
        this.ListDeviceInfo_selectType = config.ListDeviceInfo_selectType || 'str';
        this.ListDeviceInfo_expand = config.ListDeviceInfo_expand;
        this.ListDeviceInfo_expandType = config.ListDeviceInfo_expandType || 'str';
        this.GetDeviceInfo_id = config.GetDeviceInfo_id;
        this.GetDeviceInfo_idType = config.GetDeviceInfo_idType || 'str';
        this.GetDeviceInfo_select = config.GetDeviceInfo_select;
        this.GetDeviceInfo_selectType = config.GetDeviceInfo_selectType || 'str';
        this.GetDeviceInfo_expand = config.GetDeviceInfo_expand;
        this.GetDeviceInfo_expandType = config.GetDeviceInfo_expandType || 'str';
        this.DeleteDeviceInfo_id = config.DeleteDeviceInfo_id;
        this.DeleteDeviceInfo_idType = config.DeleteDeviceInfo_idType || 'str';
        this.DeleteDeviceInfo_ifMatch = config.DeleteDeviceInfo_ifMatch;
        this.DeleteDeviceInfo_ifMatchType = config.DeleteDeviceInfo_ifMatchType || 'str';
        this.Provision_id = config.Provision_id;
        this.Provision_idType = config.Provision_idType || 'str';
        this.Provision_body = config.Provision_body;
        this.Provision_bodyType = config.Provision_bodyType || 'str';
        this.GetDialCodeSettings_select = config.GetDialCodeSettings_select;
        this.GetDialCodeSettings_selectType = config.GetDialCodeSettings_selectType || 'str';
        this.GetDialCodeSettings_expand = config.GetDialCodeSettings_expand;
        this.GetDialCodeSettings_expandType = config.GetDialCodeSettings_expandType || 'str';
        this.UpdateDialCodeSettings_body = config.UpdateDialCodeSettings_body;
        this.UpdateDialCodeSettings_bodyType = config.UpdateDialCodeSettings_bodyType || 'str';
        this.ListDidNumber_top = config.ListDidNumber_top;
        this.ListDidNumber_topType = config.ListDidNumber_topType || 'str';
        this.ListDidNumber_skip = config.ListDidNumber_skip;
        this.ListDidNumber_skipType = config.ListDidNumber_skipType || 'str';
        this.ListDidNumber_search = config.ListDidNumber_search;
        this.ListDidNumber_searchType = config.ListDidNumber_searchType || 'str';
        this.ListDidNumber_filter = config.ListDidNumber_filter;
        this.ListDidNumber_filterType = config.ListDidNumber_filterType || 'str';
        this.ListDidNumber_count = config.ListDidNumber_count;
        this.ListDidNumber_countType = config.ListDidNumber_countType || 'str';
        this.ListDidNumber_orderby = config.ListDidNumber_orderby;
        this.ListDidNumber_orderbyType = config.ListDidNumber_orderbyType || 'str';
        this.ListDidNumber_select = config.ListDidNumber_select;
        this.ListDidNumber_selectType = config.ListDidNumber_selectType || 'str';
        this.ListDidNumber_expand = config.ListDidNumber_expand;
        this.ListDidNumber_expandType = config.ListDidNumber_expandType || 'str';
        this.GetPropertiesByDn_dnNumber = config.GetPropertiesByDn_dnNumber;
        this.GetPropertiesByDn_dnNumberType = config.GetPropertiesByDn_dnNumberType || 'str';
        this.GetPropertiesByDn_top = config.GetPropertiesByDn_top;
        this.GetPropertiesByDn_topType = config.GetPropertiesByDn_topType || 'str';
        this.GetPropertiesByDn_skip = config.GetPropertiesByDn_skip;
        this.GetPropertiesByDn_skipType = config.GetPropertiesByDn_skipType || 'str';
        this.GetPropertiesByDn_search = config.GetPropertiesByDn_search;
        this.GetPropertiesByDn_searchType = config.GetPropertiesByDn_searchType || 'str';
        this.GetPropertiesByDn_filter = config.GetPropertiesByDn_filter;
        this.GetPropertiesByDn_filterType = config.GetPropertiesByDn_filterType || 'str';
        this.GetPropertiesByDn_count = config.GetPropertiesByDn_count;
        this.GetPropertiesByDn_countType = config.GetPropertiesByDn_countType || 'str';
        this.GetPropertiesByDn_select = config.GetPropertiesByDn_select;
        this.GetPropertiesByDn_selectType = config.GetPropertiesByDn_selectType || 'str';
        this.GetPropertiesByDn_orderby = config.GetPropertiesByDn_orderby;
        this.GetPropertiesByDn_orderbyType = config.GetPropertiesByDn_orderbyType || 'str';
        this.GetPropertiesByDn_expand = config.GetPropertiesByDn_expand;
        this.GetPropertiesByDn_expandType = config.GetPropertiesByDn_expandType || 'str';
        this.CreateDNProperty_body = config.CreateDNProperty_body;
        this.CreateDNProperty_bodyType = config.CreateDNProperty_bodyType || 'str';
        this.UpdateDNProperty_body = config.UpdateDNProperty_body;
        this.UpdateDNProperty_bodyType = config.UpdateDNProperty_bodyType || 'str';
        this.DeleteDNProperty_body = config.DeleteDNProperty_body;
        this.DeleteDNProperty_bodyType = config.DeleteDNProperty_bodyType || 'str';
        this.GetDNPropertyByName_dnNumber = config.GetDNPropertyByName_dnNumber;
        this.GetDNPropertyByName_dnNumberType = config.GetDNPropertyByName_dnNumberType || 'str';
        this.GetDNPropertyByName_name = config.GetDNPropertyByName_name;
        this.GetDNPropertyByName_nameType = config.GetDNPropertyByName_nameType || 'str';
        this.GetE164Settings_select = config.GetE164Settings_select;
        this.GetE164Settings_selectType = config.GetE164Settings_selectType || 'str';
        this.GetE164Settings_expand = config.GetE164Settings_expand;
        this.GetE164Settings_expandType = config.GetE164Settings_expandType || 'str';
        this.UpdateE164Settings_body = config.UpdateE164Settings_body;
        this.UpdateE164Settings_bodyType = config.UpdateE164Settings_bodyType || 'str';
        this.ListEmailTemplate_top = config.ListEmailTemplate_top;
        this.ListEmailTemplate_topType = config.ListEmailTemplate_topType || 'str';
        this.ListEmailTemplate_skip = config.ListEmailTemplate_skip;
        this.ListEmailTemplate_skipType = config.ListEmailTemplate_skipType || 'str';
        this.ListEmailTemplate_search = config.ListEmailTemplate_search;
        this.ListEmailTemplate_searchType = config.ListEmailTemplate_searchType || 'str';
        this.ListEmailTemplate_filter = config.ListEmailTemplate_filter;
        this.ListEmailTemplate_filterType = config.ListEmailTemplate_filterType || 'str';
        this.ListEmailTemplate_count = config.ListEmailTemplate_count;
        this.ListEmailTemplate_countType = config.ListEmailTemplate_countType || 'str';
        this.ListEmailTemplate_orderby = config.ListEmailTemplate_orderby;
        this.ListEmailTemplate_orderbyType = config.ListEmailTemplate_orderbyType || 'str';
        this.ListEmailTemplate_select = config.ListEmailTemplate_select;
        this.ListEmailTemplate_selectType = config.ListEmailTemplate_selectType || 'str';
        this.ListEmailTemplate_expand = config.ListEmailTemplate_expand;
        this.ListEmailTemplate_expandType = config.ListEmailTemplate_expandType || 'str';
        this.GetEmailTemplate_templatePath = config.GetEmailTemplate_templatePath;
        this.GetEmailTemplate_templatePathType = config.GetEmailTemplate_templatePathType || 'str';
        this.GetEmailTemplate_select = config.GetEmailTemplate_select;
        this.GetEmailTemplate_selectType = config.GetEmailTemplate_selectType || 'str';
        this.GetEmailTemplate_expand = config.GetEmailTemplate_expand;
        this.GetEmailTemplate_expandType = config.GetEmailTemplate_expandType || 'str';
        this.UpdateEmailTemplate_templatePath = config.UpdateEmailTemplate_templatePath;
        this.UpdateEmailTemplate_templatePathType = config.UpdateEmailTemplate_templatePathType || 'str';
        this.UpdateEmailTemplate_body = config.UpdateEmailTemplate_body;
        this.UpdateEmailTemplate_bodyType = config.UpdateEmailTemplate_bodyType || 'str';
        this.SetDefault_templatePath = config.SetDefault_templatePath;
        this.SetDefault_templatePathType = config.SetDefault_templatePathType || 'str';
        this.GetEmergencyNotificationsSettings_select = config.GetEmergencyNotificationsSettings_select;
        this.GetEmergencyNotificationsSettings_selectType = config.GetEmergencyNotificationsSettings_selectType || 'str';
        this.GetEmergencyNotificationsSettings_expand = config.GetEmergencyNotificationsSettings_expand;
        this.GetEmergencyNotificationsSettings_expandType = config.GetEmergencyNotificationsSettings_expandType || 'str';
        this.UpdateEmergencyNotificationsSettings_body = config.UpdateEmergencyNotificationsSettings_body;
        this.UpdateEmergencyNotificationsSettings_bodyType = config.UpdateEmergencyNotificationsSettings_bodyType || 'str';
        this.ListEventLog_top = config.ListEventLog_top;
        this.ListEventLog_topType = config.ListEventLog_topType || 'str';
        this.ListEventLog_skip = config.ListEventLog_skip;
        this.ListEventLog_skipType = config.ListEventLog_skipType || 'str';
        this.ListEventLog_search = config.ListEventLog_search;
        this.ListEventLog_searchType = config.ListEventLog_searchType || 'str';
        this.ListEventLog_filter = config.ListEventLog_filter;
        this.ListEventLog_filterType = config.ListEventLog_filterType || 'str';
        this.ListEventLog_count = config.ListEventLog_count;
        this.ListEventLog_countType = config.ListEventLog_countType || 'str';
        this.ListEventLog_orderby = config.ListEventLog_orderby;
        this.ListEventLog_orderbyType = config.ListEventLog_orderbyType || 'str';
        this.ListEventLog_select = config.ListEventLog_select;
        this.ListEventLog_selectType = config.ListEventLog_selectType || 'str';
        this.ListEventLog_expand = config.ListEventLog_expand;
        this.ListEventLog_expandType = config.ListEventLog_expandType || 'str';
        this.ListFax_top = config.ListFax_top;
        this.ListFax_topType = config.ListFax_topType || 'str';
        this.ListFax_skip = config.ListFax_skip;
        this.ListFax_skipType = config.ListFax_skipType || 'str';
        this.ListFax_search = config.ListFax_search;
        this.ListFax_searchType = config.ListFax_searchType || 'str';
        this.ListFax_filter = config.ListFax_filter;
        this.ListFax_filterType = config.ListFax_filterType || 'str';
        this.ListFax_count = config.ListFax_count;
        this.ListFax_countType = config.ListFax_countType || 'str';
        this.ListFax_orderby = config.ListFax_orderby;
        this.ListFax_orderbyType = config.ListFax_orderbyType || 'str';
        this.ListFax_select = config.ListFax_select;
        this.ListFax_selectType = config.ListFax_selectType || 'str';
        this.ListFax_expand = config.ListFax_expand;
        this.ListFax_expandType = config.ListFax_expandType || 'str';
        this.CreateFax_body = config.CreateFax_body;
        this.CreateFax_bodyType = config.CreateFax_bodyType || 'str';
        this.GetFax_id = config.GetFax_id;
        this.GetFax_idType = config.GetFax_idType || 'str';
        this.GetFax_select = config.GetFax_select;
        this.GetFax_selectType = config.GetFax_selectType || 'str';
        this.GetFax_expand = config.GetFax_expand;
        this.GetFax_expandType = config.GetFax_expandType || 'str';
        this.UpdateFax_id = config.UpdateFax_id;
        this.UpdateFax_idType = config.UpdateFax_idType || 'str';
        this.UpdateFax_body = config.UpdateFax_body;
        this.UpdateFax_bodyType = config.UpdateFax_bodyType || 'str';
        this.DeleteFax_id = config.DeleteFax_id;
        this.DeleteFax_idType = config.DeleteFax_idType || 'str';
        this.DeleteFax_ifMatch = config.DeleteFax_ifMatch;
        this.DeleteFax_ifMatchType = config.DeleteFax_ifMatchType || 'str';
        this.BulkFaxDelete_body = config.BulkFaxDelete_body;
        this.BulkFaxDelete_bodyType = config.BulkFaxDelete_bodyType || 'str';
        this.GetFaxByNumber_number = config.GetFaxByNumber_number;
        this.GetFaxByNumber_numberType = config.GetFaxByNumber_numberType || 'str';
        this.GetFaxServerSettings_select = config.GetFaxServerSettings_select;
        this.GetFaxServerSettings_selectType = config.GetFaxServerSettings_selectType || 'str';
        this.GetFaxServerSettings_expand = config.GetFaxServerSettings_expand;
        this.GetFaxServerSettings_expandType = config.GetFaxServerSettings_expandType || 'str';
        this.UpdateFaxServerSettings_body = config.UpdateFaxServerSettings_body;
        this.UpdateFaxServerSettings_bodyType = config.UpdateFaxServerSettings_bodyType || 'str';
        this.GetFirewallState_select = config.GetFirewallState_select;
        this.GetFirewallState_selectType = config.GetFirewallState_selectType || 'str';
        this.GetFirewallState_expand = config.GetFirewallState_expand;
        this.GetFirewallState_expandType = config.GetFirewallState_expandType || 'str';
        this.GetFirmwareState_select = config.GetFirmwareState_select;
        this.GetFirmwareState_selectType = config.GetFirmwareState_selectType || 'str';
        this.GetFirmwareState_expand = config.GetFirmwareState_expand;
        this.GetFirmwareState_expandType = config.GetFirmwareState_expandType || 'str';
        this.ListFxs_top = config.ListFxs_top;
        this.ListFxs_topType = config.ListFxs_topType || 'str';
        this.ListFxs_skip = config.ListFxs_skip;
        this.ListFxs_skipType = config.ListFxs_skipType || 'str';
        this.ListFxs_search = config.ListFxs_search;
        this.ListFxs_searchType = config.ListFxs_searchType || 'str';
        this.ListFxs_filter = config.ListFxs_filter;
        this.ListFxs_filterType = config.ListFxs_filterType || 'str';
        this.ListFxs_count = config.ListFxs_count;
        this.ListFxs_countType = config.ListFxs_countType || 'str';
        this.ListFxs_orderby = config.ListFxs_orderby;
        this.ListFxs_orderbyType = config.ListFxs_orderbyType || 'str';
        this.ListFxs_select = config.ListFxs_select;
        this.ListFxs_selectType = config.ListFxs_selectType || 'str';
        this.ListFxs_expand = config.ListFxs_expand;
        this.ListFxs_expandType = config.ListFxs_expandType || 'str';
        this.CreateFxs_body = config.CreateFxs_body;
        this.CreateFxs_bodyType = config.CreateFxs_bodyType || 'str';
        this.GetFxs_macAddress = config.GetFxs_macAddress;
        this.GetFxs_macAddressType = config.GetFxs_macAddressType || 'str';
        this.GetFxs_select = config.GetFxs_select;
        this.GetFxs_selectType = config.GetFxs_selectType || 'str';
        this.GetFxs_expand = config.GetFxs_expand;
        this.GetFxs_expandType = config.GetFxs_expandType || 'str';
        this.UpdateFxs_macAddress = config.UpdateFxs_macAddress;
        this.UpdateFxs_macAddressType = config.UpdateFxs_macAddressType || 'str';
        this.UpdateFxs_body = config.UpdateFxs_body;
        this.UpdateFxs_bodyType = config.UpdateFxs_bodyType || 'str';
        this.DeleteFxs_macAddress = config.DeleteFxs_macAddress;
        this.DeleteFxs_macAddressType = config.DeleteFxs_macAddressType || 'str';
        this.DeleteFxs_ifMatch = config.DeleteFxs_ifMatch;
        this.DeleteFxs_ifMatchType = config.DeleteFxs_ifMatchType || 'str';
        this.ListFxsTemplate_top = config.ListFxsTemplate_top;
        this.ListFxsTemplate_topType = config.ListFxsTemplate_topType || 'str';
        this.ListFxsTemplate_skip = config.ListFxsTemplate_skip;
        this.ListFxsTemplate_skipType = config.ListFxsTemplate_skipType || 'str';
        this.ListFxsTemplate_search = config.ListFxsTemplate_search;
        this.ListFxsTemplate_searchType = config.ListFxsTemplate_searchType || 'str';
        this.ListFxsTemplate_filter = config.ListFxsTemplate_filter;
        this.ListFxsTemplate_filterType = config.ListFxsTemplate_filterType || 'str';
        this.ListFxsTemplate_count = config.ListFxsTemplate_count;
        this.ListFxsTemplate_countType = config.ListFxsTemplate_countType || 'str';
        this.ListFxsTemplate_orderby = config.ListFxsTemplate_orderby;
        this.ListFxsTemplate_orderbyType = config.ListFxsTemplate_orderbyType || 'str';
        this.ListFxsTemplate_select = config.ListFxsTemplate_select;
        this.ListFxsTemplate_selectType = config.ListFxsTemplate_selectType || 'str';
        this.ListFxsTemplate_expand = config.ListFxsTemplate_expand;
        this.ListFxsTemplate_expandType = config.ListFxsTemplate_expandType || 'str';
        this.CreateFxsTemplate_body = config.CreateFxsTemplate_body;
        this.CreateFxsTemplate_bodyType = config.CreateFxsTemplate_bodyType || 'str';
        this.GetFxsTemplate_id = config.GetFxsTemplate_id;
        this.GetFxsTemplate_idType = config.GetFxsTemplate_idType || 'str';
        this.GetFxsTemplate_select = config.GetFxsTemplate_select;
        this.GetFxsTemplate_selectType = config.GetFxsTemplate_selectType || 'str';
        this.GetFxsTemplate_expand = config.GetFxsTemplate_expand;
        this.GetFxsTemplate_expandType = config.GetFxsTemplate_expandType || 'str';
        this.UpdateFxsTemplate_id = config.UpdateFxsTemplate_id;
        this.UpdateFxsTemplate_idType = config.UpdateFxsTemplate_idType || 'str';
        this.UpdateFxsTemplate_body = config.UpdateFxsTemplate_body;
        this.UpdateFxsTemplate_bodyType = config.UpdateFxsTemplate_bodyType || 'str';
        this.DeleteFxsTemplate_id = config.DeleteFxsTemplate_id;
        this.DeleteFxsTemplate_idType = config.DeleteFxsTemplate_idType || 'str';
        this.DeleteFxsTemplate_ifMatch = config.DeleteFxsTemplate_ifMatch;
        this.DeleteFxsTemplate_ifMatchType = config.DeleteFxsTemplate_ifMatchType || 'str';
        this.GetGeneralSettingsForApps_select = config.GetGeneralSettingsForApps_select;
        this.GetGeneralSettingsForApps_selectType = config.GetGeneralSettingsForApps_selectType || 'str';
        this.GetGeneralSettingsForApps_expand = config.GetGeneralSettingsForApps_expand;
        this.GetGeneralSettingsForApps_expandType = config.GetGeneralSettingsForApps_expandType || 'str';
        this.UpdateGeneralSettingsForApps_body = config.UpdateGeneralSettingsForApps_body;
        this.UpdateGeneralSettingsForApps_bodyType = config.UpdateGeneralSettingsForApps_bodyType || 'str';
        this.GetGeneralSettingsForPbx_select = config.GetGeneralSettingsForPbx_select;
        this.GetGeneralSettingsForPbx_selectType = config.GetGeneralSettingsForPbx_selectType || 'str';
        this.GetGeneralSettingsForPbx_expand = config.GetGeneralSettingsForPbx_expand;
        this.GetGeneralSettingsForPbx_expandType = config.GetGeneralSettingsForPbx_expandType || 'str';
        this.UpdateGeneralSettingsForPbx_body = config.UpdateGeneralSettingsForPbx_body;
        this.UpdateGeneralSettingsForPbx_bodyType = config.UpdateGeneralSettingsForPbx_bodyType || 'str';
        this.GetGoogleSettings_select = config.GetGoogleSettings_select;
        this.GetGoogleSettings_selectType = config.GetGoogleSettings_selectType || 'str';
        this.GetGoogleSettings_expand = config.GetGoogleSettings_expand;
        this.GetGoogleSettings_expandType = config.GetGoogleSettings_expandType || 'str';
        this.UpdateGoogleSettings_body = config.UpdateGoogleSettings_body;
        this.UpdateGoogleSettings_bodyType = config.UpdateGoogleSettings_bodyType || 'str';
        this.GetGroup_id = config.GetGroup_id;
        this.GetGroup_idType = config.GetGroup_idType || 'str';
        this.GetGroup_select = config.GetGroup_select;
        this.GetGroup_selectType = config.GetGroup_selectType || 'str';
        this.GetGroup_expand = config.GetGroup_expand;
        this.GetGroup_expandType = config.GetGroup_expandType || 'str';
        this.UpdateGroup_id = config.UpdateGroup_id;
        this.UpdateGroup_idType = config.UpdateGroup_idType || 'str';
        this.UpdateGroup_body = config.UpdateGroup_body;
        this.UpdateGroup_bodyType = config.UpdateGroup_bodyType || 'str';
        this.DeleteGroup_id = config.DeleteGroup_id;
        this.DeleteGroup_idType = config.DeleteGroup_idType || 'str';
        this.DeleteGroup_ifMatch = config.DeleteGroup_ifMatch;
        this.DeleteGroup_ifMatchType = config.DeleteGroup_ifMatchType || 'str';
        this.ListGroup_top = config.ListGroup_top;
        this.ListGroup_topType = config.ListGroup_topType || 'str';
        this.ListGroup_skip = config.ListGroup_skip;
        this.ListGroup_skipType = config.ListGroup_skipType || 'str';
        this.ListGroup_search = config.ListGroup_search;
        this.ListGroup_searchType = config.ListGroup_searchType || 'str';
        this.ListGroup_filter = config.ListGroup_filter;
        this.ListGroup_filterType = config.ListGroup_filterType || 'str';
        this.ListGroup_count = config.ListGroup_count;
        this.ListGroup_countType = config.ListGroup_countType || 'str';
        this.ListGroup_orderby = config.ListGroup_orderby;
        this.ListGroup_orderbyType = config.ListGroup_orderbyType || 'str';
        this.ListGroup_select = config.ListGroup_select;
        this.ListGroup_selectType = config.ListGroup_selectType || 'str';
        this.ListGroup_expand = config.ListGroup_expand;
        this.ListGroup_expandType = config.ListGroup_expandType || 'str';
        this.CreateGroup_body = config.CreateGroup_body;
        this.CreateGroup_bodyType = config.CreateGroup_bodyType || 'str';
        this.GetRestrictions_id = config.GetRestrictions_id;
        this.GetRestrictions_idType = config.GetRestrictions_idType || 'str';
        this.DeleteCompanyByNumber_body = config.DeleteCompanyByNumber_body;
        this.DeleteCompanyByNumber_bodyType = config.DeleteCompanyByNumber_bodyType || 'str';
        this.DeleteCompanyById_body = config.DeleteCompanyById_body;
        this.DeleteCompanyById_bodyType = config.DeleteCompanyById_bodyType || 'str';
        this.ListMembers_id = config.ListMembers_id;
        this.ListMembers_idType = config.ListMembers_idType || 'str';
        this.ListMembers_top = config.ListMembers_top;
        this.ListMembers_topType = config.ListMembers_topType || 'str';
        this.ListMembers_skip = config.ListMembers_skip;
        this.ListMembers_skipType = config.ListMembers_skipType || 'str';
        this.ListMembers_search = config.ListMembers_search;
        this.ListMembers_searchType = config.ListMembers_searchType || 'str';
        this.ListMembers_filter = config.ListMembers_filter;
        this.ListMembers_filterType = config.ListMembers_filterType || 'str';
        this.ListMembers_count = config.ListMembers_count;
        this.ListMembers_countType = config.ListMembers_countType || 'str';
        this.ListMembers_orderby = config.ListMembers_orderby;
        this.ListMembers_orderbyType = config.ListMembers_orderbyType || 'str';
        this.ListMembers_select = config.ListMembers_select;
        this.ListMembers_selectType = config.ListMembers_selectType || 'str';
        this.ListMembers_expand = config.ListMembers_expand;
        this.ListMembers_expandType = config.ListMembers_expandType || 'str';
        this.ListRights_id = config.ListRights_id;
        this.ListRights_idType = config.ListRights_idType || 'str';
        this.ListRights_top = config.ListRights_top;
        this.ListRights_topType = config.ListRights_topType || 'str';
        this.ListRights_skip = config.ListRights_skip;
        this.ListRights_skipType = config.ListRights_skipType || 'str';
        this.ListRights_search = config.ListRights_search;
        this.ListRights_searchType = config.ListRights_searchType || 'str';
        this.ListRights_filter = config.ListRights_filter;
        this.ListRights_filterType = config.ListRights_filterType || 'str';
        this.ListRights_count = config.ListRights_count;
        this.ListRights_countType = config.ListRights_countType || 'str';
        this.ListRights_orderby = config.ListRights_orderby;
        this.ListRights_orderbyType = config.ListRights_orderbyType || 'str';
        this.ListRights_select = config.ListRights_select;
        this.ListRights_selectType = config.ListRights_selectType || 'str';
        this.ListRights_expand = config.ListRights_expand;
        this.ListRights_expandType = config.ListRights_expandType || 'str';
        this.ReplaceGroupLicenseKey_body = config.ReplaceGroupLicenseKey_body;
        this.ReplaceGroupLicenseKey_bodyType = config.ReplaceGroupLicenseKey_bodyType || 'str';
        this.LinkGroupPartner_body = config.LinkGroupPartner_body;
        this.LinkGroupPartner_bodyType = config.LinkGroupPartner_bodyType || 'str';
        this.GetHotelServices_select = config.GetHotelServices_select;
        this.GetHotelServices_selectType = config.GetHotelServices_selectType || 'str';
        this.GetHotelServices_expand = config.GetHotelServices_expand;
        this.GetHotelServices_expandType = config.GetHotelServices_expandType || 'str';
        this.UpdateHotelServices_body = config.UpdateHotelServices_body;
        this.UpdateHotelServices_bodyType = config.UpdateHotelServices_bodyType || 'str';
        this.ListInboundRule_top = config.ListInboundRule_top;
        this.ListInboundRule_topType = config.ListInboundRule_topType || 'str';
        this.ListInboundRule_skip = config.ListInboundRule_skip;
        this.ListInboundRule_skipType = config.ListInboundRule_skipType || 'str';
        this.ListInboundRule_search = config.ListInboundRule_search;
        this.ListInboundRule_searchType = config.ListInboundRule_searchType || 'str';
        this.ListInboundRule_filter = config.ListInboundRule_filter;
        this.ListInboundRule_filterType = config.ListInboundRule_filterType || 'str';
        this.ListInboundRule_count = config.ListInboundRule_count;
        this.ListInboundRule_countType = config.ListInboundRule_countType || 'str';
        this.ListInboundRule_orderby = config.ListInboundRule_orderby;
        this.ListInboundRule_orderbyType = config.ListInboundRule_orderbyType || 'str';
        this.ListInboundRule_select = config.ListInboundRule_select;
        this.ListInboundRule_selectType = config.ListInboundRule_selectType || 'str';
        this.ListInboundRule_expand = config.ListInboundRule_expand;
        this.ListInboundRule_expandType = config.ListInboundRule_expandType || 'str';
        this.CreateInboundRule_body = config.CreateInboundRule_body;
        this.CreateInboundRule_bodyType = config.CreateInboundRule_bodyType || 'str';
        this.GetInboundRule_id = config.GetInboundRule_id;
        this.GetInboundRule_idType = config.GetInboundRule_idType || 'str';
        this.GetInboundRule_select = config.GetInboundRule_select;
        this.GetInboundRule_selectType = config.GetInboundRule_selectType || 'str';
        this.GetInboundRule_expand = config.GetInboundRule_expand;
        this.GetInboundRule_expandType = config.GetInboundRule_expandType || 'str';
        this.UpdateInboundRule_id = config.UpdateInboundRule_id;
        this.UpdateInboundRule_idType = config.UpdateInboundRule_idType || 'str';
        this.UpdateInboundRule_body = config.UpdateInboundRule_body;
        this.UpdateInboundRule_bodyType = config.UpdateInboundRule_bodyType || 'str';
        this.DeleteInboundRule_id = config.DeleteInboundRule_id;
        this.DeleteInboundRule_idType = config.DeleteInboundRule_idType || 'str';
        this.DeleteInboundRule_ifMatch = config.DeleteInboundRule_ifMatch;
        this.DeleteInboundRule_ifMatchType = config.DeleteInboundRule_ifMatchType || 'str';
        this.BulkInboundRulesDelete_body = config.BulkInboundRulesDelete_body;
        this.BulkInboundRulesDelete_bodyType = config.BulkInboundRulesDelete_bodyType || 'str';
        this.GetLicenseInfo_select = config.GetLicenseInfo_select;
        this.GetLicenseInfo_selectType = config.GetLicenseInfo_selectType || 'str';
        this.GetLicenseInfo_expand = config.GetLicenseInfo_expand;
        this.GetLicenseInfo_expandType = config.GetLicenseInfo_expandType || 'str';
        this.ReplaceLicenseKey_body = config.ReplaceLicenseKey_body;
        this.ReplaceLicenseKey_bodyType = config.ReplaceLicenseKey_bodyType || 'str';
        this.EditLicenseInfo_body = config.EditLicenseInfo_body;
        this.EditLicenseInfo_bodyType = config.EditLicenseInfo_bodyType || 'str';
        this.GetLicenseStatus_select = config.GetLicenseStatus_select;
        this.GetLicenseStatus_selectType = config.GetLicenseStatus_selectType || 'str';
        this.GetLicenseStatus_expand = config.GetLicenseStatus_expand;
        this.GetLicenseStatus_expandType = config.GetLicenseStatus_expandType || 'str';
        this.LinkPartner_body = config.LinkPartner_body;
        this.LinkPartner_bodyType = config.LinkPartner_bodyType || 'str';
        this.PartnerInfo_resellerId = config.PartnerInfo_resellerId;
        this.PartnerInfo_resellerIdType = config.PartnerInfo_resellerIdType || 'str';
        this.GetLoggingSettings_select = config.GetLoggingSettings_select;
        this.GetLoggingSettings_selectType = config.GetLoggingSettings_selectType || 'str';
        this.GetLoggingSettings_expand = config.GetLoggingSettings_expand;
        this.GetLoggingSettings_expandType = config.GetLoggingSettings_expandType || 'str';
        this.UpdateLoggingSettings_body = config.UpdateLoggingSettings_body;
        this.UpdateLoggingSettings_bodyType = config.UpdateLoggingSettings_bodyType || 'str';
        this.GetMicrosoft365Integration_select = config.GetMicrosoft365Integration_select;
        this.GetMicrosoft365Integration_selectType = config.GetMicrosoft365Integration_selectType || 'str';
        this.GetMicrosoft365Integration_expand = config.GetMicrosoft365Integration_expand;
        this.GetMicrosoft365Integration_expandType = config.GetMicrosoft365Integration_expandType || 'str';
        this.UpdateMicrosoft365Integration_body = config.UpdateMicrosoft365Integration_body;
        this.UpdateMicrosoft365Integration_bodyType = config.UpdateMicrosoft365Integration_bodyType || 'str';
        this.AuthorizePresence_body = config.AuthorizePresence_body;
        this.AuthorizePresence_bodyType = config.AuthorizePresence_bodyType || 'str';
        this.GetUsers_body = config.GetUsers_body;
        this.GetUsers_bodyType = config.GetUsers_bodyType || 'str';
        this.GetUsersByPrincipalNames_body = config.GetUsersByPrincipalNames_body;
        this.GetUsersByPrincipalNames_bodyType = config.GetUsersByPrincipalNames_bodyType || 'str';
        this.GetMicrosoft365TeamsIntegration_select = config.GetMicrosoft365TeamsIntegration_select;
        this.GetMicrosoft365TeamsIntegration_selectType = config.GetMicrosoft365TeamsIntegration_selectType || 'str';
        this.GetMicrosoft365TeamsIntegration_expand = config.GetMicrosoft365TeamsIntegration_expand;
        this.GetMicrosoft365TeamsIntegration_expandType = config.GetMicrosoft365TeamsIntegration_expandType || 'str';
        this.UpdateMicrosoft365TeamsIntegration_body = config.UpdateMicrosoft365TeamsIntegration_body;
        this.UpdateMicrosoft365TeamsIntegration_bodyType = config.UpdateMicrosoft365TeamsIntegration_bodyType || 'str';
        this.CheckFqdnRecord_fqdn = config.CheckFqdnRecord_fqdn;
        this.CheckFqdnRecord_fqdnType = config.CheckFqdnRecord_fqdnType || 'str';
        this.GetMusicOnHoldSettings_select = config.GetMusicOnHoldSettings_select;
        this.GetMusicOnHoldSettings_selectType = config.GetMusicOnHoldSettings_selectType || 'str';
        this.GetMusicOnHoldSettings_expand = config.GetMusicOnHoldSettings_expand;
        this.GetMusicOnHoldSettings_expandType = config.GetMusicOnHoldSettings_expandType || 'str';
        this.UpdateMusicOnHoldSettings_body = config.UpdateMusicOnHoldSettings_body;
        this.UpdateMusicOnHoldSettings_bodyType = config.UpdateMusicOnHoldSettings_bodyType || 'str';
        this.GetMyGroup_select = config.GetMyGroup_select;
        this.GetMyGroup_selectType = config.GetMyGroup_selectType || 'str';
        this.GetMyGroup_expand = config.GetMyGroup_expand;
        this.GetMyGroup_expandType = config.GetMyGroup_expandType || 'str';
        this.UpdateMyGroup_body = config.UpdateMyGroup_body;
        this.UpdateMyGroup_bodyType = config.UpdateMyGroup_bodyType || 'str';
        this.ListMyGroupMembers_top = config.ListMyGroupMembers_top;
        this.ListMyGroupMembers_topType = config.ListMyGroupMembers_topType || 'str';
        this.ListMyGroupMembers_skip = config.ListMyGroupMembers_skip;
        this.ListMyGroupMembers_skipType = config.ListMyGroupMembers_skipType || 'str';
        this.ListMyGroupMembers_search = config.ListMyGroupMembers_search;
        this.ListMyGroupMembers_searchType = config.ListMyGroupMembers_searchType || 'str';
        this.ListMyGroupMembers_filter = config.ListMyGroupMembers_filter;
        this.ListMyGroupMembers_filterType = config.ListMyGroupMembers_filterType || 'str';
        this.ListMyGroupMembers_count = config.ListMyGroupMembers_count;
        this.ListMyGroupMembers_countType = config.ListMyGroupMembers_countType || 'str';
        this.ListMyGroupMembers_orderby = config.ListMyGroupMembers_orderby;
        this.ListMyGroupMembers_orderbyType = config.ListMyGroupMembers_orderbyType || 'str';
        this.ListMyGroupMembers_select = config.ListMyGroupMembers_select;
        this.ListMyGroupMembers_selectType = config.ListMyGroupMembers_selectType || 'str';
        this.ListMyGroupMembers_expand = config.ListMyGroupMembers_expand;
        this.ListMyGroupMembers_expandType = config.ListMyGroupMembers_expandType || 'str';
        this.ListMyGroupRights_top = config.ListMyGroupRights_top;
        this.ListMyGroupRights_topType = config.ListMyGroupRights_topType || 'str';
        this.ListMyGroupRights_skip = config.ListMyGroupRights_skip;
        this.ListMyGroupRights_skipType = config.ListMyGroupRights_skipType || 'str';
        this.ListMyGroupRights_search = config.ListMyGroupRights_search;
        this.ListMyGroupRights_searchType = config.ListMyGroupRights_searchType || 'str';
        this.ListMyGroupRights_filter = config.ListMyGroupRights_filter;
        this.ListMyGroupRights_filterType = config.ListMyGroupRights_filterType || 'str';
        this.ListMyGroupRights_count = config.ListMyGroupRights_count;
        this.ListMyGroupRights_countType = config.ListMyGroupRights_countType || 'str';
        this.ListMyGroupRights_orderby = config.ListMyGroupRights_orderby;
        this.ListMyGroupRights_orderbyType = config.ListMyGroupRights_orderbyType || 'str';
        this.ListMyGroupRights_select = config.ListMyGroupRights_select;
        this.ListMyGroupRights_selectType = config.ListMyGroupRights_selectType || 'str';
        this.ListMyGroupRights_expand = config.ListMyGroupRights_expand;
        this.ListMyGroupRights_expandType = config.ListMyGroupRights_expandType || 'str';
        this.ReplaceMyGroupLicenseKey_body = config.ReplaceMyGroupLicenseKey_body;
        this.ReplaceMyGroupLicenseKey_bodyType = config.ReplaceMyGroupLicenseKey_bodyType || 'str';
        this.GetMyGroupPartnerInfo_resellerId = config.GetMyGroupPartnerInfo_resellerId;
        this.GetMyGroupPartnerInfo_resellerIdType = config.GetMyGroupPartnerInfo_resellerIdType || 'str';
        this.LinkMyGroupPartner_body = config.LinkMyGroupPartner_body;
        this.LinkMyGroupPartner_bodyType = config.LinkMyGroupPartner_bodyType || 'str';
        this.ListRefreshToken_top = config.ListRefreshToken_top;
        this.ListRefreshToken_topType = config.ListRefreshToken_topType || 'str';
        this.ListRefreshToken_skip = config.ListRefreshToken_skip;
        this.ListRefreshToken_skipType = config.ListRefreshToken_skipType || 'str';
        this.ListRefreshToken_search = config.ListRefreshToken_search;
        this.ListRefreshToken_searchType = config.ListRefreshToken_searchType || 'str';
        this.ListRefreshToken_filter = config.ListRefreshToken_filter;
        this.ListRefreshToken_filterType = config.ListRefreshToken_filterType || 'str';
        this.ListRefreshToken_count = config.ListRefreshToken_count;
        this.ListRefreshToken_countType = config.ListRefreshToken_countType || 'str';
        this.ListRefreshToken_orderby = config.ListRefreshToken_orderby;
        this.ListRefreshToken_orderbyType = config.ListRefreshToken_orderbyType || 'str';
        this.ListRefreshToken_select = config.ListRefreshToken_select;
        this.ListRefreshToken_selectType = config.ListRefreshToken_selectType || 'str';
        this.ListRefreshToken_expand = config.ListRefreshToken_expand;
        this.ListRefreshToken_expandType = config.ListRefreshToken_expandType || 'str';
        this.RevokeToken_id = config.RevokeToken_id;
        this.RevokeToken_idType = config.RevokeToken_idType || 'str';
        this.GetMyUser_select = config.GetMyUser_select;
        this.GetMyUser_selectType = config.GetMyUser_selectType || 'str';
        this.GetMyUser_expand = config.GetMyUser_expand;
        this.GetMyUser_expandType = config.GetMyUser_expandType || 'str';
        this.UpdateMyUser_body = config.UpdateMyUser_body;
        this.UpdateMyUser_bodyType = config.UpdateMyUser_bodyType || 'str';
        this.ListMyUserGroups_top = config.ListMyUserGroups_top;
        this.ListMyUserGroups_topType = config.ListMyUserGroups_topType || 'str';
        this.ListMyUserGroups_skip = config.ListMyUserGroups_skip;
        this.ListMyUserGroups_skipType = config.ListMyUserGroups_skipType || 'str';
        this.ListMyUserGroups_search = config.ListMyUserGroups_search;
        this.ListMyUserGroups_searchType = config.ListMyUserGroups_searchType || 'str';
        this.ListMyUserGroups_filter = config.ListMyUserGroups_filter;
        this.ListMyUserGroups_filterType = config.ListMyUserGroups_filterType || 'str';
        this.ListMyUserGroups_count = config.ListMyUserGroups_count;
        this.ListMyUserGroups_countType = config.ListMyUserGroups_countType || 'str';
        this.ListMyUserGroups_orderby = config.ListMyUserGroups_orderby;
        this.ListMyUserGroups_orderbyType = config.ListMyUserGroups_orderbyType || 'str';
        this.ListMyUserGroups_select = config.ListMyUserGroups_select;
        this.ListMyUserGroups_selectType = config.ListMyUserGroups_selectType || 'str';
        this.ListMyUserGroups_expand = config.ListMyUserGroups_expand;
        this.ListMyUserGroups_expandType = config.ListMyUserGroups_expandType || 'str';
        this.ListMyUserForwardingProfiles_top = config.ListMyUserForwardingProfiles_top;
        this.ListMyUserForwardingProfiles_topType = config.ListMyUserForwardingProfiles_topType || 'str';
        this.ListMyUserForwardingProfiles_skip = config.ListMyUserForwardingProfiles_skip;
        this.ListMyUserForwardingProfiles_skipType = config.ListMyUserForwardingProfiles_skipType || 'str';
        this.ListMyUserForwardingProfiles_search = config.ListMyUserForwardingProfiles_search;
        this.ListMyUserForwardingProfiles_searchType = config.ListMyUserForwardingProfiles_searchType || 'str';
        this.ListMyUserForwardingProfiles_filter = config.ListMyUserForwardingProfiles_filter;
        this.ListMyUserForwardingProfiles_filterType = config.ListMyUserForwardingProfiles_filterType || 'str';
        this.ListMyUserForwardingProfiles_count = config.ListMyUserForwardingProfiles_count;
        this.ListMyUserForwardingProfiles_countType = config.ListMyUserForwardingProfiles_countType || 'str';
        this.ListMyUserForwardingProfiles_orderby = config.ListMyUserForwardingProfiles_orderby;
        this.ListMyUserForwardingProfiles_orderbyType = config.ListMyUserForwardingProfiles_orderbyType || 'str';
        this.ListMyUserForwardingProfiles_select = config.ListMyUserForwardingProfiles_select;
        this.ListMyUserForwardingProfiles_selectType = config.ListMyUserForwardingProfiles_selectType || 'str';
        this.ListMyUserForwardingProfiles_expand = config.ListMyUserForwardingProfiles_expand;
        this.ListMyUserForwardingProfiles_expandType = config.ListMyUserForwardingProfiles_expandType || 'str';
        this.ListMyUserGreetings_top = config.ListMyUserGreetings_top;
        this.ListMyUserGreetings_topType = config.ListMyUserGreetings_topType || 'str';
        this.ListMyUserGreetings_skip = config.ListMyUserGreetings_skip;
        this.ListMyUserGreetings_skipType = config.ListMyUserGreetings_skipType || 'str';
        this.ListMyUserGreetings_search = config.ListMyUserGreetings_search;
        this.ListMyUserGreetings_searchType = config.ListMyUserGreetings_searchType || 'str';
        this.ListMyUserGreetings_filter = config.ListMyUserGreetings_filter;
        this.ListMyUserGreetings_filterType = config.ListMyUserGreetings_filterType || 'str';
        this.ListMyUserGreetings_count = config.ListMyUserGreetings_count;
        this.ListMyUserGreetings_countType = config.ListMyUserGreetings_countType || 'str';
        this.ListMyUserGreetings_orderby = config.ListMyUserGreetings_orderby;
        this.ListMyUserGreetings_orderbyType = config.ListMyUserGreetings_orderbyType || 'str';
        this.ListMyUserGreetings_select = config.ListMyUserGreetings_select;
        this.ListMyUserGreetings_selectType = config.ListMyUserGreetings_selectType || 'str';
        this.ListMyUserGreetings_expand = config.ListMyUserGreetings_expand;
        this.ListMyUserGreetings_expandType = config.ListMyUserGreetings_expandType || 'str';
        this.ListNetworkInterface_top = config.ListNetworkInterface_top;
        this.ListNetworkInterface_topType = config.ListNetworkInterface_topType || 'str';
        this.ListNetworkInterface_skip = config.ListNetworkInterface_skip;
        this.ListNetworkInterface_skipType = config.ListNetworkInterface_skipType || 'str';
        this.ListNetworkInterface_search = config.ListNetworkInterface_search;
        this.ListNetworkInterface_searchType = config.ListNetworkInterface_searchType || 'str';
        this.ListNetworkInterface_filter = config.ListNetworkInterface_filter;
        this.ListNetworkInterface_filterType = config.ListNetworkInterface_filterType || 'str';
        this.ListNetworkInterface_count = config.ListNetworkInterface_count;
        this.ListNetworkInterface_countType = config.ListNetworkInterface_countType || 'str';
        this.ListNetworkInterface_orderby = config.ListNetworkInterface_orderby;
        this.ListNetworkInterface_orderbyType = config.ListNetworkInterface_orderbyType || 'str';
        this.ListNetworkInterface_select = config.ListNetworkInterface_select;
        this.ListNetworkInterface_selectType = config.ListNetworkInterface_selectType || 'str';
        this.ListNetworkInterface_expand = config.ListNetworkInterface_expand;
        this.ListNetworkInterface_expandType = config.ListNetworkInterface_expandType || 'str';
        this.GetNetworkSettings_select = config.GetNetworkSettings_select;
        this.GetNetworkSettings_selectType = config.GetNetworkSettings_selectType || 'str';
        this.GetNetworkSettings_expand = config.GetNetworkSettings_expand;
        this.GetNetworkSettings_expandType = config.GetNetworkSettings_expandType || 'str';
        this.UpdateNetworkSettings_body = config.UpdateNetworkSettings_body;
        this.UpdateNetworkSettings_bodyType = config.UpdateNetworkSettings_bodyType || 'str';
        this.GetIfaces_top = config.GetIfaces_top;
        this.GetIfaces_topType = config.GetIfaces_topType || 'str';
        this.GetIfaces_skip = config.GetIfaces_skip;
        this.GetIfaces_skipType = config.GetIfaces_skipType || 'str';
        this.GetIfaces_search = config.GetIfaces_search;
        this.GetIfaces_searchType = config.GetIfaces_searchType || 'str';
        this.GetIfaces_filter = config.GetIfaces_filter;
        this.GetIfaces_filterType = config.GetIfaces_filterType || 'str';
        this.GetIfaces_count = config.GetIfaces_count;
        this.GetIfaces_countType = config.GetIfaces_countType || 'str';
        this.GetNotificationSettings_select = config.GetNotificationSettings_select;
        this.GetNotificationSettings_selectType = config.GetNotificationSettings_selectType || 'str';
        this.GetNotificationSettings_expand = config.GetNotificationSettings_expand;
        this.GetNotificationSettings_expandType = config.GetNotificationSettings_expandType || 'str';
        this.UpdateNotificationSettings_body = config.UpdateNotificationSettings_body;
        this.UpdateNotificationSettings_bodyType = config.UpdateNotificationSettings_bodyType || 'str';
        this.TestEmail_body = config.TestEmail_body;
        this.TestEmail_bodyType = config.TestEmail_bodyType || 'str';
        this.GetOfficeHours_select = config.GetOfficeHours_select;
        this.GetOfficeHours_selectType = config.GetOfficeHours_selectType || 'str';
        this.GetOfficeHours_expand = config.GetOfficeHours_expand;
        this.GetOfficeHours_expandType = config.GetOfficeHours_expandType || 'str';
        this.UpdateOfficeHours_body = config.UpdateOfficeHours_body;
        this.UpdateOfficeHours_bodyType = config.UpdateOfficeHours_bodyType || 'str';
        this.GetOutboundRule_id = config.GetOutboundRule_id;
        this.GetOutboundRule_idType = config.GetOutboundRule_idType || 'str';
        this.GetOutboundRule_select = config.GetOutboundRule_select;
        this.GetOutboundRule_selectType = config.GetOutboundRule_selectType || 'str';
        this.GetOutboundRule_expand = config.GetOutboundRule_expand;
        this.GetOutboundRule_expandType = config.GetOutboundRule_expandType || 'str';
        this.UpdateOutboundRule_id = config.UpdateOutboundRule_id;
        this.UpdateOutboundRule_idType = config.UpdateOutboundRule_idType || 'str';
        this.UpdateOutboundRule_body = config.UpdateOutboundRule_body;
        this.UpdateOutboundRule_bodyType = config.UpdateOutboundRule_bodyType || 'str';
        this.DeleteOutboundRule_id = config.DeleteOutboundRule_id;
        this.DeleteOutboundRule_idType = config.DeleteOutboundRule_idType || 'str';
        this.DeleteOutboundRule_ifMatch = config.DeleteOutboundRule_ifMatch;
        this.DeleteOutboundRule_ifMatchType = config.DeleteOutboundRule_ifMatchType || 'str';
        this.ListOutboundRule_top = config.ListOutboundRule_top;
        this.ListOutboundRule_topType = config.ListOutboundRule_topType || 'str';
        this.ListOutboundRule_skip = config.ListOutboundRule_skip;
        this.ListOutboundRule_skipType = config.ListOutboundRule_skipType || 'str';
        this.ListOutboundRule_search = config.ListOutboundRule_search;
        this.ListOutboundRule_searchType = config.ListOutboundRule_searchType || 'str';
        this.ListOutboundRule_filter = config.ListOutboundRule_filter;
        this.ListOutboundRule_filterType = config.ListOutboundRule_filterType || 'str';
        this.ListOutboundRule_count = config.ListOutboundRule_count;
        this.ListOutboundRule_countType = config.ListOutboundRule_countType || 'str';
        this.ListOutboundRule_orderby = config.ListOutboundRule_orderby;
        this.ListOutboundRule_orderbyType = config.ListOutboundRule_orderbyType || 'str';
        this.ListOutboundRule_select = config.ListOutboundRule_select;
        this.ListOutboundRule_selectType = config.ListOutboundRule_selectType || 'str';
        this.ListOutboundRule_expand = config.ListOutboundRule_expand;
        this.ListOutboundRule_expandType = config.ListOutboundRule_expandType || 'str';
        this.CreateOutboundRule_body = config.CreateOutboundRule_body;
        this.CreateOutboundRule_bodyType = config.CreateOutboundRule_bodyType || 'str';
        this.GetEmergencyOutboundRules_top = config.GetEmergencyOutboundRules_top;
        this.GetEmergencyOutboundRules_topType = config.GetEmergencyOutboundRules_topType || 'str';
        this.GetEmergencyOutboundRules_skip = config.GetEmergencyOutboundRules_skip;
        this.GetEmergencyOutboundRules_skipType = config.GetEmergencyOutboundRules_skipType || 'str';
        this.GetEmergencyOutboundRules_search = config.GetEmergencyOutboundRules_search;
        this.GetEmergencyOutboundRules_searchType = config.GetEmergencyOutboundRules_searchType || 'str';
        this.GetEmergencyOutboundRules_filter = config.GetEmergencyOutboundRules_filter;
        this.GetEmergencyOutboundRules_filterType = config.GetEmergencyOutboundRules_filterType || 'str';
        this.GetEmergencyOutboundRules_count = config.GetEmergencyOutboundRules_count;
        this.GetEmergencyOutboundRules_countType = config.GetEmergencyOutboundRules_countType || 'str';
        this.GetEmergencyOutboundRules_select = config.GetEmergencyOutboundRules_select;
        this.GetEmergencyOutboundRules_selectType = config.GetEmergencyOutboundRules_selectType || 'str';
        this.GetEmergencyOutboundRules_orderby = config.GetEmergencyOutboundRules_orderby;
        this.GetEmergencyOutboundRules_orderbyType = config.GetEmergencyOutboundRules_orderbyType || 'str';
        this.GetEmergencyOutboundRules_expand = config.GetEmergencyOutboundRules_expand;
        this.GetEmergencyOutboundRules_expandType = config.GetEmergencyOutboundRules_expandType || 'str';
        this.Purge_body = config.Purge_body;
        this.Purge_bodyType = config.Purge_bodyType || 'str';
        this.MoveUpDown_body = config.MoveUpDown_body;
        this.MoveUpDown_bodyType = config.MoveUpDown_bodyType || 'str';
        this.GetParameterByName_name = config.GetParameterByName_name;
        this.GetParameterByName_nameType = config.GetParameterByName_nameType || 'str';
        this.ListParameter_top = config.ListParameter_top;
        this.ListParameter_topType = config.ListParameter_topType || 'str';
        this.ListParameter_skip = config.ListParameter_skip;
        this.ListParameter_skipType = config.ListParameter_skipType || 'str';
        this.ListParameter_search = config.ListParameter_search;
        this.ListParameter_searchType = config.ListParameter_searchType || 'str';
        this.ListParameter_filter = config.ListParameter_filter;
        this.ListParameter_filterType = config.ListParameter_filterType || 'str';
        this.ListParameter_count = config.ListParameter_count;
        this.ListParameter_countType = config.ListParameter_countType || 'str';
        this.ListParameter_orderby = config.ListParameter_orderby;
        this.ListParameter_orderbyType = config.ListParameter_orderbyType || 'str';
        this.ListParameter_select = config.ListParameter_select;
        this.ListParameter_selectType = config.ListParameter_selectType || 'str';
        this.ListParameter_expand = config.ListParameter_expand;
        this.ListParameter_expandType = config.ListParameter_expandType || 'str';
        this.CreateParameter_body = config.CreateParameter_body;
        this.CreateParameter_bodyType = config.CreateParameter_bodyType || 'str';
        this.GetParameter_id = config.GetParameter_id;
        this.GetParameter_idType = config.GetParameter_idType || 'str';
        this.GetParameter_select = config.GetParameter_select;
        this.GetParameter_selectType = config.GetParameter_selectType || 'str';
        this.GetParameter_expand = config.GetParameter_expand;
        this.GetParameter_expandType = config.GetParameter_expandType || 'str';
        this.UpdateParameter_id = config.UpdateParameter_id;
        this.UpdateParameter_idType = config.UpdateParameter_idType || 'str';
        this.UpdateParameter_body = config.UpdateParameter_body;
        this.UpdateParameter_bodyType = config.UpdateParameter_bodyType || 'str';
        this.DeleteParameter_id = config.DeleteParameter_id;
        this.DeleteParameter_idType = config.DeleteParameter_idType || 'str';
        this.DeleteParameter_ifMatch = config.DeleteParameter_ifMatch;
        this.DeleteParameter_ifMatchType = config.DeleteParameter_ifMatchType || 'str';
        this.ListParkingGroups_id = config.ListParkingGroups_id;
        this.ListParkingGroups_idType = config.ListParkingGroups_idType || 'str';
        this.ListParkingGroups_top = config.ListParkingGroups_top;
        this.ListParkingGroups_topType = config.ListParkingGroups_topType || 'str';
        this.ListParkingGroups_skip = config.ListParkingGroups_skip;
        this.ListParkingGroups_skipType = config.ListParkingGroups_skipType || 'str';
        this.ListParkingGroups_search = config.ListParkingGroups_search;
        this.ListParkingGroups_searchType = config.ListParkingGroups_searchType || 'str';
        this.ListParkingGroups_filter = config.ListParkingGroups_filter;
        this.ListParkingGroups_filterType = config.ListParkingGroups_filterType || 'str';
        this.ListParkingGroups_count = config.ListParkingGroups_count;
        this.ListParkingGroups_countType = config.ListParkingGroups_countType || 'str';
        this.ListParkingGroups_orderby = config.ListParkingGroups_orderby;
        this.ListParkingGroups_orderbyType = config.ListParkingGroups_orderbyType || 'str';
        this.ListParkingGroups_select = config.ListParkingGroups_select;
        this.ListParkingGroups_selectType = config.ListParkingGroups_selectType || 'str';
        this.ListParkingGroups_expand = config.ListParkingGroups_expand;
        this.ListParkingGroups_expandType = config.ListParkingGroups_expandType || 'str';
        this.GetByNumber_number = config.GetByNumber_number;
        this.GetByNumber_numberType = config.GetByNumber_numberType || 'str';
        this.ListParking_top = config.ListParking_top;
        this.ListParking_topType = config.ListParking_topType || 'str';
        this.ListParking_skip = config.ListParking_skip;
        this.ListParking_skipType = config.ListParking_skipType || 'str';
        this.ListParking_search = config.ListParking_search;
        this.ListParking_searchType = config.ListParking_searchType || 'str';
        this.ListParking_filter = config.ListParking_filter;
        this.ListParking_filterType = config.ListParking_filterType || 'str';
        this.ListParking_count = config.ListParking_count;
        this.ListParking_countType = config.ListParking_countType || 'str';
        this.ListParking_orderby = config.ListParking_orderby;
        this.ListParking_orderbyType = config.ListParking_orderbyType || 'str';
        this.ListParking_select = config.ListParking_select;
        this.ListParking_selectType = config.ListParking_selectType || 'str';
        this.ListParking_expand = config.ListParking_expand;
        this.ListParking_expandType = config.ListParking_expandType || 'str';
        this.CreateParking_body = config.CreateParking_body;
        this.CreateParking_bodyType = config.CreateParking_bodyType || 'str';
        this.GetParking_id = config.GetParking_id;
        this.GetParking_idType = config.GetParking_idType || 'str';
        this.GetParking_select = config.GetParking_select;
        this.GetParking_selectType = config.GetParking_selectType || 'str';
        this.GetParking_expand = config.GetParking_expand;
        this.GetParking_expandType = config.GetParking_expandType || 'str';
        this.UpdateParking_id = config.UpdateParking_id;
        this.UpdateParking_idType = config.UpdateParking_idType || 'str';
        this.UpdateParking_body = config.UpdateParking_body;
        this.UpdateParking_bodyType = config.UpdateParking_bodyType || 'str';
        this.DeleteParking_id = config.DeleteParking_id;
        this.DeleteParking_idType = config.DeleteParking_idType || 'str';
        this.DeleteParking_ifMatch = config.DeleteParking_ifMatch;
        this.DeleteParking_ifMatchType = config.DeleteParking_ifMatchType || 'str';
        this.ListPeer_top = config.ListPeer_top;
        this.ListPeer_topType = config.ListPeer_topType || 'str';
        this.ListPeer_skip = config.ListPeer_skip;
        this.ListPeer_skipType = config.ListPeer_skipType || 'str';
        this.ListPeer_search = config.ListPeer_search;
        this.ListPeer_searchType = config.ListPeer_searchType || 'str';
        this.ListPeer_filter = config.ListPeer_filter;
        this.ListPeer_filterType = config.ListPeer_filterType || 'str';
        this.ListPeer_count = config.ListPeer_count;
        this.ListPeer_countType = config.ListPeer_countType || 'str';
        this.ListPeer_orderby = config.ListPeer_orderby;
        this.ListPeer_orderbyType = config.ListPeer_orderbyType || 'str';
        this.ListPeer_select = config.ListPeer_select;
        this.ListPeer_selectType = config.ListPeer_selectType || 'str';
        this.ListPeer_expand = config.ListPeer_expand;
        this.ListPeer_expandType = config.ListPeer_expandType || 'str';
        this.GetPeerByNumber_number = config.GetPeerByNumber_number;
        this.GetPeerByNumber_numberType = config.GetPeerByNumber_numberType || 'str';
        this.GetReportPeers_top = config.GetReportPeers_top;
        this.GetReportPeers_topType = config.GetReportPeers_topType || 'str';
        this.GetReportPeers_skip = config.GetReportPeers_skip;
        this.GetReportPeers_skipType = config.GetReportPeers_skipType || 'str';
        this.GetReportPeers_search = config.GetReportPeers_search;
        this.GetReportPeers_searchType = config.GetReportPeers_searchType || 'str';
        this.GetReportPeers_filter = config.GetReportPeers_filter;
        this.GetReportPeers_filterType = config.GetReportPeers_filterType || 'str';
        this.GetReportPeers_count = config.GetReportPeers_count;
        this.GetReportPeers_countType = config.GetReportPeers_countType || 'str';
        this.GetReportPeers_select = config.GetReportPeers_select;
        this.GetReportPeers_selectType = config.GetReportPeers_selectType || 'str';
        this.GetReportPeers_orderby = config.GetReportPeers_orderby;
        this.GetReportPeers_orderbyType = config.GetReportPeers_orderbyType || 'str';
        this.GetReportPeers_expand = config.GetReportPeers_expand;
        this.GetReportPeers_expandType = config.GetReportPeers_expandType || 'str';
        this.GetPhoneBookSettings_select = config.GetPhoneBookSettings_select;
        this.GetPhoneBookSettings_selectType = config.GetPhoneBookSettings_selectType || 'str';
        this.GetPhoneBookSettings_expand = config.GetPhoneBookSettings_expand;
        this.GetPhoneBookSettings_expandType = config.GetPhoneBookSettings_expandType || 'str';
        this.UpdatePhoneBookSettings_body = config.UpdatePhoneBookSettings_body;
        this.UpdatePhoneBookSettings_bodyType = config.UpdatePhoneBookSettings_bodyType || 'str';
        this.ListPhoneLogo_top = config.ListPhoneLogo_top;
        this.ListPhoneLogo_topType = config.ListPhoneLogo_topType || 'str';
        this.ListPhoneLogo_skip = config.ListPhoneLogo_skip;
        this.ListPhoneLogo_skipType = config.ListPhoneLogo_skipType || 'str';
        this.ListPhoneLogo_search = config.ListPhoneLogo_search;
        this.ListPhoneLogo_searchType = config.ListPhoneLogo_searchType || 'str';
        this.ListPhoneLogo_filter = config.ListPhoneLogo_filter;
        this.ListPhoneLogo_filterType = config.ListPhoneLogo_filterType || 'str';
        this.ListPhoneLogo_count = config.ListPhoneLogo_count;
        this.ListPhoneLogo_countType = config.ListPhoneLogo_countType || 'str';
        this.ListPhoneLogo_orderby = config.ListPhoneLogo_orderby;
        this.ListPhoneLogo_orderbyType = config.ListPhoneLogo_orderbyType || 'str';
        this.ListPhoneLogo_select = config.ListPhoneLogo_select;
        this.ListPhoneLogo_selectType = config.ListPhoneLogo_selectType || 'str';
        this.ListPhoneLogo_expand = config.ListPhoneLogo_expand;
        this.ListPhoneLogo_expandType = config.ListPhoneLogo_expandType || 'str';
        this.DeletePhoneLogo_filename = config.DeletePhoneLogo_filename;
        this.DeletePhoneLogo_filenameType = config.DeletePhoneLogo_filenameType || 'str';
        this.DeletePhoneLogo_ifMatch = config.DeletePhoneLogo_ifMatch;
        this.DeletePhoneLogo_ifMatchType = config.DeletePhoneLogo_ifMatchType || 'str';
        this.GetPhonesSettings_select = config.GetPhonesSettings_select;
        this.GetPhonesSettings_selectType = config.GetPhonesSettings_selectType || 'str';
        this.GetPhonesSettings_expand = config.GetPhonesSettings_expand;
        this.GetPhonesSettings_expandType = config.GetPhonesSettings_expandType || 'str';
        this.UpdatePhonesSettings_body = config.UpdatePhonesSettings_body;
        this.UpdatePhonesSettings_bodyType = config.UpdatePhonesSettings_bodyType || 'str';
        this.ListPhoneTemplate_top = config.ListPhoneTemplate_top;
        this.ListPhoneTemplate_topType = config.ListPhoneTemplate_topType || 'str';
        this.ListPhoneTemplate_skip = config.ListPhoneTemplate_skip;
        this.ListPhoneTemplate_skipType = config.ListPhoneTemplate_skipType || 'str';
        this.ListPhoneTemplate_search = config.ListPhoneTemplate_search;
        this.ListPhoneTemplate_searchType = config.ListPhoneTemplate_searchType || 'str';
        this.ListPhoneTemplate_filter = config.ListPhoneTemplate_filter;
        this.ListPhoneTemplate_filterType = config.ListPhoneTemplate_filterType || 'str';
        this.ListPhoneTemplate_count = config.ListPhoneTemplate_count;
        this.ListPhoneTemplate_countType = config.ListPhoneTemplate_countType || 'str';
        this.ListPhoneTemplate_orderby = config.ListPhoneTemplate_orderby;
        this.ListPhoneTemplate_orderbyType = config.ListPhoneTemplate_orderbyType || 'str';
        this.ListPhoneTemplate_select = config.ListPhoneTemplate_select;
        this.ListPhoneTemplate_selectType = config.ListPhoneTemplate_selectType || 'str';
        this.ListPhoneTemplate_expand = config.ListPhoneTemplate_expand;
        this.ListPhoneTemplate_expandType = config.ListPhoneTemplate_expandType || 'str';
        this.CreatePhoneTemplate_body = config.CreatePhoneTemplate_body;
        this.CreatePhoneTemplate_bodyType = config.CreatePhoneTemplate_bodyType || 'str';
        this.GetPhoneTemplate_id = config.GetPhoneTemplate_id;
        this.GetPhoneTemplate_idType = config.GetPhoneTemplate_idType || 'str';
        this.GetPhoneTemplate_select = config.GetPhoneTemplate_select;
        this.GetPhoneTemplate_selectType = config.GetPhoneTemplate_selectType || 'str';
        this.GetPhoneTemplate_expand = config.GetPhoneTemplate_expand;
        this.GetPhoneTemplate_expandType = config.GetPhoneTemplate_expandType || 'str';
        this.UpdatePhoneTemplate_id = config.UpdatePhoneTemplate_id;
        this.UpdatePhoneTemplate_idType = config.UpdatePhoneTemplate_idType || 'str';
        this.UpdatePhoneTemplate_body = config.UpdatePhoneTemplate_body;
        this.UpdatePhoneTemplate_bodyType = config.UpdatePhoneTemplate_bodyType || 'str';
        this.DeletePhoneTemplate_id = config.DeletePhoneTemplate_id;
        this.DeletePhoneTemplate_idType = config.DeletePhoneTemplate_idType || 'str';
        this.DeletePhoneTemplate_ifMatch = config.DeletePhoneTemplate_ifMatch;
        this.DeletePhoneTemplate_ifMatchType = config.DeletePhoneTemplate_ifMatchType || 'str';
        this.ListPlaylist_top = config.ListPlaylist_top;
        this.ListPlaylist_topType = config.ListPlaylist_topType || 'str';
        this.ListPlaylist_skip = config.ListPlaylist_skip;
        this.ListPlaylist_skipType = config.ListPlaylist_skipType || 'str';
        this.ListPlaylist_search = config.ListPlaylist_search;
        this.ListPlaylist_searchType = config.ListPlaylist_searchType || 'str';
        this.ListPlaylist_filter = config.ListPlaylist_filter;
        this.ListPlaylist_filterType = config.ListPlaylist_filterType || 'str';
        this.ListPlaylist_count = config.ListPlaylist_count;
        this.ListPlaylist_countType = config.ListPlaylist_countType || 'str';
        this.ListPlaylist_orderby = config.ListPlaylist_orderby;
        this.ListPlaylist_orderbyType = config.ListPlaylist_orderbyType || 'str';
        this.ListPlaylist_select = config.ListPlaylist_select;
        this.ListPlaylist_selectType = config.ListPlaylist_selectType || 'str';
        this.ListPlaylist_expand = config.ListPlaylist_expand;
        this.ListPlaylist_expandType = config.ListPlaylist_expandType || 'str';
        this.CreatePlaylist_body = config.CreatePlaylist_body;
        this.CreatePlaylist_bodyType = config.CreatePlaylist_bodyType || 'str';
        this.GetPlaylist_name = config.GetPlaylist_name;
        this.GetPlaylist_nameType = config.GetPlaylist_nameType || 'str';
        this.GetPlaylist_select = config.GetPlaylist_select;
        this.GetPlaylist_selectType = config.GetPlaylist_selectType || 'str';
        this.GetPlaylist_expand = config.GetPlaylist_expand;
        this.GetPlaylist_expandType = config.GetPlaylist_expandType || 'str';
        this.UpdatePlaylist_name = config.UpdatePlaylist_name;
        this.UpdatePlaylist_nameType = config.UpdatePlaylist_nameType || 'str';
        this.UpdatePlaylist_body = config.UpdatePlaylist_body;
        this.UpdatePlaylist_bodyType = config.UpdatePlaylist_bodyType || 'str';
        this.DeletePlaylist_name = config.DeletePlaylist_name;
        this.DeletePlaylist_nameType = config.DeletePlaylist_nameType || 'str';
        this.DeletePlaylist_ifMatch = config.DeletePlaylist_ifMatch;
        this.DeletePlaylist_ifMatchType = config.DeletePlaylist_ifMatchType || 'str';
        this.DeletePlaylistFile_body = config.DeletePlaylistFile_body;
        this.DeletePlaylistFile_bodyType = config.DeletePlaylistFile_bodyType || 'str';
        this.DownloadPlaylistFile_playlistKey = config.DownloadPlaylistFile_playlistKey;
        this.DownloadPlaylistFile_playlistKeyType = config.DownloadPlaylistFile_playlistKeyType || 'str';
        this.DownloadPlaylistFile_fileName = config.DownloadPlaylistFile_fileName;
        this.DownloadPlaylistFile_fileNameType = config.DownloadPlaylistFile_fileNameType || 'str';
        this.ListPromptSet_top = config.ListPromptSet_top;
        this.ListPromptSet_topType = config.ListPromptSet_topType || 'str';
        this.ListPromptSet_skip = config.ListPromptSet_skip;
        this.ListPromptSet_skipType = config.ListPromptSet_skipType || 'str';
        this.ListPromptSet_search = config.ListPromptSet_search;
        this.ListPromptSet_searchType = config.ListPromptSet_searchType || 'str';
        this.ListPromptSet_filter = config.ListPromptSet_filter;
        this.ListPromptSet_filterType = config.ListPromptSet_filterType || 'str';
        this.ListPromptSet_count = config.ListPromptSet_count;
        this.ListPromptSet_countType = config.ListPromptSet_countType || 'str';
        this.ListPromptSet_orderby = config.ListPromptSet_orderby;
        this.ListPromptSet_orderbyType = config.ListPromptSet_orderbyType || 'str';
        this.ListPromptSet_select = config.ListPromptSet_select;
        this.ListPromptSet_selectType = config.ListPromptSet_selectType || 'str';
        this.ListPromptSet_expand = config.ListPromptSet_expand;
        this.ListPromptSet_expandType = config.ListPromptSet_expandType || 'str';
        this.GetPromptSet_id = config.GetPromptSet_id;
        this.GetPromptSet_idType = config.GetPromptSet_idType || 'str';
        this.GetPromptSet_select = config.GetPromptSet_select;
        this.GetPromptSet_selectType = config.GetPromptSet_selectType || 'str';
        this.GetPromptSet_expand = config.GetPromptSet_expand;
        this.GetPromptSet_expandType = config.GetPromptSet_expandType || 'str';
        this.UpdatePromptSet_id = config.UpdatePromptSet_id;
        this.UpdatePromptSet_idType = config.UpdatePromptSet_idType || 'str';
        this.UpdatePromptSet_body = config.UpdatePromptSet_body;
        this.UpdatePromptSet_bodyType = config.UpdatePromptSet_bodyType || 'str';
        this.DeletePromptSet_id = config.DeletePromptSet_id;
        this.DeletePromptSet_idType = config.DeletePromptSet_idType || 'str';
        this.DeletePromptSet_ifMatch = config.DeletePromptSet_ifMatch;
        this.DeletePromptSet_ifMatchType = config.DeletePromptSet_ifMatchType || 'str';
        this.ListPrompts_id = config.ListPrompts_id;
        this.ListPrompts_idType = config.ListPrompts_idType || 'str';
        this.ListPrompts_top = config.ListPrompts_top;
        this.ListPrompts_topType = config.ListPrompts_topType || 'str';
        this.ListPrompts_skip = config.ListPrompts_skip;
        this.ListPrompts_skipType = config.ListPrompts_skipType || 'str';
        this.ListPrompts_search = config.ListPrompts_search;
        this.ListPrompts_searchType = config.ListPrompts_searchType || 'str';
        this.ListPrompts_filter = config.ListPrompts_filter;
        this.ListPrompts_filterType = config.ListPrompts_filterType || 'str';
        this.ListPrompts_count = config.ListPrompts_count;
        this.ListPrompts_countType = config.ListPrompts_countType || 'str';
        this.ListPrompts_orderby = config.ListPrompts_orderby;
        this.ListPrompts_orderbyType = config.ListPrompts_orderbyType || 'str';
        this.ListPrompts_select = config.ListPrompts_select;
        this.ListPrompts_selectType = config.ListPrompts_selectType || 'str';
        this.ListPrompts_expand = config.ListPrompts_expand;
        this.ListPrompts_expandType = config.ListPrompts_expandType || 'str';
        this.SetActive_id = config.SetActive_id;
        this.SetActive_idType = config.SetActive_idType || 'str';
        this.SetAlternatePronunciation_id = config.SetAlternatePronunciation_id;
        this.SetAlternatePronunciation_idType = config.SetAlternatePronunciation_idType || 'str';
        this.SetAlternatePronunciation_body = config.SetAlternatePronunciation_body;
        this.SetAlternatePronunciation_bodyType = config.SetAlternatePronunciation_bodyType || 'str';
        this.Copy_id = config.Copy_id;
        this.Copy_idType = config.Copy_idType || 'str';
        this.Copy_body = config.Copy_body;
        this.Copy_bodyType = config.Copy_bodyType || 'str';
        this.PlayPrompt_id = config.PlayPrompt_id;
        this.PlayPrompt_idType = config.PlayPrompt_idType || 'str';
        this.PlayPrompt_body = config.PlayPrompt_body;
        this.PlayPrompt_bodyType = config.PlayPrompt_bodyType || 'str';
        this.RecordPrompt_id = config.RecordPrompt_id;
        this.RecordPrompt_idType = config.RecordPrompt_idType || 'str';
        this.RecordPrompt_body = config.RecordPrompt_body;
        this.RecordPrompt_bodyType = config.RecordPrompt_bodyType || 'str';
        this.PurgeCalls_body = config.PurgeCalls_body;
        this.PurgeCalls_bodyType = config.PurgeCalls_bodyType || 'str';
        this.PurgeChats_body = config.PurgeChats_body;
        this.PurgeChats_bodyType = config.PurgeChats_bodyType || 'str';
        this.ListAgents_id = config.ListAgents_id;
        this.ListAgents_idType = config.ListAgents_idType || 'str';
        this.ListAgents_top = config.ListAgents_top;
        this.ListAgents_topType = config.ListAgents_topType || 'str';
        this.ListAgents_skip = config.ListAgents_skip;
        this.ListAgents_skipType = config.ListAgents_skipType || 'str';
        this.ListAgents_search = config.ListAgents_search;
        this.ListAgents_searchType = config.ListAgents_searchType || 'str';
        this.ListAgents_filter = config.ListAgents_filter;
        this.ListAgents_filterType = config.ListAgents_filterType || 'str';
        this.ListAgents_count = config.ListAgents_count;
        this.ListAgents_countType = config.ListAgents_countType || 'str';
        this.ListAgents_orderby = config.ListAgents_orderby;
        this.ListAgents_orderbyType = config.ListAgents_orderbyType || 'str';
        this.ListAgents_select = config.ListAgents_select;
        this.ListAgents_selectType = config.ListAgents_selectType || 'str';
        this.ListAgents_expand = config.ListAgents_expand;
        this.ListAgents_expandType = config.ListAgents_expandType || 'str';
        this.ListManagers_id = config.ListManagers_id;
        this.ListManagers_idType = config.ListManagers_idType || 'str';
        this.ListManagers_top = config.ListManagers_top;
        this.ListManagers_topType = config.ListManagers_topType || 'str';
        this.ListManagers_skip = config.ListManagers_skip;
        this.ListManagers_skipType = config.ListManagers_skipType || 'str';
        this.ListManagers_search = config.ListManagers_search;
        this.ListManagers_searchType = config.ListManagers_searchType || 'str';
        this.ListManagers_filter = config.ListManagers_filter;
        this.ListManagers_filterType = config.ListManagers_filterType || 'str';
        this.ListManagers_count = config.ListManagers_count;
        this.ListManagers_countType = config.ListManagers_countType || 'str';
        this.ListManagers_orderby = config.ListManagers_orderby;
        this.ListManagers_orderbyType = config.ListManagers_orderbyType || 'str';
        this.ListManagers_select = config.ListManagers_select;
        this.ListManagers_selectType = config.ListManagers_selectType || 'str';
        this.ListManagers_expand = config.ListManagers_expand;
        this.ListManagers_expandType = config.ListManagers_expandType || 'str';
        this.ResetQueueStatistics_id = config.ResetQueueStatistics_id;
        this.ResetQueueStatistics_idType = config.ResetQueueStatistics_idType || 'str';
        this.GetQueueByNumber_number = config.GetQueueByNumber_number;
        this.GetQueueByNumber_numberType = config.GetQueueByNumber_numberType || 'str';
        this.ListQueue_top = config.ListQueue_top;
        this.ListQueue_topType = config.ListQueue_topType || 'str';
        this.ListQueue_skip = config.ListQueue_skip;
        this.ListQueue_skipType = config.ListQueue_skipType || 'str';
        this.ListQueue_search = config.ListQueue_search;
        this.ListQueue_searchType = config.ListQueue_searchType || 'str';
        this.ListQueue_filter = config.ListQueue_filter;
        this.ListQueue_filterType = config.ListQueue_filterType || 'str';
        this.ListQueue_count = config.ListQueue_count;
        this.ListQueue_countType = config.ListQueue_countType || 'str';
        this.ListQueue_orderby = config.ListQueue_orderby;
        this.ListQueue_orderbyType = config.ListQueue_orderbyType || 'str';
        this.ListQueue_select = config.ListQueue_select;
        this.ListQueue_selectType = config.ListQueue_selectType || 'str';
        this.ListQueue_expand = config.ListQueue_expand;
        this.ListQueue_expandType = config.ListQueue_expandType || 'str';
        this.CreateQueue_body = config.CreateQueue_body;
        this.CreateQueue_bodyType = config.CreateQueue_bodyType || 'str';
        this.GetQueue_id = config.GetQueue_id;
        this.GetQueue_idType = config.GetQueue_idType || 'str';
        this.GetQueue_select = config.GetQueue_select;
        this.GetQueue_selectType = config.GetQueue_selectType || 'str';
        this.GetQueue_expand = config.GetQueue_expand;
        this.GetQueue_expandType = config.GetQueue_expandType || 'str';
        this.UpdateQueue_id = config.UpdateQueue_id;
        this.UpdateQueue_idType = config.UpdateQueue_idType || 'str';
        this.UpdateQueue_body = config.UpdateQueue_body;
        this.UpdateQueue_bodyType = config.UpdateQueue_bodyType || 'str';
        this.DeleteQueue_id = config.DeleteQueue_id;
        this.DeleteQueue_idType = config.DeleteQueue_idType || 'str';
        this.DeleteQueue_ifMatch = config.DeleteQueue_ifMatch;
        this.DeleteQueue_ifMatchType = config.DeleteQueue_ifMatchType || 'str';
        this.ListForwards_id = config.ListForwards_id;
        this.ListForwards_idType = config.ListForwards_idType || 'str';
        this.ListForwards_top = config.ListForwards_top;
        this.ListForwards_topType = config.ListForwards_topType || 'str';
        this.ListForwards_skip = config.ListForwards_skip;
        this.ListForwards_skipType = config.ListForwards_skipType || 'str';
        this.ListForwards_search = config.ListForwards_search;
        this.ListForwards_searchType = config.ListForwards_searchType || 'str';
        this.ListForwards_filter = config.ListForwards_filter;
        this.ListForwards_filterType = config.ListForwards_filterType || 'str';
        this.ListForwards_count = config.ListForwards_count;
        this.ListForwards_countType = config.ListForwards_countType || 'str';
        this.ListForwards_orderby = config.ListForwards_orderby;
        this.ListForwards_orderbyType = config.ListForwards_orderbyType || 'str';
        this.ListForwards_select = config.ListForwards_select;
        this.ListForwards_selectType = config.ListForwards_selectType || 'str';
        this.ListForwards_expand = config.ListForwards_expand;
        this.ListForwards_expandType = config.ListForwards_expandType || 'str';
        this.GetReceptionistByNumber_number = config.GetReceptionistByNumber_number;
        this.GetReceptionistByNumber_numberType = config.GetReceptionistByNumber_numberType || 'str';
        this.ListReceptionist_top = config.ListReceptionist_top;
        this.ListReceptionist_topType = config.ListReceptionist_topType || 'str';
        this.ListReceptionist_skip = config.ListReceptionist_skip;
        this.ListReceptionist_skipType = config.ListReceptionist_skipType || 'str';
        this.ListReceptionist_search = config.ListReceptionist_search;
        this.ListReceptionist_searchType = config.ListReceptionist_searchType || 'str';
        this.ListReceptionist_filter = config.ListReceptionist_filter;
        this.ListReceptionist_filterType = config.ListReceptionist_filterType || 'str';
        this.ListReceptionist_count = config.ListReceptionist_count;
        this.ListReceptionist_countType = config.ListReceptionist_countType || 'str';
        this.ListReceptionist_orderby = config.ListReceptionist_orderby;
        this.ListReceptionist_orderbyType = config.ListReceptionist_orderbyType || 'str';
        this.ListReceptionist_select = config.ListReceptionist_select;
        this.ListReceptionist_selectType = config.ListReceptionist_selectType || 'str';
        this.ListReceptionist_expand = config.ListReceptionist_expand;
        this.ListReceptionist_expandType = config.ListReceptionist_expandType || 'str';
        this.CreateReceptionist_body = config.CreateReceptionist_body;
        this.CreateReceptionist_bodyType = config.CreateReceptionist_bodyType || 'str';
        this.GetReceptionist_id = config.GetReceptionist_id;
        this.GetReceptionist_idType = config.GetReceptionist_idType || 'str';
        this.GetReceptionist_select = config.GetReceptionist_select;
        this.GetReceptionist_selectType = config.GetReceptionist_selectType || 'str';
        this.GetReceptionist_expand = config.GetReceptionist_expand;
        this.GetReceptionist_expandType = config.GetReceptionist_expandType || 'str';
        this.UpdateReceptionist_id = config.UpdateReceptionist_id;
        this.UpdateReceptionist_idType = config.UpdateReceptionist_idType || 'str';
        this.UpdateReceptionist_body = config.UpdateReceptionist_body;
        this.UpdateReceptionist_bodyType = config.UpdateReceptionist_bodyType || 'str';
        this.DeleteReceptionist_id = config.DeleteReceptionist_id;
        this.DeleteReceptionist_idType = config.DeleteReceptionist_idType || 'str';
        this.DeleteReceptionist_ifMatch = config.DeleteReceptionist_ifMatch;
        this.DeleteReceptionist_ifMatchType = config.DeleteReceptionist_ifMatchType || 'str';
        this.ListRecording_top = config.ListRecording_top;
        this.ListRecording_topType = config.ListRecording_topType || 'str';
        this.ListRecording_skip = config.ListRecording_skip;
        this.ListRecording_skipType = config.ListRecording_skipType || 'str';
        this.ListRecording_search = config.ListRecording_search;
        this.ListRecording_searchType = config.ListRecording_searchType || 'str';
        this.ListRecording_filter = config.ListRecording_filter;
        this.ListRecording_filterType = config.ListRecording_filterType || 'str';
        this.ListRecording_count = config.ListRecording_count;
        this.ListRecording_countType = config.ListRecording_countType || 'str';
        this.ListRecording_orderby = config.ListRecording_orderby;
        this.ListRecording_orderbyType = config.ListRecording_orderbyType || 'str';
        this.ListRecording_select = config.ListRecording_select;
        this.ListRecording_selectType = config.ListRecording_selectType || 'str';
        this.ListRecording_expand = config.ListRecording_expand;
        this.ListRecording_expandType = config.ListRecording_expandType || 'str';
        this.DownloadRecording_recId = config.DownloadRecording_recId;
        this.DownloadRecording_recIdType = config.DownloadRecording_recIdType || 'str';
        this.SetRecordingRepositorySettings_body = config.SetRecordingRepositorySettings_body;
        this.SetRecordingRepositorySettings_bodyType = config.SetRecordingRepositorySettings_bodyType || 'str';
        this.SetRecordingSettings_body = config.SetRecordingSettings_body;
        this.SetRecordingSettings_bodyType = config.SetRecordingSettings_bodyType || 'str';
        this.BulkRecordingsDelete_body = config.BulkRecordingsDelete_body;
        this.BulkRecordingsDelete_bodyType = config.BulkRecordingsDelete_bodyType || 'str';
        this.BulkRecordingsArchive_body = config.BulkRecordingsArchive_body;
        this.BulkRecordingsArchive_bodyType = config.BulkRecordingsArchive_bodyType || 'str';
        this.GetAbandonedChatsStatisticsData_queueDnStr = config.GetAbandonedChatsStatisticsData_queueDnStr;
        this.GetAbandonedChatsStatisticsData_queueDnStrType = config.GetAbandonedChatsStatisticsData_queueDnStrType || 'str';
        this.GetAbandonedChatsStatisticsData_startDt = config.GetAbandonedChatsStatisticsData_startDt;
        this.GetAbandonedChatsStatisticsData_startDtType = config.GetAbandonedChatsStatisticsData_startDtType || 'str';
        this.GetAbandonedChatsStatisticsData_endDt = config.GetAbandonedChatsStatisticsData_endDt;
        this.GetAbandonedChatsStatisticsData_endDtType = config.GetAbandonedChatsStatisticsData_endDtType || 'str';
        this.GetAbandonedChatsStatisticsData_participantType = config.GetAbandonedChatsStatisticsData_participantType;
        this.GetAbandonedChatsStatisticsData_participantTypeType = config.GetAbandonedChatsStatisticsData_participantTypeType || 'str';
        this.GetAbandonedChatsStatisticsData_top = config.GetAbandonedChatsStatisticsData_top;
        this.GetAbandonedChatsStatisticsData_topType = config.GetAbandonedChatsStatisticsData_topType || 'str';
        this.GetAbandonedChatsStatisticsData_skip = config.GetAbandonedChatsStatisticsData_skip;
        this.GetAbandonedChatsStatisticsData_skipType = config.GetAbandonedChatsStatisticsData_skipType || 'str';
        this.GetAbandonedChatsStatisticsData_search = config.GetAbandonedChatsStatisticsData_search;
        this.GetAbandonedChatsStatisticsData_searchType = config.GetAbandonedChatsStatisticsData_searchType || 'str';
        this.GetAbandonedChatsStatisticsData_filter = config.GetAbandonedChatsStatisticsData_filter;
        this.GetAbandonedChatsStatisticsData_filterType = config.GetAbandonedChatsStatisticsData_filterType || 'str';
        this.GetAbandonedChatsStatisticsData_count = config.GetAbandonedChatsStatisticsData_count;
        this.GetAbandonedChatsStatisticsData_countType = config.GetAbandonedChatsStatisticsData_countType || 'str';
        this.GetAbandonedChatsStatisticsData_select = config.GetAbandonedChatsStatisticsData_select;
        this.GetAbandonedChatsStatisticsData_selectType = config.GetAbandonedChatsStatisticsData_selectType || 'str';
        this.GetAbandonedChatsStatisticsData_orderby = config.GetAbandonedChatsStatisticsData_orderby;
        this.GetAbandonedChatsStatisticsData_orderbyType = config.GetAbandonedChatsStatisticsData_orderbyType || 'str';
        this.GetAbandonedChatsStatisticsData_expand = config.GetAbandonedChatsStatisticsData_expand;
        this.GetAbandonedChatsStatisticsData_expandType = config.GetAbandonedChatsStatisticsData_expandType || 'str';
        this.DownloadAbandonedChatsStatistics_queueDnStr = config.DownloadAbandonedChatsStatistics_queueDnStr;
        this.DownloadAbandonedChatsStatistics_queueDnStrType = config.DownloadAbandonedChatsStatistics_queueDnStrType || 'str';
        this.DownloadAbandonedChatsStatistics_startDt = config.DownloadAbandonedChatsStatistics_startDt;
        this.DownloadAbandonedChatsStatistics_startDtType = config.DownloadAbandonedChatsStatistics_startDtType || 'str';
        this.DownloadAbandonedChatsStatistics_endDt = config.DownloadAbandonedChatsStatistics_endDt;
        this.DownloadAbandonedChatsStatistics_endDtType = config.DownloadAbandonedChatsStatistics_endDtType || 'str';
        this.DownloadAbandonedChatsStatistics_participantType = config.DownloadAbandonedChatsStatistics_participantType;
        this.DownloadAbandonedChatsStatistics_participantTypeType = config.DownloadAbandonedChatsStatistics_participantTypeType || 'str';
        this.DownloadAbandonedChatsStatistics_clientTimeZone = config.DownloadAbandonedChatsStatistics_clientTimeZone;
        this.DownloadAbandonedChatsStatistics_clientTimeZoneType = config.DownloadAbandonedChatsStatistics_clientTimeZoneType || 'str';
        this.DownloadAbandonedChatsStatistics_top = config.DownloadAbandonedChatsStatistics_top;
        this.DownloadAbandonedChatsStatistics_topType = config.DownloadAbandonedChatsStatistics_topType || 'str';
        this.DownloadAbandonedChatsStatistics_skip = config.DownloadAbandonedChatsStatistics_skip;
        this.DownloadAbandonedChatsStatistics_skipType = config.DownloadAbandonedChatsStatistics_skipType || 'str';
        this.DownloadAbandonedChatsStatistics_search = config.DownloadAbandonedChatsStatistics_search;
        this.DownloadAbandonedChatsStatistics_searchType = config.DownloadAbandonedChatsStatistics_searchType || 'str';
        this.DownloadAbandonedChatsStatistics_filter = config.DownloadAbandonedChatsStatistics_filter;
        this.DownloadAbandonedChatsStatistics_filterType = config.DownloadAbandonedChatsStatistics_filterType || 'str';
        this.DownloadAbandonedChatsStatistics_count = config.DownloadAbandonedChatsStatistics_count;
        this.DownloadAbandonedChatsStatistics_countType = config.DownloadAbandonedChatsStatistics_countType || 'str';
        this.DownloadAbandonedChatsStatistics_select = config.DownloadAbandonedChatsStatistics_select;
        this.DownloadAbandonedChatsStatistics_selectType = config.DownloadAbandonedChatsStatistics_selectType || 'str';
        this.DownloadAbandonedChatsStatistics_orderby = config.DownloadAbandonedChatsStatistics_orderby;
        this.DownloadAbandonedChatsStatistics_orderbyType = config.DownloadAbandonedChatsStatistics_orderbyType || 'str';
        this.DownloadAbandonedChatsStatistics_expand = config.DownloadAbandonedChatsStatistics_expand;
        this.DownloadAbandonedChatsStatistics_expandType = config.DownloadAbandonedChatsStatistics_expandType || 'str';
        this.GetAbandonedQueueCallsData_periodFrom = config.GetAbandonedQueueCallsData_periodFrom;
        this.GetAbandonedQueueCallsData_periodFromType = config.GetAbandonedQueueCallsData_periodFromType || 'str';
        this.GetAbandonedQueueCallsData_periodTo = config.GetAbandonedQueueCallsData_periodTo;
        this.GetAbandonedQueueCallsData_periodToType = config.GetAbandonedQueueCallsData_periodToType || 'str';
        this.GetAbandonedQueueCallsData_queueDns = config.GetAbandonedQueueCallsData_queueDns;
        this.GetAbandonedQueueCallsData_queueDnsType = config.GetAbandonedQueueCallsData_queueDnsType || 'str';
        this.GetAbandonedQueueCallsData_waitInterval = config.GetAbandonedQueueCallsData_waitInterval;
        this.GetAbandonedQueueCallsData_waitIntervalType = config.GetAbandonedQueueCallsData_waitIntervalType || 'str';
        this.GetAbandonedQueueCallsData_top = config.GetAbandonedQueueCallsData_top;
        this.GetAbandonedQueueCallsData_topType = config.GetAbandonedQueueCallsData_topType || 'str';
        this.GetAbandonedQueueCallsData_skip = config.GetAbandonedQueueCallsData_skip;
        this.GetAbandonedQueueCallsData_skipType = config.GetAbandonedQueueCallsData_skipType || 'str';
        this.GetAbandonedQueueCallsData_search = config.GetAbandonedQueueCallsData_search;
        this.GetAbandonedQueueCallsData_searchType = config.GetAbandonedQueueCallsData_searchType || 'str';
        this.GetAbandonedQueueCallsData_filter = config.GetAbandonedQueueCallsData_filter;
        this.GetAbandonedQueueCallsData_filterType = config.GetAbandonedQueueCallsData_filterType || 'str';
        this.GetAbandonedQueueCallsData_count = config.GetAbandonedQueueCallsData_count;
        this.GetAbandonedQueueCallsData_countType = config.GetAbandonedQueueCallsData_countType || 'str';
        this.GetAbandonedQueueCallsData_select = config.GetAbandonedQueueCallsData_select;
        this.GetAbandonedQueueCallsData_selectType = config.GetAbandonedQueueCallsData_selectType || 'str';
        this.GetAbandonedQueueCallsData_orderby = config.GetAbandonedQueueCallsData_orderby;
        this.GetAbandonedQueueCallsData_orderbyType = config.GetAbandonedQueueCallsData_orderbyType || 'str';
        this.GetAbandonedQueueCallsData_expand = config.GetAbandonedQueueCallsData_expand;
        this.GetAbandonedQueueCallsData_expandType = config.GetAbandonedQueueCallsData_expandType || 'str';
        this.DownloadAbandonedQueueCalls_periodFrom = config.DownloadAbandonedQueueCalls_periodFrom;
        this.DownloadAbandonedQueueCalls_periodFromType = config.DownloadAbandonedQueueCalls_periodFromType || 'str';
        this.DownloadAbandonedQueueCalls_periodTo = config.DownloadAbandonedQueueCalls_periodTo;
        this.DownloadAbandonedQueueCalls_periodToType = config.DownloadAbandonedQueueCalls_periodToType || 'str';
        this.DownloadAbandonedQueueCalls_queueDns = config.DownloadAbandonedQueueCalls_queueDns;
        this.DownloadAbandonedQueueCalls_queueDnsType = config.DownloadAbandonedQueueCalls_queueDnsType || 'str';
        this.DownloadAbandonedQueueCalls_waitInterval = config.DownloadAbandonedQueueCalls_waitInterval;
        this.DownloadAbandonedQueueCalls_waitIntervalType = config.DownloadAbandonedQueueCalls_waitIntervalType || 'str';
        this.DownloadAbandonedQueueCalls_clientTimeZone = config.DownloadAbandonedQueueCalls_clientTimeZone;
        this.DownloadAbandonedQueueCalls_clientTimeZoneType = config.DownloadAbandonedQueueCalls_clientTimeZoneType || 'str';
        this.DownloadAbandonedQueueCalls_top = config.DownloadAbandonedQueueCalls_top;
        this.DownloadAbandonedQueueCalls_topType = config.DownloadAbandonedQueueCalls_topType || 'str';
        this.DownloadAbandonedQueueCalls_skip = config.DownloadAbandonedQueueCalls_skip;
        this.DownloadAbandonedQueueCalls_skipType = config.DownloadAbandonedQueueCalls_skipType || 'str';
        this.DownloadAbandonedQueueCalls_search = config.DownloadAbandonedQueueCalls_search;
        this.DownloadAbandonedQueueCalls_searchType = config.DownloadAbandonedQueueCalls_searchType || 'str';
        this.DownloadAbandonedQueueCalls_filter = config.DownloadAbandonedQueueCalls_filter;
        this.DownloadAbandonedQueueCalls_filterType = config.DownloadAbandonedQueueCalls_filterType || 'str';
        this.DownloadAbandonedQueueCalls_count = config.DownloadAbandonedQueueCalls_count;
        this.DownloadAbandonedQueueCalls_countType = config.DownloadAbandonedQueueCalls_countType || 'str';
        this.DownloadAbandonedQueueCalls_select = config.DownloadAbandonedQueueCalls_select;
        this.DownloadAbandonedQueueCalls_selectType = config.DownloadAbandonedQueueCalls_selectType || 'str';
        this.DownloadAbandonedQueueCalls_orderby = config.DownloadAbandonedQueueCalls_orderby;
        this.DownloadAbandonedQueueCalls_orderbyType = config.DownloadAbandonedQueueCalls_orderbyType || 'str';
        this.DownloadAbandonedQueueCalls_expand = config.DownloadAbandonedQueueCalls_expand;
        this.DownloadAbandonedQueueCalls_expandType = config.DownloadAbandonedQueueCalls_expandType || 'str';
        this.GetAgentLoginHistoryData_clientTimeZone = config.GetAgentLoginHistoryData_clientTimeZone;
        this.GetAgentLoginHistoryData_clientTimeZoneType = config.GetAgentLoginHistoryData_clientTimeZoneType || 'str';
        this.GetAgentLoginHistoryData_startDt = config.GetAgentLoginHistoryData_startDt;
        this.GetAgentLoginHistoryData_startDtType = config.GetAgentLoginHistoryData_startDtType || 'str';
        this.GetAgentLoginHistoryData_endDt = config.GetAgentLoginHistoryData_endDt;
        this.GetAgentLoginHistoryData_endDtType = config.GetAgentLoginHistoryData_endDtType || 'str';
        this.GetAgentLoginHistoryData_queueDnStr = config.GetAgentLoginHistoryData_queueDnStr;
        this.GetAgentLoginHistoryData_queueDnStrType = config.GetAgentLoginHistoryData_queueDnStrType || 'str';
        this.GetAgentLoginHistoryData_agentDnStr = config.GetAgentLoginHistoryData_agentDnStr;
        this.GetAgentLoginHistoryData_agentDnStrType = config.GetAgentLoginHistoryData_agentDnStrType || 'str';
        this.GetAgentLoginHistoryData_top = config.GetAgentLoginHistoryData_top;
        this.GetAgentLoginHistoryData_topType = config.GetAgentLoginHistoryData_topType || 'str';
        this.GetAgentLoginHistoryData_skip = config.GetAgentLoginHistoryData_skip;
        this.GetAgentLoginHistoryData_skipType = config.GetAgentLoginHistoryData_skipType || 'str';
        this.GetAgentLoginHistoryData_search = config.GetAgentLoginHistoryData_search;
        this.GetAgentLoginHistoryData_searchType = config.GetAgentLoginHistoryData_searchType || 'str';
        this.GetAgentLoginHistoryData_filter = config.GetAgentLoginHistoryData_filter;
        this.GetAgentLoginHistoryData_filterType = config.GetAgentLoginHistoryData_filterType || 'str';
        this.GetAgentLoginHistoryData_count = config.GetAgentLoginHistoryData_count;
        this.GetAgentLoginHistoryData_countType = config.GetAgentLoginHistoryData_countType || 'str';
        this.GetAgentLoginHistoryData_select = config.GetAgentLoginHistoryData_select;
        this.GetAgentLoginHistoryData_selectType = config.GetAgentLoginHistoryData_selectType || 'str';
        this.GetAgentLoginHistoryData_orderby = config.GetAgentLoginHistoryData_orderby;
        this.GetAgentLoginHistoryData_orderbyType = config.GetAgentLoginHistoryData_orderbyType || 'str';
        this.GetAgentLoginHistoryData_expand = config.GetAgentLoginHistoryData_expand;
        this.GetAgentLoginHistoryData_expandType = config.GetAgentLoginHistoryData_expandType || 'str';
        this.DownloadAgentLoginHistory_clientTimeZone = config.DownloadAgentLoginHistory_clientTimeZone;
        this.DownloadAgentLoginHistory_clientTimeZoneType = config.DownloadAgentLoginHistory_clientTimeZoneType || 'str';
        this.DownloadAgentLoginHistory_startDt = config.DownloadAgentLoginHistory_startDt;
        this.DownloadAgentLoginHistory_startDtType = config.DownloadAgentLoginHistory_startDtType || 'str';
        this.DownloadAgentLoginHistory_endDt = config.DownloadAgentLoginHistory_endDt;
        this.DownloadAgentLoginHistory_endDtType = config.DownloadAgentLoginHistory_endDtType || 'str';
        this.DownloadAgentLoginHistory_queueDnStr = config.DownloadAgentLoginHistory_queueDnStr;
        this.DownloadAgentLoginHistory_queueDnStrType = config.DownloadAgentLoginHistory_queueDnStrType || 'str';
        this.DownloadAgentLoginHistory_agentDnStr = config.DownloadAgentLoginHistory_agentDnStr;
        this.DownloadAgentLoginHistory_agentDnStrType = config.DownloadAgentLoginHistory_agentDnStrType || 'str';
        this.DownloadAgentLoginHistory_top = config.DownloadAgentLoginHistory_top;
        this.DownloadAgentLoginHistory_topType = config.DownloadAgentLoginHistory_topType || 'str';
        this.DownloadAgentLoginHistory_skip = config.DownloadAgentLoginHistory_skip;
        this.DownloadAgentLoginHistory_skipType = config.DownloadAgentLoginHistory_skipType || 'str';
        this.DownloadAgentLoginHistory_search = config.DownloadAgentLoginHistory_search;
        this.DownloadAgentLoginHistory_searchType = config.DownloadAgentLoginHistory_searchType || 'str';
        this.DownloadAgentLoginHistory_filter = config.DownloadAgentLoginHistory_filter;
        this.DownloadAgentLoginHistory_filterType = config.DownloadAgentLoginHistory_filterType || 'str';
        this.DownloadAgentLoginHistory_count = config.DownloadAgentLoginHistory_count;
        this.DownloadAgentLoginHistory_countType = config.DownloadAgentLoginHistory_countType || 'str';
        this.DownloadAgentLoginHistory_select = config.DownloadAgentLoginHistory_select;
        this.DownloadAgentLoginHistory_selectType = config.DownloadAgentLoginHistory_selectType || 'str';
        this.DownloadAgentLoginHistory_orderby = config.DownloadAgentLoginHistory_orderby;
        this.DownloadAgentLoginHistory_orderbyType = config.DownloadAgentLoginHistory_orderbyType || 'str';
        this.DownloadAgentLoginHistory_expand = config.DownloadAgentLoginHistory_expand;
        this.DownloadAgentLoginHistory_expandType = config.DownloadAgentLoginHistory_expandType || 'str';
        this.GetAgentsInQueueStatisticsData_queueDnStr = config.GetAgentsInQueueStatisticsData_queueDnStr;
        this.GetAgentsInQueueStatisticsData_queueDnStrType = config.GetAgentsInQueueStatisticsData_queueDnStrType || 'str';
        this.GetAgentsInQueueStatisticsData_startDt = config.GetAgentsInQueueStatisticsData_startDt;
        this.GetAgentsInQueueStatisticsData_startDtType = config.GetAgentsInQueueStatisticsData_startDtType || 'str';
        this.GetAgentsInQueueStatisticsData_endDt = config.GetAgentsInQueueStatisticsData_endDt;
        this.GetAgentsInQueueStatisticsData_endDtType = config.GetAgentsInQueueStatisticsData_endDtType || 'str';
        this.GetAgentsInQueueStatisticsData_waitInterval = config.GetAgentsInQueueStatisticsData_waitInterval;
        this.GetAgentsInQueueStatisticsData_waitIntervalType = config.GetAgentsInQueueStatisticsData_waitIntervalType || 'str';
        this.GetAgentsInQueueStatisticsData_top = config.GetAgentsInQueueStatisticsData_top;
        this.GetAgentsInQueueStatisticsData_topType = config.GetAgentsInQueueStatisticsData_topType || 'str';
        this.GetAgentsInQueueStatisticsData_skip = config.GetAgentsInQueueStatisticsData_skip;
        this.GetAgentsInQueueStatisticsData_skipType = config.GetAgentsInQueueStatisticsData_skipType || 'str';
        this.GetAgentsInQueueStatisticsData_search = config.GetAgentsInQueueStatisticsData_search;
        this.GetAgentsInQueueStatisticsData_searchType = config.GetAgentsInQueueStatisticsData_searchType || 'str';
        this.GetAgentsInQueueStatisticsData_filter = config.GetAgentsInQueueStatisticsData_filter;
        this.GetAgentsInQueueStatisticsData_filterType = config.GetAgentsInQueueStatisticsData_filterType || 'str';
        this.GetAgentsInQueueStatisticsData_count = config.GetAgentsInQueueStatisticsData_count;
        this.GetAgentsInQueueStatisticsData_countType = config.GetAgentsInQueueStatisticsData_countType || 'str';
        this.GetAgentsInQueueStatisticsData_select = config.GetAgentsInQueueStatisticsData_select;
        this.GetAgentsInQueueStatisticsData_selectType = config.GetAgentsInQueueStatisticsData_selectType || 'str';
        this.GetAgentsInQueueStatisticsData_orderby = config.GetAgentsInQueueStatisticsData_orderby;
        this.GetAgentsInQueueStatisticsData_orderbyType = config.GetAgentsInQueueStatisticsData_orderbyType || 'str';
        this.GetAgentsInQueueStatisticsData_expand = config.GetAgentsInQueueStatisticsData_expand;
        this.GetAgentsInQueueStatisticsData_expandType = config.GetAgentsInQueueStatisticsData_expandType || 'str';
        this.DownloadAgentsInQueueStatistics_queueDnStr = config.DownloadAgentsInQueueStatistics_queueDnStr;
        this.DownloadAgentsInQueueStatistics_queueDnStrType = config.DownloadAgentsInQueueStatistics_queueDnStrType || 'str';
        this.DownloadAgentsInQueueStatistics_startDt = config.DownloadAgentsInQueueStatistics_startDt;
        this.DownloadAgentsInQueueStatistics_startDtType = config.DownloadAgentsInQueueStatistics_startDtType || 'str';
        this.DownloadAgentsInQueueStatistics_endDt = config.DownloadAgentsInQueueStatistics_endDt;
        this.DownloadAgentsInQueueStatistics_endDtType = config.DownloadAgentsInQueueStatistics_endDtType || 'str';
        this.DownloadAgentsInQueueStatistics_waitInterval = config.DownloadAgentsInQueueStatistics_waitInterval;
        this.DownloadAgentsInQueueStatistics_waitIntervalType = config.DownloadAgentsInQueueStatistics_waitIntervalType || 'str';
        this.DownloadAgentsInQueueStatistics_top = config.DownloadAgentsInQueueStatistics_top;
        this.DownloadAgentsInQueueStatistics_topType = config.DownloadAgentsInQueueStatistics_topType || 'str';
        this.DownloadAgentsInQueueStatistics_skip = config.DownloadAgentsInQueueStatistics_skip;
        this.DownloadAgentsInQueueStatistics_skipType = config.DownloadAgentsInQueueStatistics_skipType || 'str';
        this.DownloadAgentsInQueueStatistics_search = config.DownloadAgentsInQueueStatistics_search;
        this.DownloadAgentsInQueueStatistics_searchType = config.DownloadAgentsInQueueStatistics_searchType || 'str';
        this.DownloadAgentsInQueueStatistics_filter = config.DownloadAgentsInQueueStatistics_filter;
        this.DownloadAgentsInQueueStatistics_filterType = config.DownloadAgentsInQueueStatistics_filterType || 'str';
        this.DownloadAgentsInQueueStatistics_count = config.DownloadAgentsInQueueStatistics_count;
        this.DownloadAgentsInQueueStatistics_countType = config.DownloadAgentsInQueueStatistics_countType || 'str';
        this.DownloadAgentsInQueueStatistics_select = config.DownloadAgentsInQueueStatistics_select;
        this.DownloadAgentsInQueueStatistics_selectType = config.DownloadAgentsInQueueStatistics_selectType || 'str';
        this.DownloadAgentsInQueueStatistics_orderby = config.DownloadAgentsInQueueStatistics_orderby;
        this.DownloadAgentsInQueueStatistics_orderbyType = config.DownloadAgentsInQueueStatistics_orderbyType || 'str';
        this.DownloadAgentsInQueueStatistics_expand = config.DownloadAgentsInQueueStatistics_expand;
        this.DownloadAgentsInQueueStatistics_expandType = config.DownloadAgentsInQueueStatistics_expandType || 'str';
        this.GetAuditLogData_top = config.GetAuditLogData_top;
        this.GetAuditLogData_topType = config.GetAuditLogData_topType || 'str';
        this.GetAuditLogData_skip = config.GetAuditLogData_skip;
        this.GetAuditLogData_skipType = config.GetAuditLogData_skipType || 'str';
        this.GetAuditLogData_search = config.GetAuditLogData_search;
        this.GetAuditLogData_searchType = config.GetAuditLogData_searchType || 'str';
        this.GetAuditLogData_filter = config.GetAuditLogData_filter;
        this.GetAuditLogData_filterType = config.GetAuditLogData_filterType || 'str';
        this.GetAuditLogData_count = config.GetAuditLogData_count;
        this.GetAuditLogData_countType = config.GetAuditLogData_countType || 'str';
        this.GetAuditLogData_select = config.GetAuditLogData_select;
        this.GetAuditLogData_selectType = config.GetAuditLogData_selectType || 'str';
        this.GetAuditLogData_orderby = config.GetAuditLogData_orderby;
        this.GetAuditLogData_orderbyType = config.GetAuditLogData_orderbyType || 'str';
        this.GetAuditLogData_expand = config.GetAuditLogData_expand;
        this.GetAuditLogData_expandType = config.GetAuditLogData_expandType || 'str';
        this.DownloadAuditLog_clientTimeZone = config.DownloadAuditLog_clientTimeZone;
        this.DownloadAuditLog_clientTimeZoneType = config.DownloadAuditLog_clientTimeZoneType || 'str';
        this.DownloadAuditLog_top = config.DownloadAuditLog_top;
        this.DownloadAuditLog_topType = config.DownloadAuditLog_topType || 'str';
        this.DownloadAuditLog_skip = config.DownloadAuditLog_skip;
        this.DownloadAuditLog_skipType = config.DownloadAuditLog_skipType || 'str';
        this.DownloadAuditLog_search = config.DownloadAuditLog_search;
        this.DownloadAuditLog_searchType = config.DownloadAuditLog_searchType || 'str';
        this.DownloadAuditLog_filter = config.DownloadAuditLog_filter;
        this.DownloadAuditLog_filterType = config.DownloadAuditLog_filterType || 'str';
        this.DownloadAuditLog_count = config.DownloadAuditLog_count;
        this.DownloadAuditLog_countType = config.DownloadAuditLog_countType || 'str';
        this.DownloadAuditLog_select = config.DownloadAuditLog_select;
        this.DownloadAuditLog_selectType = config.DownloadAuditLog_selectType || 'str';
        this.DownloadAuditLog_orderby = config.DownloadAuditLog_orderby;
        this.DownloadAuditLog_orderbyType = config.DownloadAuditLog_orderbyType || 'str';
        this.DownloadAuditLog_expand = config.DownloadAuditLog_expand;
        this.DownloadAuditLog_expandType = config.DownloadAuditLog_expandType || 'str';
        this.GetAverageQueueWaitingTimeData_chartDate = config.GetAverageQueueWaitingTimeData_chartDate;
        this.GetAverageQueueWaitingTimeData_chartDateType = config.GetAverageQueueWaitingTimeData_chartDateType || 'str';
        this.GetAverageQueueWaitingTimeData_chartBy = config.GetAverageQueueWaitingTimeData_chartBy;
        this.GetAverageQueueWaitingTimeData_chartByType = config.GetAverageQueueWaitingTimeData_chartByType || 'str';
        this.GetAverageQueueWaitingTimeData_queueDnStr = config.GetAverageQueueWaitingTimeData_queueDnStr;
        this.GetAverageQueueWaitingTimeData_queueDnStrType = config.GetAverageQueueWaitingTimeData_queueDnStrType || 'str';
        this.GetAverageQueueWaitingTimeData_waitInterval = config.GetAverageQueueWaitingTimeData_waitInterval;
        this.GetAverageQueueWaitingTimeData_waitIntervalType = config.GetAverageQueueWaitingTimeData_waitIntervalType || 'str';
        this.GetAverageQueueWaitingTimeData_clientTimeZone = config.GetAverageQueueWaitingTimeData_clientTimeZone;
        this.GetAverageQueueWaitingTimeData_clientTimeZoneType = config.GetAverageQueueWaitingTimeData_clientTimeZoneType || 'str';
        this.GetAverageQueueWaitingTimeData_top = config.GetAverageQueueWaitingTimeData_top;
        this.GetAverageQueueWaitingTimeData_topType = config.GetAverageQueueWaitingTimeData_topType || 'str';
        this.GetAverageQueueWaitingTimeData_skip = config.GetAverageQueueWaitingTimeData_skip;
        this.GetAverageQueueWaitingTimeData_skipType = config.GetAverageQueueWaitingTimeData_skipType || 'str';
        this.GetAverageQueueWaitingTimeData_search = config.GetAverageQueueWaitingTimeData_search;
        this.GetAverageQueueWaitingTimeData_searchType = config.GetAverageQueueWaitingTimeData_searchType || 'str';
        this.GetAverageQueueWaitingTimeData_filter = config.GetAverageQueueWaitingTimeData_filter;
        this.GetAverageQueueWaitingTimeData_filterType = config.GetAverageQueueWaitingTimeData_filterType || 'str';
        this.GetAverageQueueWaitingTimeData_count = config.GetAverageQueueWaitingTimeData_count;
        this.GetAverageQueueWaitingTimeData_countType = config.GetAverageQueueWaitingTimeData_countType || 'str';
        this.GetAverageQueueWaitingTimeData_select = config.GetAverageQueueWaitingTimeData_select;
        this.GetAverageQueueWaitingTimeData_selectType = config.GetAverageQueueWaitingTimeData_selectType || 'str';
        this.GetAverageQueueWaitingTimeData_orderby = config.GetAverageQueueWaitingTimeData_orderby;
        this.GetAverageQueueWaitingTimeData_orderbyType = config.GetAverageQueueWaitingTimeData_orderbyType || 'str';
        this.GetAverageQueueWaitingTimeData_expand = config.GetAverageQueueWaitingTimeData_expand;
        this.GetAverageQueueWaitingTimeData_expandType = config.GetAverageQueueWaitingTimeData_expandType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_chartDate = config.DownloadAverageQueueWaitingTimeReport_chartDate;
        this.DownloadAverageQueueWaitingTimeReport_chartDateType = config.DownloadAverageQueueWaitingTimeReport_chartDateType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_chartBy = config.DownloadAverageQueueWaitingTimeReport_chartBy;
        this.DownloadAverageQueueWaitingTimeReport_chartByType = config.DownloadAverageQueueWaitingTimeReport_chartByType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_queueDnStr = config.DownloadAverageQueueWaitingTimeReport_queueDnStr;
        this.DownloadAverageQueueWaitingTimeReport_queueDnStrType = config.DownloadAverageQueueWaitingTimeReport_queueDnStrType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_waitInterval = config.DownloadAverageQueueWaitingTimeReport_waitInterval;
        this.DownloadAverageQueueWaitingTimeReport_waitIntervalType = config.DownloadAverageQueueWaitingTimeReport_waitIntervalType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_clientTimeZone = config.DownloadAverageQueueWaitingTimeReport_clientTimeZone;
        this.DownloadAverageQueueWaitingTimeReport_clientTimeZoneType = config.DownloadAverageQueueWaitingTimeReport_clientTimeZoneType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_top = config.DownloadAverageQueueWaitingTimeReport_top;
        this.DownloadAverageQueueWaitingTimeReport_topType = config.DownloadAverageQueueWaitingTimeReport_topType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_skip = config.DownloadAverageQueueWaitingTimeReport_skip;
        this.DownloadAverageQueueWaitingTimeReport_skipType = config.DownloadAverageQueueWaitingTimeReport_skipType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_search = config.DownloadAverageQueueWaitingTimeReport_search;
        this.DownloadAverageQueueWaitingTimeReport_searchType = config.DownloadAverageQueueWaitingTimeReport_searchType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_filter = config.DownloadAverageQueueWaitingTimeReport_filter;
        this.DownloadAverageQueueWaitingTimeReport_filterType = config.DownloadAverageQueueWaitingTimeReport_filterType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_count = config.DownloadAverageQueueWaitingTimeReport_count;
        this.DownloadAverageQueueWaitingTimeReport_countType = config.DownloadAverageQueueWaitingTimeReport_countType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_select = config.DownloadAverageQueueWaitingTimeReport_select;
        this.DownloadAverageQueueWaitingTimeReport_selectType = config.DownloadAverageQueueWaitingTimeReport_selectType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_orderby = config.DownloadAverageQueueWaitingTimeReport_orderby;
        this.DownloadAverageQueueWaitingTimeReport_orderbyType = config.DownloadAverageQueueWaitingTimeReport_orderbyType || 'str';
        this.DownloadAverageQueueWaitingTimeReport_expand = config.DownloadAverageQueueWaitingTimeReport_expand;
        this.DownloadAverageQueueWaitingTimeReport_expandType = config.DownloadAverageQueueWaitingTimeReport_expandType || 'str';
        this.GetBreachesSlaData_queueDnStr = config.GetBreachesSlaData_queueDnStr;
        this.GetBreachesSlaData_queueDnStrType = config.GetBreachesSlaData_queueDnStrType || 'str';
        this.GetBreachesSlaData_startDt = config.GetBreachesSlaData_startDt;
        this.GetBreachesSlaData_startDtType = config.GetBreachesSlaData_startDtType || 'str';
        this.GetBreachesSlaData_endDt = config.GetBreachesSlaData_endDt;
        this.GetBreachesSlaData_endDtType = config.GetBreachesSlaData_endDtType || 'str';
        this.GetBreachesSlaData_waitInterval = config.GetBreachesSlaData_waitInterval;
        this.GetBreachesSlaData_waitIntervalType = config.GetBreachesSlaData_waitIntervalType || 'str';
        this.GetBreachesSlaData_top = config.GetBreachesSlaData_top;
        this.GetBreachesSlaData_topType = config.GetBreachesSlaData_topType || 'str';
        this.GetBreachesSlaData_skip = config.GetBreachesSlaData_skip;
        this.GetBreachesSlaData_skipType = config.GetBreachesSlaData_skipType || 'str';
        this.GetBreachesSlaData_search = config.GetBreachesSlaData_search;
        this.GetBreachesSlaData_searchType = config.GetBreachesSlaData_searchType || 'str';
        this.GetBreachesSlaData_filter = config.GetBreachesSlaData_filter;
        this.GetBreachesSlaData_filterType = config.GetBreachesSlaData_filterType || 'str';
        this.GetBreachesSlaData_count = config.GetBreachesSlaData_count;
        this.GetBreachesSlaData_countType = config.GetBreachesSlaData_countType || 'str';
        this.GetBreachesSlaData_select = config.GetBreachesSlaData_select;
        this.GetBreachesSlaData_selectType = config.GetBreachesSlaData_selectType || 'str';
        this.GetBreachesSlaData_orderby = config.GetBreachesSlaData_orderby;
        this.GetBreachesSlaData_orderbyType = config.GetBreachesSlaData_orderbyType || 'str';
        this.GetBreachesSlaData_expand = config.GetBreachesSlaData_expand;
        this.GetBreachesSlaData_expandType = config.GetBreachesSlaData_expandType || 'str';
        this.DownloadBreachesSla_queueDnStr = config.DownloadBreachesSla_queueDnStr;
        this.DownloadBreachesSla_queueDnStrType = config.DownloadBreachesSla_queueDnStrType || 'str';
        this.DownloadBreachesSla_startDt = config.DownloadBreachesSla_startDt;
        this.DownloadBreachesSla_startDtType = config.DownloadBreachesSla_startDtType || 'str';
        this.DownloadBreachesSla_endDt = config.DownloadBreachesSla_endDt;
        this.DownloadBreachesSla_endDtType = config.DownloadBreachesSla_endDtType || 'str';
        this.DownloadBreachesSla_waitInterval = config.DownloadBreachesSla_waitInterval;
        this.DownloadBreachesSla_waitIntervalType = config.DownloadBreachesSla_waitIntervalType || 'str';
        this.DownloadBreachesSla_clientTimeZone = config.DownloadBreachesSla_clientTimeZone;
        this.DownloadBreachesSla_clientTimeZoneType = config.DownloadBreachesSla_clientTimeZoneType || 'str';
        this.DownloadBreachesSla_top = config.DownloadBreachesSla_top;
        this.DownloadBreachesSla_topType = config.DownloadBreachesSla_topType || 'str';
        this.DownloadBreachesSla_skip = config.DownloadBreachesSla_skip;
        this.DownloadBreachesSla_skipType = config.DownloadBreachesSla_skipType || 'str';
        this.DownloadBreachesSla_search = config.DownloadBreachesSla_search;
        this.DownloadBreachesSla_searchType = config.DownloadBreachesSla_searchType || 'str';
        this.DownloadBreachesSla_filter = config.DownloadBreachesSla_filter;
        this.DownloadBreachesSla_filterType = config.DownloadBreachesSla_filterType || 'str';
        this.DownloadBreachesSla_count = config.DownloadBreachesSla_count;
        this.DownloadBreachesSla_countType = config.DownloadBreachesSla_countType || 'str';
        this.DownloadBreachesSla_select = config.DownloadBreachesSla_select;
        this.DownloadBreachesSla_selectType = config.DownloadBreachesSla_selectType || 'str';
        this.DownloadBreachesSla_orderby = config.DownloadBreachesSla_orderby;
        this.DownloadBreachesSla_orderbyType = config.DownloadBreachesSla_orderbyType || 'str';
        this.DownloadBreachesSla_expand = config.DownloadBreachesSla_expand;
        this.DownloadBreachesSla_expandType = config.DownloadBreachesSla_expandType || 'str';
        this.GetCallCostByExtensionGroupData_periodFrom = config.GetCallCostByExtensionGroupData_periodFrom;
        this.GetCallCostByExtensionGroupData_periodFromType = config.GetCallCostByExtensionGroupData_periodFromType || 'str';
        this.GetCallCostByExtensionGroupData_periodTo = config.GetCallCostByExtensionGroupData_periodTo;
        this.GetCallCostByExtensionGroupData_periodToType = config.GetCallCostByExtensionGroupData_periodToType || 'str';
        this.GetCallCostByExtensionGroupData_groupFilter = config.GetCallCostByExtensionGroupData_groupFilter;
        this.GetCallCostByExtensionGroupData_groupFilterType = config.GetCallCostByExtensionGroupData_groupFilterType || 'str';
        this.GetCallCostByExtensionGroupData_callClass = config.GetCallCostByExtensionGroupData_callClass;
        this.GetCallCostByExtensionGroupData_callClassType = config.GetCallCostByExtensionGroupData_callClassType || 'str';
        this.GetCallCostByExtensionGroupData_top = config.GetCallCostByExtensionGroupData_top;
        this.GetCallCostByExtensionGroupData_topType = config.GetCallCostByExtensionGroupData_topType || 'str';
        this.GetCallCostByExtensionGroupData_skip = config.GetCallCostByExtensionGroupData_skip;
        this.GetCallCostByExtensionGroupData_skipType = config.GetCallCostByExtensionGroupData_skipType || 'str';
        this.GetCallCostByExtensionGroupData_search = config.GetCallCostByExtensionGroupData_search;
        this.GetCallCostByExtensionGroupData_searchType = config.GetCallCostByExtensionGroupData_searchType || 'str';
        this.GetCallCostByExtensionGroupData_filter = config.GetCallCostByExtensionGroupData_filter;
        this.GetCallCostByExtensionGroupData_filterType = config.GetCallCostByExtensionGroupData_filterType || 'str';
        this.GetCallCostByExtensionGroupData_count = config.GetCallCostByExtensionGroupData_count;
        this.GetCallCostByExtensionGroupData_countType = config.GetCallCostByExtensionGroupData_countType || 'str';
        this.GetCallCostByExtensionGroupData_select = config.GetCallCostByExtensionGroupData_select;
        this.GetCallCostByExtensionGroupData_selectType = config.GetCallCostByExtensionGroupData_selectType || 'str';
        this.GetCallCostByExtensionGroupData_orderby = config.GetCallCostByExtensionGroupData_orderby;
        this.GetCallCostByExtensionGroupData_orderbyType = config.GetCallCostByExtensionGroupData_orderbyType || 'str';
        this.GetCallCostByExtensionGroupData_expand = config.GetCallCostByExtensionGroupData_expand;
        this.GetCallCostByExtensionGroupData_expandType = config.GetCallCostByExtensionGroupData_expandType || 'str';
        this.DownloadCallCostByExtensionGroup_periodFrom = config.DownloadCallCostByExtensionGroup_periodFrom;
        this.DownloadCallCostByExtensionGroup_periodFromType = config.DownloadCallCostByExtensionGroup_periodFromType || 'str';
        this.DownloadCallCostByExtensionGroup_periodTo = config.DownloadCallCostByExtensionGroup_periodTo;
        this.DownloadCallCostByExtensionGroup_periodToType = config.DownloadCallCostByExtensionGroup_periodToType || 'str';
        this.DownloadCallCostByExtensionGroup_groupFilter = config.DownloadCallCostByExtensionGroup_groupFilter;
        this.DownloadCallCostByExtensionGroup_groupFilterType = config.DownloadCallCostByExtensionGroup_groupFilterType || 'str';
        this.DownloadCallCostByExtensionGroup_callClass = config.DownloadCallCostByExtensionGroup_callClass;
        this.DownloadCallCostByExtensionGroup_callClassType = config.DownloadCallCostByExtensionGroup_callClassType || 'str';
        this.DownloadCallCostByExtensionGroup_clientTimeZone = config.DownloadCallCostByExtensionGroup_clientTimeZone;
        this.DownloadCallCostByExtensionGroup_clientTimeZoneType = config.DownloadCallCostByExtensionGroup_clientTimeZoneType || 'str';
        this.DownloadCallCostByExtensionGroup_top = config.DownloadCallCostByExtensionGroup_top;
        this.DownloadCallCostByExtensionGroup_topType = config.DownloadCallCostByExtensionGroup_topType || 'str';
        this.DownloadCallCostByExtensionGroup_skip = config.DownloadCallCostByExtensionGroup_skip;
        this.DownloadCallCostByExtensionGroup_skipType = config.DownloadCallCostByExtensionGroup_skipType || 'str';
        this.DownloadCallCostByExtensionGroup_search = config.DownloadCallCostByExtensionGroup_search;
        this.DownloadCallCostByExtensionGroup_searchType = config.DownloadCallCostByExtensionGroup_searchType || 'str';
        this.DownloadCallCostByExtensionGroup_filter = config.DownloadCallCostByExtensionGroup_filter;
        this.DownloadCallCostByExtensionGroup_filterType = config.DownloadCallCostByExtensionGroup_filterType || 'str';
        this.DownloadCallCostByExtensionGroup_count = config.DownloadCallCostByExtensionGroup_count;
        this.DownloadCallCostByExtensionGroup_countType = config.DownloadCallCostByExtensionGroup_countType || 'str';
        this.DownloadCallCostByExtensionGroup_select = config.DownloadCallCostByExtensionGroup_select;
        this.DownloadCallCostByExtensionGroup_selectType = config.DownloadCallCostByExtensionGroup_selectType || 'str';
        this.DownloadCallCostByExtensionGroup_orderby = config.DownloadCallCostByExtensionGroup_orderby;
        this.DownloadCallCostByExtensionGroup_orderbyType = config.DownloadCallCostByExtensionGroup_orderbyType || 'str';
        this.DownloadCallCostByExtensionGroup_expand = config.DownloadCallCostByExtensionGroup_expand;
        this.DownloadCallCostByExtensionGroup_expandType = config.DownloadCallCostByExtensionGroup_expandType || 'str';
        this.GetCallDistributionData_chartDate = config.GetCallDistributionData_chartDate;
        this.GetCallDistributionData_chartDateType = config.GetCallDistributionData_chartDateType || 'str';
        this.GetCallDistributionData_chartBy = config.GetCallDistributionData_chartBy;
        this.GetCallDistributionData_chartByType = config.GetCallDistributionData_chartByType || 'str';
        this.GetCallDistributionData_includeInternalCalls = config.GetCallDistributionData_includeInternalCalls;
        this.GetCallDistributionData_includeInternalCallsType = config.GetCallDistributionData_includeInternalCallsType || 'str';
        this.GetCallDistributionData_includeQueueCalls = config.GetCallDistributionData_includeQueueCalls;
        this.GetCallDistributionData_includeQueueCallsType = config.GetCallDistributionData_includeQueueCallsType || 'str';
        this.GetCallDistributionData_queueDnStr = config.GetCallDistributionData_queueDnStr;
        this.GetCallDistributionData_queueDnStrType = config.GetCallDistributionData_queueDnStrType || 'str';
        this.GetCallDistributionData_groupStr = config.GetCallDistributionData_groupStr;
        this.GetCallDistributionData_groupStrType = config.GetCallDistributionData_groupStrType || 'str';
        this.GetCallDistributionData_clientTimeZone = config.GetCallDistributionData_clientTimeZone;
        this.GetCallDistributionData_clientTimeZoneType = config.GetCallDistributionData_clientTimeZoneType || 'str';
        this.GetCallDistributionData_waitInterval = config.GetCallDistributionData_waitInterval;
        this.GetCallDistributionData_waitIntervalType = config.GetCallDistributionData_waitIntervalType || 'str';
        this.GetCallDistributionData_top = config.GetCallDistributionData_top;
        this.GetCallDistributionData_topType = config.GetCallDistributionData_topType || 'str';
        this.GetCallDistributionData_skip = config.GetCallDistributionData_skip;
        this.GetCallDistributionData_skipType = config.GetCallDistributionData_skipType || 'str';
        this.GetCallDistributionData_search = config.GetCallDistributionData_search;
        this.GetCallDistributionData_searchType = config.GetCallDistributionData_searchType || 'str';
        this.GetCallDistributionData_filter = config.GetCallDistributionData_filter;
        this.GetCallDistributionData_filterType = config.GetCallDistributionData_filterType || 'str';
        this.GetCallDistributionData_count = config.GetCallDistributionData_count;
        this.GetCallDistributionData_countType = config.GetCallDistributionData_countType || 'str';
        this.GetCallDistributionData_select = config.GetCallDistributionData_select;
        this.GetCallDistributionData_selectType = config.GetCallDistributionData_selectType || 'str';
        this.GetCallDistributionData_orderby = config.GetCallDistributionData_orderby;
        this.GetCallDistributionData_orderbyType = config.GetCallDistributionData_orderbyType || 'str';
        this.GetCallDistributionData_expand = config.GetCallDistributionData_expand;
        this.GetCallDistributionData_expandType = config.GetCallDistributionData_expandType || 'str';
        this.DownloadCallDistributionReport_chartDate = config.DownloadCallDistributionReport_chartDate;
        this.DownloadCallDistributionReport_chartDateType = config.DownloadCallDistributionReport_chartDateType || 'str';
        this.DownloadCallDistributionReport_chartBy = config.DownloadCallDistributionReport_chartBy;
        this.DownloadCallDistributionReport_chartByType = config.DownloadCallDistributionReport_chartByType || 'str';
        this.DownloadCallDistributionReport_includeInternalCalls = config.DownloadCallDistributionReport_includeInternalCalls;
        this.DownloadCallDistributionReport_includeInternalCallsType = config.DownloadCallDistributionReport_includeInternalCallsType || 'str';
        this.DownloadCallDistributionReport_includeQueueCalls = config.DownloadCallDistributionReport_includeQueueCalls;
        this.DownloadCallDistributionReport_includeQueueCallsType = config.DownloadCallDistributionReport_includeQueueCallsType || 'str';
        this.DownloadCallDistributionReport_queueDnStr = config.DownloadCallDistributionReport_queueDnStr;
        this.DownloadCallDistributionReport_queueDnStrType = config.DownloadCallDistributionReport_queueDnStrType || 'str';
        this.DownloadCallDistributionReport_groupStr = config.DownloadCallDistributionReport_groupStr;
        this.DownloadCallDistributionReport_groupStrType = config.DownloadCallDistributionReport_groupStrType || 'str';
        this.DownloadCallDistributionReport_clientTimeZone = config.DownloadCallDistributionReport_clientTimeZone;
        this.DownloadCallDistributionReport_clientTimeZoneType = config.DownloadCallDistributionReport_clientTimeZoneType || 'str';
        this.DownloadCallDistributionReport_waitInterval = config.DownloadCallDistributionReport_waitInterval;
        this.DownloadCallDistributionReport_waitIntervalType = config.DownloadCallDistributionReport_waitIntervalType || 'str';
        this.DownloadCallDistributionReport_top = config.DownloadCallDistributionReport_top;
        this.DownloadCallDistributionReport_topType = config.DownloadCallDistributionReport_topType || 'str';
        this.DownloadCallDistributionReport_skip = config.DownloadCallDistributionReport_skip;
        this.DownloadCallDistributionReport_skipType = config.DownloadCallDistributionReport_skipType || 'str';
        this.DownloadCallDistributionReport_search = config.DownloadCallDistributionReport_search;
        this.DownloadCallDistributionReport_searchType = config.DownloadCallDistributionReport_searchType || 'str';
        this.DownloadCallDistributionReport_filter = config.DownloadCallDistributionReport_filter;
        this.DownloadCallDistributionReport_filterType = config.DownloadCallDistributionReport_filterType || 'str';
        this.DownloadCallDistributionReport_count = config.DownloadCallDistributionReport_count;
        this.DownloadCallDistributionReport_countType = config.DownloadCallDistributionReport_countType || 'str';
        this.DownloadCallDistributionReport_select = config.DownloadCallDistributionReport_select;
        this.DownloadCallDistributionReport_selectType = config.DownloadCallDistributionReport_selectType || 'str';
        this.DownloadCallDistributionReport_orderby = config.DownloadCallDistributionReport_orderby;
        this.DownloadCallDistributionReport_orderbyType = config.DownloadCallDistributionReport_orderbyType || 'str';
        this.DownloadCallDistributionReport_expand = config.DownloadCallDistributionReport_expand;
        this.DownloadCallDistributionReport_expandType = config.DownloadCallDistributionReport_expandType || 'str';
        this.GetCallLogData_periodFrom = config.GetCallLogData_periodFrom;
        this.GetCallLogData_periodFromType = config.GetCallLogData_periodFromType || 'str';
        this.GetCallLogData_periodTo = config.GetCallLogData_periodTo;
        this.GetCallLogData_periodToType = config.GetCallLogData_periodToType || 'str';
        this.GetCallLogData_sourceType = config.GetCallLogData_sourceType;
        this.GetCallLogData_sourceTypeType = config.GetCallLogData_sourceTypeType || 'str';
        this.GetCallLogData_sourceFilter = config.GetCallLogData_sourceFilter;
        this.GetCallLogData_sourceFilterType = config.GetCallLogData_sourceFilterType || 'str';
        this.GetCallLogData_destinationType = config.GetCallLogData_destinationType;
        this.GetCallLogData_destinationTypeType = config.GetCallLogData_destinationTypeType || 'str';
        this.GetCallLogData_destinationFilter = config.GetCallLogData_destinationFilter;
        this.GetCallLogData_destinationFilterType = config.GetCallLogData_destinationFilterType || 'str';
        this.GetCallLogData_callsType = config.GetCallLogData_callsType;
        this.GetCallLogData_callsTypeType = config.GetCallLogData_callsTypeType || 'str';
        this.GetCallLogData_callTimeFilterType = config.GetCallLogData_callTimeFilterType;
        this.GetCallLogData_callTimeFilterTypeType = config.GetCallLogData_callTimeFilterTypeType || 'str';
        this.GetCallLogData_callTimeFilterFrom = config.GetCallLogData_callTimeFilterFrom;
        this.GetCallLogData_callTimeFilterFromType = config.GetCallLogData_callTimeFilterFromType || 'str';
        this.GetCallLogData_callTimeFilterTo = config.GetCallLogData_callTimeFilterTo;
        this.GetCallLogData_callTimeFilterToType = config.GetCallLogData_callTimeFilterToType || 'str';
        this.GetCallLogData_hidePcalls = config.GetCallLogData_hidePcalls;
        this.GetCallLogData_hidePcallsType = config.GetCallLogData_hidePcallsType || 'str';
        this.GetCallLogData_top = config.GetCallLogData_top;
        this.GetCallLogData_topType = config.GetCallLogData_topType || 'str';
        this.GetCallLogData_skip = config.GetCallLogData_skip;
        this.GetCallLogData_skipType = config.GetCallLogData_skipType || 'str';
        this.GetCallLogData_search = config.GetCallLogData_search;
        this.GetCallLogData_searchType = config.GetCallLogData_searchType || 'str';
        this.GetCallLogData_filter = config.GetCallLogData_filter;
        this.GetCallLogData_filterType = config.GetCallLogData_filterType || 'str';
        this.GetCallLogData_count = config.GetCallLogData_count;
        this.GetCallLogData_countType = config.GetCallLogData_countType || 'str';
        this.GetCallLogData_select = config.GetCallLogData_select;
        this.GetCallLogData_selectType = config.GetCallLogData_selectType || 'str';
        this.GetCallLogData_orderby = config.GetCallLogData_orderby;
        this.GetCallLogData_orderbyType = config.GetCallLogData_orderbyType || 'str';
        this.GetCallLogData_expand = config.GetCallLogData_expand;
        this.GetCallLogData_expandType = config.GetCallLogData_expandType || 'str';
        this.DownloadCallLog_periodFrom = config.DownloadCallLog_periodFrom;
        this.DownloadCallLog_periodFromType = config.DownloadCallLog_periodFromType || 'str';
        this.DownloadCallLog_periodTo = config.DownloadCallLog_periodTo;
        this.DownloadCallLog_periodToType = config.DownloadCallLog_periodToType || 'str';
        this.DownloadCallLog_sourceType = config.DownloadCallLog_sourceType;
        this.DownloadCallLog_sourceTypeType = config.DownloadCallLog_sourceTypeType || 'str';
        this.DownloadCallLog_sourceFilter = config.DownloadCallLog_sourceFilter;
        this.DownloadCallLog_sourceFilterType = config.DownloadCallLog_sourceFilterType || 'str';
        this.DownloadCallLog_destinationType = config.DownloadCallLog_destinationType;
        this.DownloadCallLog_destinationTypeType = config.DownloadCallLog_destinationTypeType || 'str';
        this.DownloadCallLog_destinationFilter = config.DownloadCallLog_destinationFilter;
        this.DownloadCallLog_destinationFilterType = config.DownloadCallLog_destinationFilterType || 'str';
        this.DownloadCallLog_callsType = config.DownloadCallLog_callsType;
        this.DownloadCallLog_callsTypeType = config.DownloadCallLog_callsTypeType || 'str';
        this.DownloadCallLog_callTimeFilterType = config.DownloadCallLog_callTimeFilterType;
        this.DownloadCallLog_callTimeFilterTypeType = config.DownloadCallLog_callTimeFilterTypeType || 'str';
        this.DownloadCallLog_callTimeFilterFrom = config.DownloadCallLog_callTimeFilterFrom;
        this.DownloadCallLog_callTimeFilterFromType = config.DownloadCallLog_callTimeFilterFromType || 'str';
        this.DownloadCallLog_callTimeFilterTo = config.DownloadCallLog_callTimeFilterTo;
        this.DownloadCallLog_callTimeFilterToType = config.DownloadCallLog_callTimeFilterToType || 'str';
        this.DownloadCallLog_hidePcalls = config.DownloadCallLog_hidePcalls;
        this.DownloadCallLog_hidePcallsType = config.DownloadCallLog_hidePcallsType || 'str';
        this.DownloadCallLog_clientTimeZone = config.DownloadCallLog_clientTimeZone;
        this.DownloadCallLog_clientTimeZoneType = config.DownloadCallLog_clientTimeZoneType || 'str';
        this.DownloadCallLog_top = config.DownloadCallLog_top;
        this.DownloadCallLog_topType = config.DownloadCallLog_topType || 'str';
        this.DownloadCallLog_skip = config.DownloadCallLog_skip;
        this.DownloadCallLog_skipType = config.DownloadCallLog_skipType || 'str';
        this.DownloadCallLog_search = config.DownloadCallLog_search;
        this.DownloadCallLog_searchType = config.DownloadCallLog_searchType || 'str';
        this.DownloadCallLog_filter = config.DownloadCallLog_filter;
        this.DownloadCallLog_filterType = config.DownloadCallLog_filterType || 'str';
        this.DownloadCallLog_count = config.DownloadCallLog_count;
        this.DownloadCallLog_countType = config.DownloadCallLog_countType || 'str';
        this.DownloadCallLog_select = config.DownloadCallLog_select;
        this.DownloadCallLog_selectType = config.DownloadCallLog_selectType || 'str';
        this.DownloadCallLog_orderby = config.DownloadCallLog_orderby;
        this.DownloadCallLog_orderbyType = config.DownloadCallLog_orderbyType || 'str';
        this.DownloadCallLog_expand = config.DownloadCallLog_expand;
        this.DownloadCallLog_expandType = config.DownloadCallLog_expandType || 'str';
        this.GetCallQualityReport_callId = config.GetCallQualityReport_callId;
        this.GetCallQualityReport_callIdType = config.GetCallQualityReport_callIdType || 'str';
        this.GetCallQualityReport_srcNumber = config.GetCallQualityReport_srcNumber;
        this.GetCallQualityReport_srcNumberType = config.GetCallQualityReport_srcNumberType || 'str';
        this.GetCallQualityReport_dstNumber = config.GetCallQualityReport_dstNumber;
        this.GetCallQualityReport_dstNumberType = config.GetCallQualityReport_dstNumberType || 'str';
        this.GetCallQualityReport_srcCallerId = config.GetCallQualityReport_srcCallerId;
        this.GetCallQualityReport_srcCallerIdType = config.GetCallQualityReport_srcCallerIdType || 'str';
        this.GetCallQualityReport_dstCallerId = config.GetCallQualityReport_dstCallerId;
        this.GetCallQualityReport_dstCallerIdType = config.GetCallQualityReport_dstCallerIdType || 'str';
        this.GetDetailedQueueStatisticsData_queueDnStr = config.GetDetailedQueueStatisticsData_queueDnStr;
        this.GetDetailedQueueStatisticsData_queueDnStrType = config.GetDetailedQueueStatisticsData_queueDnStrType || 'str';
        this.GetDetailedQueueStatisticsData_startDt = config.GetDetailedQueueStatisticsData_startDt;
        this.GetDetailedQueueStatisticsData_startDtType = config.GetDetailedQueueStatisticsData_startDtType || 'str';
        this.GetDetailedQueueStatisticsData_endDt = config.GetDetailedQueueStatisticsData_endDt;
        this.GetDetailedQueueStatisticsData_endDtType = config.GetDetailedQueueStatisticsData_endDtType || 'str';
        this.GetDetailedQueueStatisticsData_waitInterval = config.GetDetailedQueueStatisticsData_waitInterval;
        this.GetDetailedQueueStatisticsData_waitIntervalType = config.GetDetailedQueueStatisticsData_waitIntervalType || 'str';
        this.GetDetailedQueueStatisticsData_top = config.GetDetailedQueueStatisticsData_top;
        this.GetDetailedQueueStatisticsData_topType = config.GetDetailedQueueStatisticsData_topType || 'str';
        this.GetDetailedQueueStatisticsData_skip = config.GetDetailedQueueStatisticsData_skip;
        this.GetDetailedQueueStatisticsData_skipType = config.GetDetailedQueueStatisticsData_skipType || 'str';
        this.GetDetailedQueueStatisticsData_search = config.GetDetailedQueueStatisticsData_search;
        this.GetDetailedQueueStatisticsData_searchType = config.GetDetailedQueueStatisticsData_searchType || 'str';
        this.GetDetailedQueueStatisticsData_filter = config.GetDetailedQueueStatisticsData_filter;
        this.GetDetailedQueueStatisticsData_filterType = config.GetDetailedQueueStatisticsData_filterType || 'str';
        this.GetDetailedQueueStatisticsData_count = config.GetDetailedQueueStatisticsData_count;
        this.GetDetailedQueueStatisticsData_countType = config.GetDetailedQueueStatisticsData_countType || 'str';
        this.GetDetailedQueueStatisticsData_select = config.GetDetailedQueueStatisticsData_select;
        this.GetDetailedQueueStatisticsData_selectType = config.GetDetailedQueueStatisticsData_selectType || 'str';
        this.GetDetailedQueueStatisticsData_orderby = config.GetDetailedQueueStatisticsData_orderby;
        this.GetDetailedQueueStatisticsData_orderbyType = config.GetDetailedQueueStatisticsData_orderbyType || 'str';
        this.GetDetailedQueueStatisticsData_expand = config.GetDetailedQueueStatisticsData_expand;
        this.GetDetailedQueueStatisticsData_expandType = config.GetDetailedQueueStatisticsData_expandType || 'str';
        this.DownloadDetailedQueueStatistics_queueDnStr = config.DownloadDetailedQueueStatistics_queueDnStr;
        this.DownloadDetailedQueueStatistics_queueDnStrType = config.DownloadDetailedQueueStatistics_queueDnStrType || 'str';
        this.DownloadDetailedQueueStatistics_startDt = config.DownloadDetailedQueueStatistics_startDt;
        this.DownloadDetailedQueueStatistics_startDtType = config.DownloadDetailedQueueStatistics_startDtType || 'str';
        this.DownloadDetailedQueueStatistics_endDt = config.DownloadDetailedQueueStatistics_endDt;
        this.DownloadDetailedQueueStatistics_endDtType = config.DownloadDetailedQueueStatistics_endDtType || 'str';
        this.DownloadDetailedQueueStatistics_waitInterval = config.DownloadDetailedQueueStatistics_waitInterval;
        this.DownloadDetailedQueueStatistics_waitIntervalType = config.DownloadDetailedQueueStatistics_waitIntervalType || 'str';
        this.DownloadDetailedQueueStatistics_top = config.DownloadDetailedQueueStatistics_top;
        this.DownloadDetailedQueueStatistics_topType = config.DownloadDetailedQueueStatistics_topType || 'str';
        this.DownloadDetailedQueueStatistics_skip = config.DownloadDetailedQueueStatistics_skip;
        this.DownloadDetailedQueueStatistics_skipType = config.DownloadDetailedQueueStatistics_skipType || 'str';
        this.DownloadDetailedQueueStatistics_search = config.DownloadDetailedQueueStatistics_search;
        this.DownloadDetailedQueueStatistics_searchType = config.DownloadDetailedQueueStatistics_searchType || 'str';
        this.DownloadDetailedQueueStatistics_filter = config.DownloadDetailedQueueStatistics_filter;
        this.DownloadDetailedQueueStatistics_filterType = config.DownloadDetailedQueueStatistics_filterType || 'str';
        this.DownloadDetailedQueueStatistics_count = config.DownloadDetailedQueueStatistics_count;
        this.DownloadDetailedQueueStatistics_countType = config.DownloadDetailedQueueStatistics_countType || 'str';
        this.DownloadDetailedQueueStatistics_select = config.DownloadDetailedQueueStatistics_select;
        this.DownloadDetailedQueueStatistics_selectType = config.DownloadDetailedQueueStatistics_selectType || 'str';
        this.DownloadDetailedQueueStatistics_orderby = config.DownloadDetailedQueueStatistics_orderby;
        this.DownloadDetailedQueueStatistics_orderbyType = config.DownloadDetailedQueueStatistics_orderbyType || 'str';
        this.DownloadDetailedQueueStatistics_expand = config.DownloadDetailedQueueStatistics_expand;
        this.DownloadDetailedQueueStatistics_expandType = config.DownloadDetailedQueueStatistics_expandType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_periodFrom = config.GetExtensionsStatisticsByRingGroupsData_periodFrom;
        this.GetExtensionsStatisticsByRingGroupsData_periodFromType = config.GetExtensionsStatisticsByRingGroupsData_periodFromType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_periodTo = config.GetExtensionsStatisticsByRingGroupsData_periodTo;
        this.GetExtensionsStatisticsByRingGroupsData_periodToType = config.GetExtensionsStatisticsByRingGroupsData_periodToType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_ringGroupDns = config.GetExtensionsStatisticsByRingGroupsData_ringGroupDns;
        this.GetExtensionsStatisticsByRingGroupsData_ringGroupDnsType = config.GetExtensionsStatisticsByRingGroupsData_ringGroupDnsType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_top = config.GetExtensionsStatisticsByRingGroupsData_top;
        this.GetExtensionsStatisticsByRingGroupsData_topType = config.GetExtensionsStatisticsByRingGroupsData_topType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_skip = config.GetExtensionsStatisticsByRingGroupsData_skip;
        this.GetExtensionsStatisticsByRingGroupsData_skipType = config.GetExtensionsStatisticsByRingGroupsData_skipType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_search = config.GetExtensionsStatisticsByRingGroupsData_search;
        this.GetExtensionsStatisticsByRingGroupsData_searchType = config.GetExtensionsStatisticsByRingGroupsData_searchType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_filter = config.GetExtensionsStatisticsByRingGroupsData_filter;
        this.GetExtensionsStatisticsByRingGroupsData_filterType = config.GetExtensionsStatisticsByRingGroupsData_filterType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_count = config.GetExtensionsStatisticsByRingGroupsData_count;
        this.GetExtensionsStatisticsByRingGroupsData_countType = config.GetExtensionsStatisticsByRingGroupsData_countType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_select = config.GetExtensionsStatisticsByRingGroupsData_select;
        this.GetExtensionsStatisticsByRingGroupsData_selectType = config.GetExtensionsStatisticsByRingGroupsData_selectType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_orderby = config.GetExtensionsStatisticsByRingGroupsData_orderby;
        this.GetExtensionsStatisticsByRingGroupsData_orderbyType = config.GetExtensionsStatisticsByRingGroupsData_orderbyType || 'str';
        this.GetExtensionsStatisticsByRingGroupsData_expand = config.GetExtensionsStatisticsByRingGroupsData_expand;
        this.GetExtensionsStatisticsByRingGroupsData_expandType = config.GetExtensionsStatisticsByRingGroupsData_expandType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_periodFrom = config.DownloadExtensionsStatisticsByRingGroups_periodFrom;
        this.DownloadExtensionsStatisticsByRingGroups_periodFromType = config.DownloadExtensionsStatisticsByRingGroups_periodFromType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_periodTo = config.DownloadExtensionsStatisticsByRingGroups_periodTo;
        this.DownloadExtensionsStatisticsByRingGroups_periodToType = config.DownloadExtensionsStatisticsByRingGroups_periodToType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_ringGroupDns = config.DownloadExtensionsStatisticsByRingGroups_ringGroupDns;
        this.DownloadExtensionsStatisticsByRingGroups_ringGroupDnsType = config.DownloadExtensionsStatisticsByRingGroups_ringGroupDnsType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_top = config.DownloadExtensionsStatisticsByRingGroups_top;
        this.DownloadExtensionsStatisticsByRingGroups_topType = config.DownloadExtensionsStatisticsByRingGroups_topType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_skip = config.DownloadExtensionsStatisticsByRingGroups_skip;
        this.DownloadExtensionsStatisticsByRingGroups_skipType = config.DownloadExtensionsStatisticsByRingGroups_skipType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_search = config.DownloadExtensionsStatisticsByRingGroups_search;
        this.DownloadExtensionsStatisticsByRingGroups_searchType = config.DownloadExtensionsStatisticsByRingGroups_searchType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_filter = config.DownloadExtensionsStatisticsByRingGroups_filter;
        this.DownloadExtensionsStatisticsByRingGroups_filterType = config.DownloadExtensionsStatisticsByRingGroups_filterType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_count = config.DownloadExtensionsStatisticsByRingGroups_count;
        this.DownloadExtensionsStatisticsByRingGroups_countType = config.DownloadExtensionsStatisticsByRingGroups_countType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_select = config.DownloadExtensionsStatisticsByRingGroups_select;
        this.DownloadExtensionsStatisticsByRingGroups_selectType = config.DownloadExtensionsStatisticsByRingGroups_selectType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_orderby = config.DownloadExtensionsStatisticsByRingGroups_orderby;
        this.DownloadExtensionsStatisticsByRingGroups_orderbyType = config.DownloadExtensionsStatisticsByRingGroups_orderbyType || 'str';
        this.DownloadExtensionsStatisticsByRingGroups_expand = config.DownloadExtensionsStatisticsByRingGroups_expand;
        this.DownloadExtensionsStatisticsByRingGroups_expandType = config.DownloadExtensionsStatisticsByRingGroups_expandType || 'str';
        this.GetExtensionStatisticsByGroupData_groupNumber = config.GetExtensionStatisticsByGroupData_groupNumber;
        this.GetExtensionStatisticsByGroupData_groupNumberType = config.GetExtensionStatisticsByGroupData_groupNumberType || 'str';
        this.GetExtensionStatisticsByGroupData_periodFrom = config.GetExtensionStatisticsByGroupData_periodFrom;
        this.GetExtensionStatisticsByGroupData_periodFromType = config.GetExtensionStatisticsByGroupData_periodFromType || 'str';
        this.GetExtensionStatisticsByGroupData_periodTo = config.GetExtensionStatisticsByGroupData_periodTo;
        this.GetExtensionStatisticsByGroupData_periodToType = config.GetExtensionStatisticsByGroupData_periodToType || 'str';
        this.GetExtensionStatisticsByGroupData_callArea = config.GetExtensionStatisticsByGroupData_callArea;
        this.GetExtensionStatisticsByGroupData_callAreaType = config.GetExtensionStatisticsByGroupData_callAreaType || 'str';
        this.GetExtensionStatisticsByGroupData_top = config.GetExtensionStatisticsByGroupData_top;
        this.GetExtensionStatisticsByGroupData_topType = config.GetExtensionStatisticsByGroupData_topType || 'str';
        this.GetExtensionStatisticsByGroupData_skip = config.GetExtensionStatisticsByGroupData_skip;
        this.GetExtensionStatisticsByGroupData_skipType = config.GetExtensionStatisticsByGroupData_skipType || 'str';
        this.GetExtensionStatisticsByGroupData_search = config.GetExtensionStatisticsByGroupData_search;
        this.GetExtensionStatisticsByGroupData_searchType = config.GetExtensionStatisticsByGroupData_searchType || 'str';
        this.GetExtensionStatisticsByGroupData_filter = config.GetExtensionStatisticsByGroupData_filter;
        this.GetExtensionStatisticsByGroupData_filterType = config.GetExtensionStatisticsByGroupData_filterType || 'str';
        this.GetExtensionStatisticsByGroupData_count = config.GetExtensionStatisticsByGroupData_count;
        this.GetExtensionStatisticsByGroupData_countType = config.GetExtensionStatisticsByGroupData_countType || 'str';
        this.GetExtensionStatisticsByGroupData_select = config.GetExtensionStatisticsByGroupData_select;
        this.GetExtensionStatisticsByGroupData_selectType = config.GetExtensionStatisticsByGroupData_selectType || 'str';
        this.GetExtensionStatisticsByGroupData_orderby = config.GetExtensionStatisticsByGroupData_orderby;
        this.GetExtensionStatisticsByGroupData_orderbyType = config.GetExtensionStatisticsByGroupData_orderbyType || 'str';
        this.GetExtensionStatisticsByGroupData_expand = config.GetExtensionStatisticsByGroupData_expand;
        this.GetExtensionStatisticsByGroupData_expandType = config.GetExtensionStatisticsByGroupData_expandType || 'str';
        this.DownloadExtensionStatisticsByGroup_groupNumber = config.DownloadExtensionStatisticsByGroup_groupNumber;
        this.DownloadExtensionStatisticsByGroup_groupNumberType = config.DownloadExtensionStatisticsByGroup_groupNumberType || 'str';
        this.DownloadExtensionStatisticsByGroup_periodFrom = config.DownloadExtensionStatisticsByGroup_periodFrom;
        this.DownloadExtensionStatisticsByGroup_periodFromType = config.DownloadExtensionStatisticsByGroup_periodFromType || 'str';
        this.DownloadExtensionStatisticsByGroup_periodTo = config.DownloadExtensionStatisticsByGroup_periodTo;
        this.DownloadExtensionStatisticsByGroup_periodToType = config.DownloadExtensionStatisticsByGroup_periodToType || 'str';
        this.DownloadExtensionStatisticsByGroup_callArea = config.DownloadExtensionStatisticsByGroup_callArea;
        this.DownloadExtensionStatisticsByGroup_callAreaType = config.DownloadExtensionStatisticsByGroup_callAreaType || 'str';
        this.DownloadExtensionStatisticsByGroup_top = config.DownloadExtensionStatisticsByGroup_top;
        this.DownloadExtensionStatisticsByGroup_topType = config.DownloadExtensionStatisticsByGroup_topType || 'str';
        this.DownloadExtensionStatisticsByGroup_skip = config.DownloadExtensionStatisticsByGroup_skip;
        this.DownloadExtensionStatisticsByGroup_skipType = config.DownloadExtensionStatisticsByGroup_skipType || 'str';
        this.DownloadExtensionStatisticsByGroup_search = config.DownloadExtensionStatisticsByGroup_search;
        this.DownloadExtensionStatisticsByGroup_searchType = config.DownloadExtensionStatisticsByGroup_searchType || 'str';
        this.DownloadExtensionStatisticsByGroup_filter = config.DownloadExtensionStatisticsByGroup_filter;
        this.DownloadExtensionStatisticsByGroup_filterType = config.DownloadExtensionStatisticsByGroup_filterType || 'str';
        this.DownloadExtensionStatisticsByGroup_count = config.DownloadExtensionStatisticsByGroup_count;
        this.DownloadExtensionStatisticsByGroup_countType = config.DownloadExtensionStatisticsByGroup_countType || 'str';
        this.DownloadExtensionStatisticsByGroup_select = config.DownloadExtensionStatisticsByGroup_select;
        this.DownloadExtensionStatisticsByGroup_selectType = config.DownloadExtensionStatisticsByGroup_selectType || 'str';
        this.DownloadExtensionStatisticsByGroup_orderby = config.DownloadExtensionStatisticsByGroup_orderby;
        this.DownloadExtensionStatisticsByGroup_orderbyType = config.DownloadExtensionStatisticsByGroup_orderbyType || 'str';
        this.DownloadExtensionStatisticsByGroup_expand = config.DownloadExtensionStatisticsByGroup_expand;
        this.DownloadExtensionStatisticsByGroup_expandType = config.DownloadExtensionStatisticsByGroup_expandType || 'str';
        this.GetExtensionStatisticsData_periodFrom = config.GetExtensionStatisticsData_periodFrom;
        this.GetExtensionStatisticsData_periodFromType = config.GetExtensionStatisticsData_periodFromType || 'str';
        this.GetExtensionStatisticsData_periodTo = config.GetExtensionStatisticsData_periodTo;
        this.GetExtensionStatisticsData_periodToType = config.GetExtensionStatisticsData_periodToType || 'str';
        this.GetExtensionStatisticsData_extensionFilter = config.GetExtensionStatisticsData_extensionFilter;
        this.GetExtensionStatisticsData_extensionFilterType = config.GetExtensionStatisticsData_extensionFilterType || 'str';
        this.GetExtensionStatisticsData_callArea = config.GetExtensionStatisticsData_callArea;
        this.GetExtensionStatisticsData_callAreaType = config.GetExtensionStatisticsData_callAreaType || 'str';
        this.GetExtensionStatisticsData_top = config.GetExtensionStatisticsData_top;
        this.GetExtensionStatisticsData_topType = config.GetExtensionStatisticsData_topType || 'str';
        this.GetExtensionStatisticsData_skip = config.GetExtensionStatisticsData_skip;
        this.GetExtensionStatisticsData_skipType = config.GetExtensionStatisticsData_skipType || 'str';
        this.GetExtensionStatisticsData_search = config.GetExtensionStatisticsData_search;
        this.GetExtensionStatisticsData_searchType = config.GetExtensionStatisticsData_searchType || 'str';
        this.GetExtensionStatisticsData_filter = config.GetExtensionStatisticsData_filter;
        this.GetExtensionStatisticsData_filterType = config.GetExtensionStatisticsData_filterType || 'str';
        this.GetExtensionStatisticsData_count = config.GetExtensionStatisticsData_count;
        this.GetExtensionStatisticsData_countType = config.GetExtensionStatisticsData_countType || 'str';
        this.GetExtensionStatisticsData_select = config.GetExtensionStatisticsData_select;
        this.GetExtensionStatisticsData_selectType = config.GetExtensionStatisticsData_selectType || 'str';
        this.GetExtensionStatisticsData_orderby = config.GetExtensionStatisticsData_orderby;
        this.GetExtensionStatisticsData_orderbyType = config.GetExtensionStatisticsData_orderbyType || 'str';
        this.GetExtensionStatisticsData_expand = config.GetExtensionStatisticsData_expand;
        this.GetExtensionStatisticsData_expandType = config.GetExtensionStatisticsData_expandType || 'str';
        this.DownloadExtensionStatistics_periodFrom = config.DownloadExtensionStatistics_periodFrom;
        this.DownloadExtensionStatistics_periodFromType = config.DownloadExtensionStatistics_periodFromType || 'str';
        this.DownloadExtensionStatistics_periodTo = config.DownloadExtensionStatistics_periodTo;
        this.DownloadExtensionStatistics_periodToType = config.DownloadExtensionStatistics_periodToType || 'str';
        this.DownloadExtensionStatistics_extensionFilter = config.DownloadExtensionStatistics_extensionFilter;
        this.DownloadExtensionStatistics_extensionFilterType = config.DownloadExtensionStatistics_extensionFilterType || 'str';
        this.DownloadExtensionStatistics_callArea = config.DownloadExtensionStatistics_callArea;
        this.DownloadExtensionStatistics_callAreaType = config.DownloadExtensionStatistics_callAreaType || 'str';
        this.DownloadExtensionStatistics_top = config.DownloadExtensionStatistics_top;
        this.DownloadExtensionStatistics_topType = config.DownloadExtensionStatistics_topType || 'str';
        this.DownloadExtensionStatistics_skip = config.DownloadExtensionStatistics_skip;
        this.DownloadExtensionStatistics_skipType = config.DownloadExtensionStatistics_skipType || 'str';
        this.DownloadExtensionStatistics_search = config.DownloadExtensionStatistics_search;
        this.DownloadExtensionStatistics_searchType = config.DownloadExtensionStatistics_searchType || 'str';
        this.DownloadExtensionStatistics_filter = config.DownloadExtensionStatistics_filter;
        this.DownloadExtensionStatistics_filterType = config.DownloadExtensionStatistics_filterType || 'str';
        this.DownloadExtensionStatistics_count = config.DownloadExtensionStatistics_count;
        this.DownloadExtensionStatistics_countType = config.DownloadExtensionStatistics_countType || 'str';
        this.DownloadExtensionStatistics_select = config.DownloadExtensionStatistics_select;
        this.DownloadExtensionStatistics_selectType = config.DownloadExtensionStatistics_selectType || 'str';
        this.DownloadExtensionStatistics_orderby = config.DownloadExtensionStatistics_orderby;
        this.DownloadExtensionStatistics_orderbyType = config.DownloadExtensionStatistics_orderbyType || 'str';
        this.DownloadExtensionStatistics_expand = config.DownloadExtensionStatistics_expand;
        this.DownloadExtensionStatistics_expandType = config.DownloadExtensionStatistics_expandType || 'str';
        this.ListReportGroup_top = config.ListReportGroup_top;
        this.ListReportGroup_topType = config.ListReportGroup_topType || 'str';
        this.ListReportGroup_skip = config.ListReportGroup_skip;
        this.ListReportGroup_skipType = config.ListReportGroup_skipType || 'str';
        this.ListReportGroup_search = config.ListReportGroup_search;
        this.ListReportGroup_searchType = config.ListReportGroup_searchType || 'str';
        this.ListReportGroup_filter = config.ListReportGroup_filter;
        this.ListReportGroup_filterType = config.ListReportGroup_filterType || 'str';
        this.ListReportGroup_count = config.ListReportGroup_count;
        this.ListReportGroup_countType = config.ListReportGroup_countType || 'str';
        this.ListReportGroup_orderby = config.ListReportGroup_orderby;
        this.ListReportGroup_orderbyType = config.ListReportGroup_orderbyType || 'str';
        this.ListReportGroup_select = config.ListReportGroup_select;
        this.ListReportGroup_selectType = config.ListReportGroup_selectType || 'str';
        this.ListReportGroup_expand = config.ListReportGroup_expand;
        this.ListReportGroup_expandType = config.ListReportGroup_expandType || 'str';
        this.GetInboundRulesData_top = config.GetInboundRulesData_top;
        this.GetInboundRulesData_topType = config.GetInboundRulesData_topType || 'str';
        this.GetInboundRulesData_skip = config.GetInboundRulesData_skip;
        this.GetInboundRulesData_skipType = config.GetInboundRulesData_skipType || 'str';
        this.GetInboundRulesData_search = config.GetInboundRulesData_search;
        this.GetInboundRulesData_searchType = config.GetInboundRulesData_searchType || 'str';
        this.GetInboundRulesData_filter = config.GetInboundRulesData_filter;
        this.GetInboundRulesData_filterType = config.GetInboundRulesData_filterType || 'str';
        this.GetInboundRulesData_count = config.GetInboundRulesData_count;
        this.GetInboundRulesData_countType = config.GetInboundRulesData_countType || 'str';
        this.GetInboundRulesData_select = config.GetInboundRulesData_select;
        this.GetInboundRulesData_selectType = config.GetInboundRulesData_selectType || 'str';
        this.GetInboundRulesData_orderby = config.GetInboundRulesData_orderby;
        this.GetInboundRulesData_orderbyType = config.GetInboundRulesData_orderbyType || 'str';
        this.GetInboundRulesData_expand = config.GetInboundRulesData_expand;
        this.GetInboundRulesData_expandType = config.GetInboundRulesData_expandType || 'str';
        this.DownloadInboundRules_top = config.DownloadInboundRules_top;
        this.DownloadInboundRules_topType = config.DownloadInboundRules_topType || 'str';
        this.DownloadInboundRules_skip = config.DownloadInboundRules_skip;
        this.DownloadInboundRules_skipType = config.DownloadInboundRules_skipType || 'str';
        this.DownloadInboundRules_search = config.DownloadInboundRules_search;
        this.DownloadInboundRules_searchType = config.DownloadInboundRules_searchType || 'str';
        this.DownloadInboundRules_filter = config.DownloadInboundRules_filter;
        this.DownloadInboundRules_filterType = config.DownloadInboundRules_filterType || 'str';
        this.DownloadInboundRules_count = config.DownloadInboundRules_count;
        this.DownloadInboundRules_countType = config.DownloadInboundRules_countType || 'str';
        this.DownloadInboundRules_select = config.DownloadInboundRules_select;
        this.DownloadInboundRules_selectType = config.DownloadInboundRules_selectType || 'str';
        this.DownloadInboundRules_orderby = config.DownloadInboundRules_orderby;
        this.DownloadInboundRules_orderbyType = config.DownloadInboundRules_orderbyType || 'str';
        this.DownloadInboundRules_expand = config.DownloadInboundRules_expand;
        this.DownloadInboundRules_expandType = config.DownloadInboundRules_expandType || 'str';
        this.GetQueueAgentsChatStatisticsData_queueDnStr = config.GetQueueAgentsChatStatisticsData_queueDnStr;
        this.GetQueueAgentsChatStatisticsData_queueDnStrType = config.GetQueueAgentsChatStatisticsData_queueDnStrType || 'str';
        this.GetQueueAgentsChatStatisticsData_startDt = config.GetQueueAgentsChatStatisticsData_startDt;
        this.GetQueueAgentsChatStatisticsData_startDtType = config.GetQueueAgentsChatStatisticsData_startDtType || 'str';
        this.GetQueueAgentsChatStatisticsData_endDt = config.GetQueueAgentsChatStatisticsData_endDt;
        this.GetQueueAgentsChatStatisticsData_endDtType = config.GetQueueAgentsChatStatisticsData_endDtType || 'str';
        this.GetQueueAgentsChatStatisticsData_participantType = config.GetQueueAgentsChatStatisticsData_participantType;
        this.GetQueueAgentsChatStatisticsData_participantTypeType = config.GetQueueAgentsChatStatisticsData_participantTypeType || 'str';
        this.GetQueueAgentsChatStatisticsData_top = config.GetQueueAgentsChatStatisticsData_top;
        this.GetQueueAgentsChatStatisticsData_topType = config.GetQueueAgentsChatStatisticsData_topType || 'str';
        this.GetQueueAgentsChatStatisticsData_skip = config.GetQueueAgentsChatStatisticsData_skip;
        this.GetQueueAgentsChatStatisticsData_skipType = config.GetQueueAgentsChatStatisticsData_skipType || 'str';
        this.GetQueueAgentsChatStatisticsData_search = config.GetQueueAgentsChatStatisticsData_search;
        this.GetQueueAgentsChatStatisticsData_searchType = config.GetQueueAgentsChatStatisticsData_searchType || 'str';
        this.GetQueueAgentsChatStatisticsData_filter = config.GetQueueAgentsChatStatisticsData_filter;
        this.GetQueueAgentsChatStatisticsData_filterType = config.GetQueueAgentsChatStatisticsData_filterType || 'str';
        this.GetQueueAgentsChatStatisticsData_count = config.GetQueueAgentsChatStatisticsData_count;
        this.GetQueueAgentsChatStatisticsData_countType = config.GetQueueAgentsChatStatisticsData_countType || 'str';
        this.GetQueueAgentsChatStatisticsData_select = config.GetQueueAgentsChatStatisticsData_select;
        this.GetQueueAgentsChatStatisticsData_selectType = config.GetQueueAgentsChatStatisticsData_selectType || 'str';
        this.GetQueueAgentsChatStatisticsData_orderby = config.GetQueueAgentsChatStatisticsData_orderby;
        this.GetQueueAgentsChatStatisticsData_orderbyType = config.GetQueueAgentsChatStatisticsData_orderbyType || 'str';
        this.GetQueueAgentsChatStatisticsData_expand = config.GetQueueAgentsChatStatisticsData_expand;
        this.GetQueueAgentsChatStatisticsData_expandType = config.GetQueueAgentsChatStatisticsData_expandType || 'str';
        this.DownloadQueueAgentsChatStatistics_queueDnStr = config.DownloadQueueAgentsChatStatistics_queueDnStr;
        this.DownloadQueueAgentsChatStatistics_queueDnStrType = config.DownloadQueueAgentsChatStatistics_queueDnStrType || 'str';
        this.DownloadQueueAgentsChatStatistics_startDt = config.DownloadQueueAgentsChatStatistics_startDt;
        this.DownloadQueueAgentsChatStatistics_startDtType = config.DownloadQueueAgentsChatStatistics_startDtType || 'str';
        this.DownloadQueueAgentsChatStatistics_endDt = config.DownloadQueueAgentsChatStatistics_endDt;
        this.DownloadQueueAgentsChatStatistics_endDtType = config.DownloadQueueAgentsChatStatistics_endDtType || 'str';
        this.DownloadQueueAgentsChatStatistics_participantType = config.DownloadQueueAgentsChatStatistics_participantType;
        this.DownloadQueueAgentsChatStatistics_participantTypeType = config.DownloadQueueAgentsChatStatistics_participantTypeType || 'str';
        this.DownloadQueueAgentsChatStatistics_top = config.DownloadQueueAgentsChatStatistics_top;
        this.DownloadQueueAgentsChatStatistics_topType = config.DownloadQueueAgentsChatStatistics_topType || 'str';
        this.DownloadQueueAgentsChatStatistics_skip = config.DownloadQueueAgentsChatStatistics_skip;
        this.DownloadQueueAgentsChatStatistics_skipType = config.DownloadQueueAgentsChatStatistics_skipType || 'str';
        this.DownloadQueueAgentsChatStatistics_search = config.DownloadQueueAgentsChatStatistics_search;
        this.DownloadQueueAgentsChatStatistics_searchType = config.DownloadQueueAgentsChatStatistics_searchType || 'str';
        this.DownloadQueueAgentsChatStatistics_filter = config.DownloadQueueAgentsChatStatistics_filter;
        this.DownloadQueueAgentsChatStatistics_filterType = config.DownloadQueueAgentsChatStatistics_filterType || 'str';
        this.DownloadQueueAgentsChatStatistics_count = config.DownloadQueueAgentsChatStatistics_count;
        this.DownloadQueueAgentsChatStatistics_countType = config.DownloadQueueAgentsChatStatistics_countType || 'str';
        this.DownloadQueueAgentsChatStatistics_select = config.DownloadQueueAgentsChatStatistics_select;
        this.DownloadQueueAgentsChatStatistics_selectType = config.DownloadQueueAgentsChatStatistics_selectType || 'str';
        this.DownloadQueueAgentsChatStatistics_orderby = config.DownloadQueueAgentsChatStatistics_orderby;
        this.DownloadQueueAgentsChatStatistics_orderbyType = config.DownloadQueueAgentsChatStatistics_orderbyType || 'str';
        this.DownloadQueueAgentsChatStatistics_expand = config.DownloadQueueAgentsChatStatistics_expand;
        this.DownloadQueueAgentsChatStatistics_expandType = config.DownloadQueueAgentsChatStatistics_expandType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_queueDnStr = config.GetQueueAgentsChatStatisticsTotalsData_queueDnStr;
        this.GetQueueAgentsChatStatisticsTotalsData_queueDnStrType = config.GetQueueAgentsChatStatisticsTotalsData_queueDnStrType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_startDt = config.GetQueueAgentsChatStatisticsTotalsData_startDt;
        this.GetQueueAgentsChatStatisticsTotalsData_startDtType = config.GetQueueAgentsChatStatisticsTotalsData_startDtType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_endDt = config.GetQueueAgentsChatStatisticsTotalsData_endDt;
        this.GetQueueAgentsChatStatisticsTotalsData_endDtType = config.GetQueueAgentsChatStatisticsTotalsData_endDtType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_participantType = config.GetQueueAgentsChatStatisticsTotalsData_participantType;
        this.GetQueueAgentsChatStatisticsTotalsData_participantTypeType = config.GetQueueAgentsChatStatisticsTotalsData_participantTypeType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_top = config.GetQueueAgentsChatStatisticsTotalsData_top;
        this.GetQueueAgentsChatStatisticsTotalsData_topType = config.GetQueueAgentsChatStatisticsTotalsData_topType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_skip = config.GetQueueAgentsChatStatisticsTotalsData_skip;
        this.GetQueueAgentsChatStatisticsTotalsData_skipType = config.GetQueueAgentsChatStatisticsTotalsData_skipType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_search = config.GetQueueAgentsChatStatisticsTotalsData_search;
        this.GetQueueAgentsChatStatisticsTotalsData_searchType = config.GetQueueAgentsChatStatisticsTotalsData_searchType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_filter = config.GetQueueAgentsChatStatisticsTotalsData_filter;
        this.GetQueueAgentsChatStatisticsTotalsData_filterType = config.GetQueueAgentsChatStatisticsTotalsData_filterType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_count = config.GetQueueAgentsChatStatisticsTotalsData_count;
        this.GetQueueAgentsChatStatisticsTotalsData_countType = config.GetQueueAgentsChatStatisticsTotalsData_countType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_select = config.GetQueueAgentsChatStatisticsTotalsData_select;
        this.GetQueueAgentsChatStatisticsTotalsData_selectType = config.GetQueueAgentsChatStatisticsTotalsData_selectType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_orderby = config.GetQueueAgentsChatStatisticsTotalsData_orderby;
        this.GetQueueAgentsChatStatisticsTotalsData_orderbyType = config.GetQueueAgentsChatStatisticsTotalsData_orderbyType || 'str';
        this.GetQueueAgentsChatStatisticsTotalsData_expand = config.GetQueueAgentsChatStatisticsTotalsData_expand;
        this.GetQueueAgentsChatStatisticsTotalsData_expandType = config.GetQueueAgentsChatStatisticsTotalsData_expandType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_queueDnStr = config.DownloadQueueAgentsChatStatisticsTotals_queueDnStr;
        this.DownloadQueueAgentsChatStatisticsTotals_queueDnStrType = config.DownloadQueueAgentsChatStatisticsTotals_queueDnStrType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_startDt = config.DownloadQueueAgentsChatStatisticsTotals_startDt;
        this.DownloadQueueAgentsChatStatisticsTotals_startDtType = config.DownloadQueueAgentsChatStatisticsTotals_startDtType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_endDt = config.DownloadQueueAgentsChatStatisticsTotals_endDt;
        this.DownloadQueueAgentsChatStatisticsTotals_endDtType = config.DownloadQueueAgentsChatStatisticsTotals_endDtType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_participantType = config.DownloadQueueAgentsChatStatisticsTotals_participantType;
        this.DownloadQueueAgentsChatStatisticsTotals_participantTypeType = config.DownloadQueueAgentsChatStatisticsTotals_participantTypeType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_top = config.DownloadQueueAgentsChatStatisticsTotals_top;
        this.DownloadQueueAgentsChatStatisticsTotals_topType = config.DownloadQueueAgentsChatStatisticsTotals_topType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_skip = config.DownloadQueueAgentsChatStatisticsTotals_skip;
        this.DownloadQueueAgentsChatStatisticsTotals_skipType = config.DownloadQueueAgentsChatStatisticsTotals_skipType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_search = config.DownloadQueueAgentsChatStatisticsTotals_search;
        this.DownloadQueueAgentsChatStatisticsTotals_searchType = config.DownloadQueueAgentsChatStatisticsTotals_searchType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_filter = config.DownloadQueueAgentsChatStatisticsTotals_filter;
        this.DownloadQueueAgentsChatStatisticsTotals_filterType = config.DownloadQueueAgentsChatStatisticsTotals_filterType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_count = config.DownloadQueueAgentsChatStatisticsTotals_count;
        this.DownloadQueueAgentsChatStatisticsTotals_countType = config.DownloadQueueAgentsChatStatisticsTotals_countType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_select = config.DownloadQueueAgentsChatStatisticsTotals_select;
        this.DownloadQueueAgentsChatStatisticsTotals_selectType = config.DownloadQueueAgentsChatStatisticsTotals_selectType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_orderby = config.DownloadQueueAgentsChatStatisticsTotals_orderby;
        this.DownloadQueueAgentsChatStatisticsTotals_orderbyType = config.DownloadQueueAgentsChatStatisticsTotals_orderbyType || 'str';
        this.DownloadQueueAgentsChatStatisticsTotals_expand = config.DownloadQueueAgentsChatStatisticsTotals_expand;
        this.DownloadQueueAgentsChatStatisticsTotals_expandType = config.DownloadQueueAgentsChatStatisticsTotals_expandType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_queueDnStr = config.GetQueueAnsweredCallsByWaitTimeData_queueDnStr;
        this.GetQueueAnsweredCallsByWaitTimeData_queueDnStrType = config.GetQueueAnsweredCallsByWaitTimeData_queueDnStrType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_startDt = config.GetQueueAnsweredCallsByWaitTimeData_startDt;
        this.GetQueueAnsweredCallsByWaitTimeData_startDtType = config.GetQueueAnsweredCallsByWaitTimeData_startDtType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_endDt = config.GetQueueAnsweredCallsByWaitTimeData_endDt;
        this.GetQueueAnsweredCallsByWaitTimeData_endDtType = config.GetQueueAnsweredCallsByWaitTimeData_endDtType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_answerInterval = config.GetQueueAnsweredCallsByWaitTimeData_answerInterval;
        this.GetQueueAnsweredCallsByWaitTimeData_answerIntervalType = config.GetQueueAnsweredCallsByWaitTimeData_answerIntervalType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_top = config.GetQueueAnsweredCallsByWaitTimeData_top;
        this.GetQueueAnsweredCallsByWaitTimeData_topType = config.GetQueueAnsweredCallsByWaitTimeData_topType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_skip = config.GetQueueAnsweredCallsByWaitTimeData_skip;
        this.GetQueueAnsweredCallsByWaitTimeData_skipType = config.GetQueueAnsweredCallsByWaitTimeData_skipType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_search = config.GetQueueAnsweredCallsByWaitTimeData_search;
        this.GetQueueAnsweredCallsByWaitTimeData_searchType = config.GetQueueAnsweredCallsByWaitTimeData_searchType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_filter = config.GetQueueAnsweredCallsByWaitTimeData_filter;
        this.GetQueueAnsweredCallsByWaitTimeData_filterType = config.GetQueueAnsweredCallsByWaitTimeData_filterType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_count = config.GetQueueAnsweredCallsByWaitTimeData_count;
        this.GetQueueAnsweredCallsByWaitTimeData_countType = config.GetQueueAnsweredCallsByWaitTimeData_countType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_select = config.GetQueueAnsweredCallsByWaitTimeData_select;
        this.GetQueueAnsweredCallsByWaitTimeData_selectType = config.GetQueueAnsweredCallsByWaitTimeData_selectType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_orderby = config.GetQueueAnsweredCallsByWaitTimeData_orderby;
        this.GetQueueAnsweredCallsByWaitTimeData_orderbyType = config.GetQueueAnsweredCallsByWaitTimeData_orderbyType || 'str';
        this.GetQueueAnsweredCallsByWaitTimeData_expand = config.GetQueueAnsweredCallsByWaitTimeData_expand;
        this.GetQueueAnsweredCallsByWaitTimeData_expandType = config.GetQueueAnsweredCallsByWaitTimeData_expandType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_queueDnStr = config.DownloadQueueAnsweredCallsByWaitTime_queueDnStr;
        this.DownloadQueueAnsweredCallsByWaitTime_queueDnStrType = config.DownloadQueueAnsweredCallsByWaitTime_queueDnStrType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_startDt = config.DownloadQueueAnsweredCallsByWaitTime_startDt;
        this.DownloadQueueAnsweredCallsByWaitTime_startDtType = config.DownloadQueueAnsweredCallsByWaitTime_startDtType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_endDt = config.DownloadQueueAnsweredCallsByWaitTime_endDt;
        this.DownloadQueueAnsweredCallsByWaitTime_endDtType = config.DownloadQueueAnsweredCallsByWaitTime_endDtType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_answerInterval = config.DownloadQueueAnsweredCallsByWaitTime_answerInterval;
        this.DownloadQueueAnsweredCallsByWaitTime_answerIntervalType = config.DownloadQueueAnsweredCallsByWaitTime_answerIntervalType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_clientTimeZone = config.DownloadQueueAnsweredCallsByWaitTime_clientTimeZone;
        this.DownloadQueueAnsweredCallsByWaitTime_clientTimeZoneType = config.DownloadQueueAnsweredCallsByWaitTime_clientTimeZoneType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_top = config.DownloadQueueAnsweredCallsByWaitTime_top;
        this.DownloadQueueAnsweredCallsByWaitTime_topType = config.DownloadQueueAnsweredCallsByWaitTime_topType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_skip = config.DownloadQueueAnsweredCallsByWaitTime_skip;
        this.DownloadQueueAnsweredCallsByWaitTime_skipType = config.DownloadQueueAnsweredCallsByWaitTime_skipType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_search = config.DownloadQueueAnsweredCallsByWaitTime_search;
        this.DownloadQueueAnsweredCallsByWaitTime_searchType = config.DownloadQueueAnsweredCallsByWaitTime_searchType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_filter = config.DownloadQueueAnsweredCallsByWaitTime_filter;
        this.DownloadQueueAnsweredCallsByWaitTime_filterType = config.DownloadQueueAnsweredCallsByWaitTime_filterType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_count = config.DownloadQueueAnsweredCallsByWaitTime_count;
        this.DownloadQueueAnsweredCallsByWaitTime_countType = config.DownloadQueueAnsweredCallsByWaitTime_countType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_select = config.DownloadQueueAnsweredCallsByWaitTime_select;
        this.DownloadQueueAnsweredCallsByWaitTime_selectType = config.DownloadQueueAnsweredCallsByWaitTime_selectType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_orderby = config.DownloadQueueAnsweredCallsByWaitTime_orderby;
        this.DownloadQueueAnsweredCallsByWaitTime_orderbyType = config.DownloadQueueAnsweredCallsByWaitTime_orderbyType || 'str';
        this.DownloadQueueAnsweredCallsByWaitTime_expand = config.DownloadQueueAnsweredCallsByWaitTime_expand;
        this.DownloadQueueAnsweredCallsByWaitTime_expandType = config.DownloadQueueAnsweredCallsByWaitTime_expandType || 'str';
        this.GetQueueAnUnCallsData_chartDate = config.GetQueueAnUnCallsData_chartDate;
        this.GetQueueAnUnCallsData_chartDateType = config.GetQueueAnUnCallsData_chartDateType || 'str';
        this.GetQueueAnUnCallsData_chartBy = config.GetQueueAnUnCallsData_chartBy;
        this.GetQueueAnUnCallsData_chartByType = config.GetQueueAnUnCallsData_chartByType || 'str';
        this.GetQueueAnUnCallsData_queueDnStr = config.GetQueueAnUnCallsData_queueDnStr;
        this.GetQueueAnUnCallsData_queueDnStrType = config.GetQueueAnUnCallsData_queueDnStrType || 'str';
        this.GetQueueAnUnCallsData_clientTimeZone = config.GetQueueAnUnCallsData_clientTimeZone;
        this.GetQueueAnUnCallsData_clientTimeZoneType = config.GetQueueAnUnCallsData_clientTimeZoneType || 'str';
        this.GetQueueAnUnCallsData_waitInterval = config.GetQueueAnUnCallsData_waitInterval;
        this.GetQueueAnUnCallsData_waitIntervalType = config.GetQueueAnUnCallsData_waitIntervalType || 'str';
        this.GetQueueAnUnCallsData_top = config.GetQueueAnUnCallsData_top;
        this.GetQueueAnUnCallsData_topType = config.GetQueueAnUnCallsData_topType || 'str';
        this.GetQueueAnUnCallsData_skip = config.GetQueueAnUnCallsData_skip;
        this.GetQueueAnUnCallsData_skipType = config.GetQueueAnUnCallsData_skipType || 'str';
        this.GetQueueAnUnCallsData_search = config.GetQueueAnUnCallsData_search;
        this.GetQueueAnUnCallsData_searchType = config.GetQueueAnUnCallsData_searchType || 'str';
        this.GetQueueAnUnCallsData_filter = config.GetQueueAnUnCallsData_filter;
        this.GetQueueAnUnCallsData_filterType = config.GetQueueAnUnCallsData_filterType || 'str';
        this.GetQueueAnUnCallsData_count = config.GetQueueAnUnCallsData_count;
        this.GetQueueAnUnCallsData_countType = config.GetQueueAnUnCallsData_countType || 'str';
        this.GetQueueAnUnCallsData_select = config.GetQueueAnUnCallsData_select;
        this.GetQueueAnUnCallsData_selectType = config.GetQueueAnUnCallsData_selectType || 'str';
        this.GetQueueAnUnCallsData_orderby = config.GetQueueAnUnCallsData_orderby;
        this.GetQueueAnUnCallsData_orderbyType = config.GetQueueAnUnCallsData_orderbyType || 'str';
        this.GetQueueAnUnCallsData_expand = config.GetQueueAnUnCallsData_expand;
        this.GetQueueAnUnCallsData_expandType = config.GetQueueAnUnCallsData_expandType || 'str';
        this.DownloadQueueAnUnCallsReport_chartDate = config.DownloadQueueAnUnCallsReport_chartDate;
        this.DownloadQueueAnUnCallsReport_chartDateType = config.DownloadQueueAnUnCallsReport_chartDateType || 'str';
        this.DownloadQueueAnUnCallsReport_chartBy = config.DownloadQueueAnUnCallsReport_chartBy;
        this.DownloadQueueAnUnCallsReport_chartByType = config.DownloadQueueAnUnCallsReport_chartByType || 'str';
        this.DownloadQueueAnUnCallsReport_queueDnStr = config.DownloadQueueAnUnCallsReport_queueDnStr;
        this.DownloadQueueAnUnCallsReport_queueDnStrType = config.DownloadQueueAnUnCallsReport_queueDnStrType || 'str';
        this.DownloadQueueAnUnCallsReport_clientTimeZone = config.DownloadQueueAnUnCallsReport_clientTimeZone;
        this.DownloadQueueAnUnCallsReport_clientTimeZoneType = config.DownloadQueueAnUnCallsReport_clientTimeZoneType || 'str';
        this.DownloadQueueAnUnCallsReport_waitInterval = config.DownloadQueueAnUnCallsReport_waitInterval;
        this.DownloadQueueAnUnCallsReport_waitIntervalType = config.DownloadQueueAnUnCallsReport_waitIntervalType || 'str';
        this.DownloadQueueAnUnCallsReport_top = config.DownloadQueueAnUnCallsReport_top;
        this.DownloadQueueAnUnCallsReport_topType = config.DownloadQueueAnUnCallsReport_topType || 'str';
        this.DownloadQueueAnUnCallsReport_skip = config.DownloadQueueAnUnCallsReport_skip;
        this.DownloadQueueAnUnCallsReport_skipType = config.DownloadQueueAnUnCallsReport_skipType || 'str';
        this.DownloadQueueAnUnCallsReport_search = config.DownloadQueueAnUnCallsReport_search;
        this.DownloadQueueAnUnCallsReport_searchType = config.DownloadQueueAnUnCallsReport_searchType || 'str';
        this.DownloadQueueAnUnCallsReport_filter = config.DownloadQueueAnUnCallsReport_filter;
        this.DownloadQueueAnUnCallsReport_filterType = config.DownloadQueueAnUnCallsReport_filterType || 'str';
        this.DownloadQueueAnUnCallsReport_count = config.DownloadQueueAnUnCallsReport_count;
        this.DownloadQueueAnUnCallsReport_countType = config.DownloadQueueAnUnCallsReport_countType || 'str';
        this.DownloadQueueAnUnCallsReport_select = config.DownloadQueueAnUnCallsReport_select;
        this.DownloadQueueAnUnCallsReport_selectType = config.DownloadQueueAnUnCallsReport_selectType || 'str';
        this.DownloadQueueAnUnCallsReport_orderby = config.DownloadQueueAnUnCallsReport_orderby;
        this.DownloadQueueAnUnCallsReport_orderbyType = config.DownloadQueueAnUnCallsReport_orderbyType || 'str';
        this.DownloadQueueAnUnCallsReport_expand = config.DownloadQueueAnUnCallsReport_expand;
        this.DownloadQueueAnUnCallsReport_expandType = config.DownloadQueueAnUnCallsReport_expandType || 'str';
        this.GetQueueCallbacksData_queueDnStr = config.GetQueueCallbacksData_queueDnStr;
        this.GetQueueCallbacksData_queueDnStrType = config.GetQueueCallbacksData_queueDnStrType || 'str';
        this.GetQueueCallbacksData_startDt = config.GetQueueCallbacksData_startDt;
        this.GetQueueCallbacksData_startDtType = config.GetQueueCallbacksData_startDtType || 'str';
        this.GetQueueCallbacksData_endDt = config.GetQueueCallbacksData_endDt;
        this.GetQueueCallbacksData_endDtType = config.GetQueueCallbacksData_endDtType || 'str';
        this.GetQueueCallbacksData_top = config.GetQueueCallbacksData_top;
        this.GetQueueCallbacksData_topType = config.GetQueueCallbacksData_topType || 'str';
        this.GetQueueCallbacksData_skip = config.GetQueueCallbacksData_skip;
        this.GetQueueCallbacksData_skipType = config.GetQueueCallbacksData_skipType || 'str';
        this.GetQueueCallbacksData_search = config.GetQueueCallbacksData_search;
        this.GetQueueCallbacksData_searchType = config.GetQueueCallbacksData_searchType || 'str';
        this.GetQueueCallbacksData_filter = config.GetQueueCallbacksData_filter;
        this.GetQueueCallbacksData_filterType = config.GetQueueCallbacksData_filterType || 'str';
        this.GetQueueCallbacksData_count = config.GetQueueCallbacksData_count;
        this.GetQueueCallbacksData_countType = config.GetQueueCallbacksData_countType || 'str';
        this.GetQueueCallbacksData_select = config.GetQueueCallbacksData_select;
        this.GetQueueCallbacksData_selectType = config.GetQueueCallbacksData_selectType || 'str';
        this.GetQueueCallbacksData_orderby = config.GetQueueCallbacksData_orderby;
        this.GetQueueCallbacksData_orderbyType = config.GetQueueCallbacksData_orderbyType || 'str';
        this.GetQueueCallbacksData_expand = config.GetQueueCallbacksData_expand;
        this.GetQueueCallbacksData_expandType = config.GetQueueCallbacksData_expandType || 'str';
        this.DownloadQueueCallbacks_queueDnStr = config.DownloadQueueCallbacks_queueDnStr;
        this.DownloadQueueCallbacks_queueDnStrType = config.DownloadQueueCallbacks_queueDnStrType || 'str';
        this.DownloadQueueCallbacks_startDt = config.DownloadQueueCallbacks_startDt;
        this.DownloadQueueCallbacks_startDtType = config.DownloadQueueCallbacks_startDtType || 'str';
        this.DownloadQueueCallbacks_endDt = config.DownloadQueueCallbacks_endDt;
        this.DownloadQueueCallbacks_endDtType = config.DownloadQueueCallbacks_endDtType || 'str';
        this.DownloadQueueCallbacks_top = config.DownloadQueueCallbacks_top;
        this.DownloadQueueCallbacks_topType = config.DownloadQueueCallbacks_topType || 'str';
        this.DownloadQueueCallbacks_skip = config.DownloadQueueCallbacks_skip;
        this.DownloadQueueCallbacks_skipType = config.DownloadQueueCallbacks_skipType || 'str';
        this.DownloadQueueCallbacks_search = config.DownloadQueueCallbacks_search;
        this.DownloadQueueCallbacks_searchType = config.DownloadQueueCallbacks_searchType || 'str';
        this.DownloadQueueCallbacks_filter = config.DownloadQueueCallbacks_filter;
        this.DownloadQueueCallbacks_filterType = config.DownloadQueueCallbacks_filterType || 'str';
        this.DownloadQueueCallbacks_count = config.DownloadQueueCallbacks_count;
        this.DownloadQueueCallbacks_countType = config.DownloadQueueCallbacks_countType || 'str';
        this.DownloadQueueCallbacks_select = config.DownloadQueueCallbacks_select;
        this.DownloadQueueCallbacks_selectType = config.DownloadQueueCallbacks_selectType || 'str';
        this.DownloadQueueCallbacks_orderby = config.DownloadQueueCallbacks_orderby;
        this.DownloadQueueCallbacks_orderbyType = config.DownloadQueueCallbacks_orderbyType || 'str';
        this.DownloadQueueCallbacks_expand = config.DownloadQueueCallbacks_expand;
        this.DownloadQueueCallbacks_expandType = config.DownloadQueueCallbacks_expandType || 'str';
        this.GetQueueChatPerformanceData_queueDnStr = config.GetQueueChatPerformanceData_queueDnStr;
        this.GetQueueChatPerformanceData_queueDnStrType = config.GetQueueChatPerformanceData_queueDnStrType || 'str';
        this.GetQueueChatPerformanceData_startDt = config.GetQueueChatPerformanceData_startDt;
        this.GetQueueChatPerformanceData_startDtType = config.GetQueueChatPerformanceData_startDtType || 'str';
        this.GetQueueChatPerformanceData_endDt = config.GetQueueChatPerformanceData_endDt;
        this.GetQueueChatPerformanceData_endDtType = config.GetQueueChatPerformanceData_endDtType || 'str';
        this.GetQueueChatPerformanceData_participantType = config.GetQueueChatPerformanceData_participantType;
        this.GetQueueChatPerformanceData_participantTypeType = config.GetQueueChatPerformanceData_participantTypeType || 'str';
        this.GetQueueChatPerformanceData_top = config.GetQueueChatPerformanceData_top;
        this.GetQueueChatPerformanceData_topType = config.GetQueueChatPerformanceData_topType || 'str';
        this.GetQueueChatPerformanceData_skip = config.GetQueueChatPerformanceData_skip;
        this.GetQueueChatPerformanceData_skipType = config.GetQueueChatPerformanceData_skipType || 'str';
        this.GetQueueChatPerformanceData_search = config.GetQueueChatPerformanceData_search;
        this.GetQueueChatPerformanceData_searchType = config.GetQueueChatPerformanceData_searchType || 'str';
        this.GetQueueChatPerformanceData_filter = config.GetQueueChatPerformanceData_filter;
        this.GetQueueChatPerformanceData_filterType = config.GetQueueChatPerformanceData_filterType || 'str';
        this.GetQueueChatPerformanceData_count = config.GetQueueChatPerformanceData_count;
        this.GetQueueChatPerformanceData_countType = config.GetQueueChatPerformanceData_countType || 'str';
        this.GetQueueChatPerformanceData_select = config.GetQueueChatPerformanceData_select;
        this.GetQueueChatPerformanceData_selectType = config.GetQueueChatPerformanceData_selectType || 'str';
        this.GetQueueChatPerformanceData_orderby = config.GetQueueChatPerformanceData_orderby;
        this.GetQueueChatPerformanceData_orderbyType = config.GetQueueChatPerformanceData_orderbyType || 'str';
        this.GetQueueChatPerformanceData_expand = config.GetQueueChatPerformanceData_expand;
        this.GetQueueChatPerformanceData_expandType = config.GetQueueChatPerformanceData_expandType || 'str';
        this.DownloadQueueChatPerformance_queueDnStr = config.DownloadQueueChatPerformance_queueDnStr;
        this.DownloadQueueChatPerformance_queueDnStrType = config.DownloadQueueChatPerformance_queueDnStrType || 'str';
        this.DownloadQueueChatPerformance_startDt = config.DownloadQueueChatPerformance_startDt;
        this.DownloadQueueChatPerformance_startDtType = config.DownloadQueueChatPerformance_startDtType || 'str';
        this.DownloadQueueChatPerformance_endDt = config.DownloadQueueChatPerformance_endDt;
        this.DownloadQueueChatPerformance_endDtType = config.DownloadQueueChatPerformance_endDtType || 'str';
        this.DownloadQueueChatPerformance_participantType = config.DownloadQueueChatPerformance_participantType;
        this.DownloadQueueChatPerformance_participantTypeType = config.DownloadQueueChatPerformance_participantTypeType || 'str';
        this.DownloadQueueChatPerformance_top = config.DownloadQueueChatPerformance_top;
        this.DownloadQueueChatPerformance_topType = config.DownloadQueueChatPerformance_topType || 'str';
        this.DownloadQueueChatPerformance_skip = config.DownloadQueueChatPerformance_skip;
        this.DownloadQueueChatPerformance_skipType = config.DownloadQueueChatPerformance_skipType || 'str';
        this.DownloadQueueChatPerformance_search = config.DownloadQueueChatPerformance_search;
        this.DownloadQueueChatPerformance_searchType = config.DownloadQueueChatPerformance_searchType || 'str';
        this.DownloadQueueChatPerformance_filter = config.DownloadQueueChatPerformance_filter;
        this.DownloadQueueChatPerformance_filterType = config.DownloadQueueChatPerformance_filterType || 'str';
        this.DownloadQueueChatPerformance_count = config.DownloadQueueChatPerformance_count;
        this.DownloadQueueChatPerformance_countType = config.DownloadQueueChatPerformance_countType || 'str';
        this.DownloadQueueChatPerformance_select = config.DownloadQueueChatPerformance_select;
        this.DownloadQueueChatPerformance_selectType = config.DownloadQueueChatPerformance_selectType || 'str';
        this.DownloadQueueChatPerformance_orderby = config.DownloadQueueChatPerformance_orderby;
        this.DownloadQueueChatPerformance_orderbyType = config.DownloadQueueChatPerformance_orderbyType || 'str';
        this.DownloadQueueChatPerformance_expand = config.DownloadQueueChatPerformance_expand;
        this.DownloadQueueChatPerformance_expandType = config.DownloadQueueChatPerformance_expandType || 'str';
        this.GetQueueFailedCallbacksData_queueDnStr = config.GetQueueFailedCallbacksData_queueDnStr;
        this.GetQueueFailedCallbacksData_queueDnStrType = config.GetQueueFailedCallbacksData_queueDnStrType || 'str';
        this.GetQueueFailedCallbacksData_startDt = config.GetQueueFailedCallbacksData_startDt;
        this.GetQueueFailedCallbacksData_startDtType = config.GetQueueFailedCallbacksData_startDtType || 'str';
        this.GetQueueFailedCallbacksData_endDt = config.GetQueueFailedCallbacksData_endDt;
        this.GetQueueFailedCallbacksData_endDtType = config.GetQueueFailedCallbacksData_endDtType || 'str';
        this.GetQueueFailedCallbacksData_top = config.GetQueueFailedCallbacksData_top;
        this.GetQueueFailedCallbacksData_topType = config.GetQueueFailedCallbacksData_topType || 'str';
        this.GetQueueFailedCallbacksData_skip = config.GetQueueFailedCallbacksData_skip;
        this.GetQueueFailedCallbacksData_skipType = config.GetQueueFailedCallbacksData_skipType || 'str';
        this.GetQueueFailedCallbacksData_search = config.GetQueueFailedCallbacksData_search;
        this.GetQueueFailedCallbacksData_searchType = config.GetQueueFailedCallbacksData_searchType || 'str';
        this.GetQueueFailedCallbacksData_filter = config.GetQueueFailedCallbacksData_filter;
        this.GetQueueFailedCallbacksData_filterType = config.GetQueueFailedCallbacksData_filterType || 'str';
        this.GetQueueFailedCallbacksData_count = config.GetQueueFailedCallbacksData_count;
        this.GetQueueFailedCallbacksData_countType = config.GetQueueFailedCallbacksData_countType || 'str';
        this.GetQueueFailedCallbacksData_select = config.GetQueueFailedCallbacksData_select;
        this.GetQueueFailedCallbacksData_selectType = config.GetQueueFailedCallbacksData_selectType || 'str';
        this.GetQueueFailedCallbacksData_orderby = config.GetQueueFailedCallbacksData_orderby;
        this.GetQueueFailedCallbacksData_orderbyType = config.GetQueueFailedCallbacksData_orderbyType || 'str';
        this.GetQueueFailedCallbacksData_expand = config.GetQueueFailedCallbacksData_expand;
        this.GetQueueFailedCallbacksData_expandType = config.GetQueueFailedCallbacksData_expandType || 'str';
        this.DownloadQueueFailedCallbacks_queueDnStr = config.DownloadQueueFailedCallbacks_queueDnStr;
        this.DownloadQueueFailedCallbacks_queueDnStrType = config.DownloadQueueFailedCallbacks_queueDnStrType || 'str';
        this.DownloadQueueFailedCallbacks_startDt = config.DownloadQueueFailedCallbacks_startDt;
        this.DownloadQueueFailedCallbacks_startDtType = config.DownloadQueueFailedCallbacks_startDtType || 'str';
        this.DownloadQueueFailedCallbacks_endDt = config.DownloadQueueFailedCallbacks_endDt;
        this.DownloadQueueFailedCallbacks_endDtType = config.DownloadQueueFailedCallbacks_endDtType || 'str';
        this.DownloadQueueFailedCallbacks_clientTimeZone = config.DownloadQueueFailedCallbacks_clientTimeZone;
        this.DownloadQueueFailedCallbacks_clientTimeZoneType = config.DownloadQueueFailedCallbacks_clientTimeZoneType || 'str';
        this.DownloadQueueFailedCallbacks_top = config.DownloadQueueFailedCallbacks_top;
        this.DownloadQueueFailedCallbacks_topType = config.DownloadQueueFailedCallbacks_topType || 'str';
        this.DownloadQueueFailedCallbacks_skip = config.DownloadQueueFailedCallbacks_skip;
        this.DownloadQueueFailedCallbacks_skipType = config.DownloadQueueFailedCallbacks_skipType || 'str';
        this.DownloadQueueFailedCallbacks_search = config.DownloadQueueFailedCallbacks_search;
        this.DownloadQueueFailedCallbacks_searchType = config.DownloadQueueFailedCallbacks_searchType || 'str';
        this.DownloadQueueFailedCallbacks_filter = config.DownloadQueueFailedCallbacks_filter;
        this.DownloadQueueFailedCallbacks_filterType = config.DownloadQueueFailedCallbacks_filterType || 'str';
        this.DownloadQueueFailedCallbacks_count = config.DownloadQueueFailedCallbacks_count;
        this.DownloadQueueFailedCallbacks_countType = config.DownloadQueueFailedCallbacks_countType || 'str';
        this.DownloadQueueFailedCallbacks_select = config.DownloadQueueFailedCallbacks_select;
        this.DownloadQueueFailedCallbacks_selectType = config.DownloadQueueFailedCallbacks_selectType || 'str';
        this.DownloadQueueFailedCallbacks_orderby = config.DownloadQueueFailedCallbacks_orderby;
        this.DownloadQueueFailedCallbacks_orderbyType = config.DownloadQueueFailedCallbacks_orderbyType || 'str';
        this.DownloadQueueFailedCallbacks_expand = config.DownloadQueueFailedCallbacks_expand;
        this.DownloadQueueFailedCallbacks_expandType = config.DownloadQueueFailedCallbacks_expandType || 'str';
        this.GetQueuePerformanceOverviewData_periodFrom = config.GetQueuePerformanceOverviewData_periodFrom;
        this.GetQueuePerformanceOverviewData_periodFromType = config.GetQueuePerformanceOverviewData_periodFromType || 'str';
        this.GetQueuePerformanceOverviewData_periodTo = config.GetQueuePerformanceOverviewData_periodTo;
        this.GetQueuePerformanceOverviewData_periodToType = config.GetQueuePerformanceOverviewData_periodToType || 'str';
        this.GetQueuePerformanceOverviewData_queueDns = config.GetQueuePerformanceOverviewData_queueDns;
        this.GetQueuePerformanceOverviewData_queueDnsType = config.GetQueuePerformanceOverviewData_queueDnsType || 'str';
        this.GetQueuePerformanceOverviewData_waitInterval = config.GetQueuePerformanceOverviewData_waitInterval;
        this.GetQueuePerformanceOverviewData_waitIntervalType = config.GetQueuePerformanceOverviewData_waitIntervalType || 'str';
        this.GetQueuePerformanceOverviewData_top = config.GetQueuePerformanceOverviewData_top;
        this.GetQueuePerformanceOverviewData_topType = config.GetQueuePerformanceOverviewData_topType || 'str';
        this.GetQueuePerformanceOverviewData_skip = config.GetQueuePerformanceOverviewData_skip;
        this.GetQueuePerformanceOverviewData_skipType = config.GetQueuePerformanceOverviewData_skipType || 'str';
        this.GetQueuePerformanceOverviewData_search = config.GetQueuePerformanceOverviewData_search;
        this.GetQueuePerformanceOverviewData_searchType = config.GetQueuePerformanceOverviewData_searchType || 'str';
        this.GetQueuePerformanceOverviewData_filter = config.GetQueuePerformanceOverviewData_filter;
        this.GetQueuePerformanceOverviewData_filterType = config.GetQueuePerformanceOverviewData_filterType || 'str';
        this.GetQueuePerformanceOverviewData_count = config.GetQueuePerformanceOverviewData_count;
        this.GetQueuePerformanceOverviewData_countType = config.GetQueuePerformanceOverviewData_countType || 'str';
        this.GetQueuePerformanceOverviewData_select = config.GetQueuePerformanceOverviewData_select;
        this.GetQueuePerformanceOverviewData_selectType = config.GetQueuePerformanceOverviewData_selectType || 'str';
        this.GetQueuePerformanceOverviewData_orderby = config.GetQueuePerformanceOverviewData_orderby;
        this.GetQueuePerformanceOverviewData_orderbyType = config.GetQueuePerformanceOverviewData_orderbyType || 'str';
        this.GetQueuePerformanceOverviewData_expand = config.GetQueuePerformanceOverviewData_expand;
        this.GetQueuePerformanceOverviewData_expandType = config.GetQueuePerformanceOverviewData_expandType || 'str';
        this.DownloadQueuePerformanceOverview_periodFrom = config.DownloadQueuePerformanceOverview_periodFrom;
        this.DownloadQueuePerformanceOverview_periodFromType = config.DownloadQueuePerformanceOverview_periodFromType || 'str';
        this.DownloadQueuePerformanceOverview_periodTo = config.DownloadQueuePerformanceOverview_periodTo;
        this.DownloadQueuePerformanceOverview_periodToType = config.DownloadQueuePerformanceOverview_periodToType || 'str';
        this.DownloadQueuePerformanceOverview_queueDns = config.DownloadQueuePerformanceOverview_queueDns;
        this.DownloadQueuePerformanceOverview_queueDnsType = config.DownloadQueuePerformanceOverview_queueDnsType || 'str';
        this.DownloadQueuePerformanceOverview_waitInterval = config.DownloadQueuePerformanceOverview_waitInterval;
        this.DownloadQueuePerformanceOverview_waitIntervalType = config.DownloadQueuePerformanceOverview_waitIntervalType || 'str';
        this.DownloadQueuePerformanceOverview_top = config.DownloadQueuePerformanceOverview_top;
        this.DownloadQueuePerformanceOverview_topType = config.DownloadQueuePerformanceOverview_topType || 'str';
        this.DownloadQueuePerformanceOverview_skip = config.DownloadQueuePerformanceOverview_skip;
        this.DownloadQueuePerformanceOverview_skipType = config.DownloadQueuePerformanceOverview_skipType || 'str';
        this.DownloadQueuePerformanceOverview_search = config.DownloadQueuePerformanceOverview_search;
        this.DownloadQueuePerformanceOverview_searchType = config.DownloadQueuePerformanceOverview_searchType || 'str';
        this.DownloadQueuePerformanceOverview_filter = config.DownloadQueuePerformanceOverview_filter;
        this.DownloadQueuePerformanceOverview_filterType = config.DownloadQueuePerformanceOverview_filterType || 'str';
        this.DownloadQueuePerformanceOverview_count = config.DownloadQueuePerformanceOverview_count;
        this.DownloadQueuePerformanceOverview_countType = config.DownloadQueuePerformanceOverview_countType || 'str';
        this.DownloadQueuePerformanceOverview_select = config.DownloadQueuePerformanceOverview_select;
        this.DownloadQueuePerformanceOverview_selectType = config.DownloadQueuePerformanceOverview_selectType || 'str';
        this.DownloadQueuePerformanceOverview_orderby = config.DownloadQueuePerformanceOverview_orderby;
        this.DownloadQueuePerformanceOverview_orderbyType = config.DownloadQueuePerformanceOverview_orderbyType || 'str';
        this.DownloadQueuePerformanceOverview_expand = config.DownloadQueuePerformanceOverview_expand;
        this.DownloadQueuePerformanceOverview_expandType = config.DownloadQueuePerformanceOverview_expandType || 'str';
        this.GetQueuePerformanceTotalsData_periodFrom = config.GetQueuePerformanceTotalsData_periodFrom;
        this.GetQueuePerformanceTotalsData_periodFromType = config.GetQueuePerformanceTotalsData_periodFromType || 'str';
        this.GetQueuePerformanceTotalsData_periodTo = config.GetQueuePerformanceTotalsData_periodTo;
        this.GetQueuePerformanceTotalsData_periodToType = config.GetQueuePerformanceTotalsData_periodToType || 'str';
        this.GetQueuePerformanceTotalsData_queueDns = config.GetQueuePerformanceTotalsData_queueDns;
        this.GetQueuePerformanceTotalsData_queueDnsType = config.GetQueuePerformanceTotalsData_queueDnsType || 'str';
        this.GetQueuePerformanceTotalsData_waitInterval = config.GetQueuePerformanceTotalsData_waitInterval;
        this.GetQueuePerformanceTotalsData_waitIntervalType = config.GetQueuePerformanceTotalsData_waitIntervalType || 'str';
        this.GetQueuePerformanceTotalsData_top = config.GetQueuePerformanceTotalsData_top;
        this.GetQueuePerformanceTotalsData_topType = config.GetQueuePerformanceTotalsData_topType || 'str';
        this.GetQueuePerformanceTotalsData_skip = config.GetQueuePerformanceTotalsData_skip;
        this.GetQueuePerformanceTotalsData_skipType = config.GetQueuePerformanceTotalsData_skipType || 'str';
        this.GetQueuePerformanceTotalsData_search = config.GetQueuePerformanceTotalsData_search;
        this.GetQueuePerformanceTotalsData_searchType = config.GetQueuePerformanceTotalsData_searchType || 'str';
        this.GetQueuePerformanceTotalsData_filter = config.GetQueuePerformanceTotalsData_filter;
        this.GetQueuePerformanceTotalsData_filterType = config.GetQueuePerformanceTotalsData_filterType || 'str';
        this.GetQueuePerformanceTotalsData_count = config.GetQueuePerformanceTotalsData_count;
        this.GetQueuePerformanceTotalsData_countType = config.GetQueuePerformanceTotalsData_countType || 'str';
        this.GetQueuePerformanceTotalsData_select = config.GetQueuePerformanceTotalsData_select;
        this.GetQueuePerformanceTotalsData_selectType = config.GetQueuePerformanceTotalsData_selectType || 'str';
        this.GetQueuePerformanceTotalsData_orderby = config.GetQueuePerformanceTotalsData_orderby;
        this.GetQueuePerformanceTotalsData_orderbyType = config.GetQueuePerformanceTotalsData_orderbyType || 'str';
        this.GetQueuePerformanceTotalsData_expand = config.GetQueuePerformanceTotalsData_expand;
        this.GetQueuePerformanceTotalsData_expandType = config.GetQueuePerformanceTotalsData_expandType || 'str';
        this.DownloadQueuePerformanceTotals_periodFrom = config.DownloadQueuePerformanceTotals_periodFrom;
        this.DownloadQueuePerformanceTotals_periodFromType = config.DownloadQueuePerformanceTotals_periodFromType || 'str';
        this.DownloadQueuePerformanceTotals_periodTo = config.DownloadQueuePerformanceTotals_periodTo;
        this.DownloadQueuePerformanceTotals_periodToType = config.DownloadQueuePerformanceTotals_periodToType || 'str';
        this.DownloadQueuePerformanceTotals_queueDns = config.DownloadQueuePerformanceTotals_queueDns;
        this.DownloadQueuePerformanceTotals_queueDnsType = config.DownloadQueuePerformanceTotals_queueDnsType || 'str';
        this.DownloadQueuePerformanceTotals_waitInterval = config.DownloadQueuePerformanceTotals_waitInterval;
        this.DownloadQueuePerformanceTotals_waitIntervalType = config.DownloadQueuePerformanceTotals_waitIntervalType || 'str';
        this.DownloadQueuePerformanceTotals_top = config.DownloadQueuePerformanceTotals_top;
        this.DownloadQueuePerformanceTotals_topType = config.DownloadQueuePerformanceTotals_topType || 'str';
        this.DownloadQueuePerformanceTotals_skip = config.DownloadQueuePerformanceTotals_skip;
        this.DownloadQueuePerformanceTotals_skipType = config.DownloadQueuePerformanceTotals_skipType || 'str';
        this.DownloadQueuePerformanceTotals_search = config.DownloadQueuePerformanceTotals_search;
        this.DownloadQueuePerformanceTotals_searchType = config.DownloadQueuePerformanceTotals_searchType || 'str';
        this.DownloadQueuePerformanceTotals_filter = config.DownloadQueuePerformanceTotals_filter;
        this.DownloadQueuePerformanceTotals_filterType = config.DownloadQueuePerformanceTotals_filterType || 'str';
        this.DownloadQueuePerformanceTotals_count = config.DownloadQueuePerformanceTotals_count;
        this.DownloadQueuePerformanceTotals_countType = config.DownloadQueuePerformanceTotals_countType || 'str';
        this.DownloadQueuePerformanceTotals_select = config.DownloadQueuePerformanceTotals_select;
        this.DownloadQueuePerformanceTotals_selectType = config.DownloadQueuePerformanceTotals_selectType || 'str';
        this.DownloadQueuePerformanceTotals_orderby = config.DownloadQueuePerformanceTotals_orderby;
        this.DownloadQueuePerformanceTotals_orderbyType = config.DownloadQueuePerformanceTotals_orderbyType || 'str';
        this.DownloadQueuePerformanceTotals_expand = config.DownloadQueuePerformanceTotals_expand;
        this.DownloadQueuePerformanceTotals_expandType = config.DownloadQueuePerformanceTotals_expandType || 'str';
        this.GetRingGroupStatisticsData_periodFrom = config.GetRingGroupStatisticsData_periodFrom;
        this.GetRingGroupStatisticsData_periodFromType = config.GetRingGroupStatisticsData_periodFromType || 'str';
        this.GetRingGroupStatisticsData_periodTo = config.GetRingGroupStatisticsData_periodTo;
        this.GetRingGroupStatisticsData_periodToType = config.GetRingGroupStatisticsData_periodToType || 'str';
        this.GetRingGroupStatisticsData_ringGroupDns = config.GetRingGroupStatisticsData_ringGroupDns;
        this.GetRingGroupStatisticsData_ringGroupDnsType = config.GetRingGroupStatisticsData_ringGroupDnsType || 'str';
        this.GetRingGroupStatisticsData_top = config.GetRingGroupStatisticsData_top;
        this.GetRingGroupStatisticsData_topType = config.GetRingGroupStatisticsData_topType || 'str';
        this.GetRingGroupStatisticsData_skip = config.GetRingGroupStatisticsData_skip;
        this.GetRingGroupStatisticsData_skipType = config.GetRingGroupStatisticsData_skipType || 'str';
        this.GetRingGroupStatisticsData_search = config.GetRingGroupStatisticsData_search;
        this.GetRingGroupStatisticsData_searchType = config.GetRingGroupStatisticsData_searchType || 'str';
        this.GetRingGroupStatisticsData_filter = config.GetRingGroupStatisticsData_filter;
        this.GetRingGroupStatisticsData_filterType = config.GetRingGroupStatisticsData_filterType || 'str';
        this.GetRingGroupStatisticsData_count = config.GetRingGroupStatisticsData_count;
        this.GetRingGroupStatisticsData_countType = config.GetRingGroupStatisticsData_countType || 'str';
        this.GetRingGroupStatisticsData_select = config.GetRingGroupStatisticsData_select;
        this.GetRingGroupStatisticsData_selectType = config.GetRingGroupStatisticsData_selectType || 'str';
        this.GetRingGroupStatisticsData_orderby = config.GetRingGroupStatisticsData_orderby;
        this.GetRingGroupStatisticsData_orderbyType = config.GetRingGroupStatisticsData_orderbyType || 'str';
        this.GetRingGroupStatisticsData_expand = config.GetRingGroupStatisticsData_expand;
        this.GetRingGroupStatisticsData_expandType = config.GetRingGroupStatisticsData_expandType || 'str';
        this.DownloadRingGroupStatistics_periodFrom = config.DownloadRingGroupStatistics_periodFrom;
        this.DownloadRingGroupStatistics_periodFromType = config.DownloadRingGroupStatistics_periodFromType || 'str';
        this.DownloadRingGroupStatistics_periodTo = config.DownloadRingGroupStatistics_periodTo;
        this.DownloadRingGroupStatistics_periodToType = config.DownloadRingGroupStatistics_periodToType || 'str';
        this.DownloadRingGroupStatistics_ringGroupDns = config.DownloadRingGroupStatistics_ringGroupDns;
        this.DownloadRingGroupStatistics_ringGroupDnsType = config.DownloadRingGroupStatistics_ringGroupDnsType || 'str';
        this.DownloadRingGroupStatistics_top = config.DownloadRingGroupStatistics_top;
        this.DownloadRingGroupStatistics_topType = config.DownloadRingGroupStatistics_topType || 'str';
        this.DownloadRingGroupStatistics_skip = config.DownloadRingGroupStatistics_skip;
        this.DownloadRingGroupStatistics_skipType = config.DownloadRingGroupStatistics_skipType || 'str';
        this.DownloadRingGroupStatistics_search = config.DownloadRingGroupStatistics_search;
        this.DownloadRingGroupStatistics_searchType = config.DownloadRingGroupStatistics_searchType || 'str';
        this.DownloadRingGroupStatistics_filter = config.DownloadRingGroupStatistics_filter;
        this.DownloadRingGroupStatistics_filterType = config.DownloadRingGroupStatistics_filterType || 'str';
        this.DownloadRingGroupStatistics_count = config.DownloadRingGroupStatistics_count;
        this.DownloadRingGroupStatistics_countType = config.DownloadRingGroupStatistics_countType || 'str';
        this.DownloadRingGroupStatistics_select = config.DownloadRingGroupStatistics_select;
        this.DownloadRingGroupStatistics_selectType = config.DownloadRingGroupStatistics_selectType || 'str';
        this.DownloadRingGroupStatistics_orderby = config.DownloadRingGroupStatistics_orderby;
        this.DownloadRingGroupStatistics_orderbyType = config.DownloadRingGroupStatistics_orderbyType || 'str';
        this.DownloadRingGroupStatistics_expand = config.DownloadRingGroupStatistics_expand;
        this.DownloadRingGroupStatistics_expandType = config.DownloadRingGroupStatistics_expandType || 'str';
        this.GetStatisticSlaData_queueDnStr = config.GetStatisticSlaData_queueDnStr;
        this.GetStatisticSlaData_queueDnStrType = config.GetStatisticSlaData_queueDnStrType || 'str';
        this.GetStatisticSlaData_startDt = config.GetStatisticSlaData_startDt;
        this.GetStatisticSlaData_startDtType = config.GetStatisticSlaData_startDtType || 'str';
        this.GetStatisticSlaData_endDt = config.GetStatisticSlaData_endDt;
        this.GetStatisticSlaData_endDtType = config.GetStatisticSlaData_endDtType || 'str';
        this.GetStatisticSlaData_waitInterval = config.GetStatisticSlaData_waitInterval;
        this.GetStatisticSlaData_waitIntervalType = config.GetStatisticSlaData_waitIntervalType || 'str';
        this.GetStatisticSlaData_top = config.GetStatisticSlaData_top;
        this.GetStatisticSlaData_topType = config.GetStatisticSlaData_topType || 'str';
        this.GetStatisticSlaData_skip = config.GetStatisticSlaData_skip;
        this.GetStatisticSlaData_skipType = config.GetStatisticSlaData_skipType || 'str';
        this.GetStatisticSlaData_search = config.GetStatisticSlaData_search;
        this.GetStatisticSlaData_searchType = config.GetStatisticSlaData_searchType || 'str';
        this.GetStatisticSlaData_filter = config.GetStatisticSlaData_filter;
        this.GetStatisticSlaData_filterType = config.GetStatisticSlaData_filterType || 'str';
        this.GetStatisticSlaData_count = config.GetStatisticSlaData_count;
        this.GetStatisticSlaData_countType = config.GetStatisticSlaData_countType || 'str';
        this.GetStatisticSlaData_select = config.GetStatisticSlaData_select;
        this.GetStatisticSlaData_selectType = config.GetStatisticSlaData_selectType || 'str';
        this.GetStatisticSlaData_orderby = config.GetStatisticSlaData_orderby;
        this.GetStatisticSlaData_orderbyType = config.GetStatisticSlaData_orderbyType || 'str';
        this.GetStatisticSlaData_expand = config.GetStatisticSlaData_expand;
        this.GetStatisticSlaData_expandType = config.GetStatisticSlaData_expandType || 'str';
        this.DownloadStatisticSla_queueDnStr = config.DownloadStatisticSla_queueDnStr;
        this.DownloadStatisticSla_queueDnStrType = config.DownloadStatisticSla_queueDnStrType || 'str';
        this.DownloadStatisticSla_startDt = config.DownloadStatisticSla_startDt;
        this.DownloadStatisticSla_startDtType = config.DownloadStatisticSla_startDtType || 'str';
        this.DownloadStatisticSla_endDt = config.DownloadStatisticSla_endDt;
        this.DownloadStatisticSla_endDtType = config.DownloadStatisticSla_endDtType || 'str';
        this.DownloadStatisticSla_waitInterval = config.DownloadStatisticSla_waitInterval;
        this.DownloadStatisticSla_waitIntervalType = config.DownloadStatisticSla_waitIntervalType || 'str';
        this.DownloadStatisticSla_top = config.DownloadStatisticSla_top;
        this.DownloadStatisticSla_topType = config.DownloadStatisticSla_topType || 'str';
        this.DownloadStatisticSla_skip = config.DownloadStatisticSla_skip;
        this.DownloadStatisticSla_skipType = config.DownloadStatisticSla_skipType || 'str';
        this.DownloadStatisticSla_search = config.DownloadStatisticSla_search;
        this.DownloadStatisticSla_searchType = config.DownloadStatisticSla_searchType || 'str';
        this.DownloadStatisticSla_filter = config.DownloadStatisticSla_filter;
        this.DownloadStatisticSla_filterType = config.DownloadStatisticSla_filterType || 'str';
        this.DownloadStatisticSla_count = config.DownloadStatisticSla_count;
        this.DownloadStatisticSla_countType = config.DownloadStatisticSla_countType || 'str';
        this.DownloadStatisticSla_select = config.DownloadStatisticSla_select;
        this.DownloadStatisticSla_selectType = config.DownloadStatisticSla_selectType || 'str';
        this.DownloadStatisticSla_orderby = config.DownloadStatisticSla_orderby;
        this.DownloadStatisticSla_orderbyType = config.DownloadStatisticSla_orderbyType || 'str';
        this.DownloadStatisticSla_expand = config.DownloadStatisticSla_expand;
        this.DownloadStatisticSla_expandType = config.DownloadStatisticSla_expandType || 'str';
        this.GetTeamQueueGeneralStatisticsData_queueDnStr = config.GetTeamQueueGeneralStatisticsData_queueDnStr;
        this.GetTeamQueueGeneralStatisticsData_queueDnStrType = config.GetTeamQueueGeneralStatisticsData_queueDnStrType || 'str';
        this.GetTeamQueueGeneralStatisticsData_startDt = config.GetTeamQueueGeneralStatisticsData_startDt;
        this.GetTeamQueueGeneralStatisticsData_startDtType = config.GetTeamQueueGeneralStatisticsData_startDtType || 'str';
        this.GetTeamQueueGeneralStatisticsData_endDt = config.GetTeamQueueGeneralStatisticsData_endDt;
        this.GetTeamQueueGeneralStatisticsData_endDtType = config.GetTeamQueueGeneralStatisticsData_endDtType || 'str';
        this.GetTeamQueueGeneralStatisticsData_waitInterval = config.GetTeamQueueGeneralStatisticsData_waitInterval;
        this.GetTeamQueueGeneralStatisticsData_waitIntervalType = config.GetTeamQueueGeneralStatisticsData_waitIntervalType || 'str';
        this.GetTeamQueueGeneralStatisticsData_top = config.GetTeamQueueGeneralStatisticsData_top;
        this.GetTeamQueueGeneralStatisticsData_topType = config.GetTeamQueueGeneralStatisticsData_topType || 'str';
        this.GetTeamQueueGeneralStatisticsData_skip = config.GetTeamQueueGeneralStatisticsData_skip;
        this.GetTeamQueueGeneralStatisticsData_skipType = config.GetTeamQueueGeneralStatisticsData_skipType || 'str';
        this.GetTeamQueueGeneralStatisticsData_search = config.GetTeamQueueGeneralStatisticsData_search;
        this.GetTeamQueueGeneralStatisticsData_searchType = config.GetTeamQueueGeneralStatisticsData_searchType || 'str';
        this.GetTeamQueueGeneralStatisticsData_filter = config.GetTeamQueueGeneralStatisticsData_filter;
        this.GetTeamQueueGeneralStatisticsData_filterType = config.GetTeamQueueGeneralStatisticsData_filterType || 'str';
        this.GetTeamQueueGeneralStatisticsData_count = config.GetTeamQueueGeneralStatisticsData_count;
        this.GetTeamQueueGeneralStatisticsData_countType = config.GetTeamQueueGeneralStatisticsData_countType || 'str';
        this.GetTeamQueueGeneralStatisticsData_select = config.GetTeamQueueGeneralStatisticsData_select;
        this.GetTeamQueueGeneralStatisticsData_selectType = config.GetTeamQueueGeneralStatisticsData_selectType || 'str';
        this.GetTeamQueueGeneralStatisticsData_orderby = config.GetTeamQueueGeneralStatisticsData_orderby;
        this.GetTeamQueueGeneralStatisticsData_orderbyType = config.GetTeamQueueGeneralStatisticsData_orderbyType || 'str';
        this.GetTeamQueueGeneralStatisticsData_expand = config.GetTeamQueueGeneralStatisticsData_expand;
        this.GetTeamQueueGeneralStatisticsData_expandType = config.GetTeamQueueGeneralStatisticsData_expandType || 'str';
        this.DownloadTeamQueueGeneralStatistics_queueDnStr = config.DownloadTeamQueueGeneralStatistics_queueDnStr;
        this.DownloadTeamQueueGeneralStatistics_queueDnStrType = config.DownloadTeamQueueGeneralStatistics_queueDnStrType || 'str';
        this.DownloadTeamQueueGeneralStatistics_startDt = config.DownloadTeamQueueGeneralStatistics_startDt;
        this.DownloadTeamQueueGeneralStatistics_startDtType = config.DownloadTeamQueueGeneralStatistics_startDtType || 'str';
        this.DownloadTeamQueueGeneralStatistics_endDt = config.DownloadTeamQueueGeneralStatistics_endDt;
        this.DownloadTeamQueueGeneralStatistics_endDtType = config.DownloadTeamQueueGeneralStatistics_endDtType || 'str';
        this.DownloadTeamQueueGeneralStatistics_waitInterval = config.DownloadTeamQueueGeneralStatistics_waitInterval;
        this.DownloadTeamQueueGeneralStatistics_waitIntervalType = config.DownloadTeamQueueGeneralStatistics_waitIntervalType || 'str';
        this.DownloadTeamQueueGeneralStatistics_top = config.DownloadTeamQueueGeneralStatistics_top;
        this.DownloadTeamQueueGeneralStatistics_topType = config.DownloadTeamQueueGeneralStatistics_topType || 'str';
        this.DownloadTeamQueueGeneralStatistics_skip = config.DownloadTeamQueueGeneralStatistics_skip;
        this.DownloadTeamQueueGeneralStatistics_skipType = config.DownloadTeamQueueGeneralStatistics_skipType || 'str';
        this.DownloadTeamQueueGeneralStatistics_search = config.DownloadTeamQueueGeneralStatistics_search;
        this.DownloadTeamQueueGeneralStatistics_searchType = config.DownloadTeamQueueGeneralStatistics_searchType || 'str';
        this.DownloadTeamQueueGeneralStatistics_filter = config.DownloadTeamQueueGeneralStatistics_filter;
        this.DownloadTeamQueueGeneralStatistics_filterType = config.DownloadTeamQueueGeneralStatistics_filterType || 'str';
        this.DownloadTeamQueueGeneralStatistics_count = config.DownloadTeamQueueGeneralStatistics_count;
        this.DownloadTeamQueueGeneralStatistics_countType = config.DownloadTeamQueueGeneralStatistics_countType || 'str';
        this.DownloadTeamQueueGeneralStatistics_select = config.DownloadTeamQueueGeneralStatistics_select;
        this.DownloadTeamQueueGeneralStatistics_selectType = config.DownloadTeamQueueGeneralStatistics_selectType || 'str';
        this.DownloadTeamQueueGeneralStatistics_orderby = config.DownloadTeamQueueGeneralStatistics_orderby;
        this.DownloadTeamQueueGeneralStatistics_orderbyType = config.DownloadTeamQueueGeneralStatistics_orderbyType || 'str';
        this.DownloadTeamQueueGeneralStatistics_expand = config.DownloadTeamQueueGeneralStatistics_expand;
        this.DownloadTeamQueueGeneralStatistics_expandType = config.DownloadTeamQueueGeneralStatistics_expandType || 'str';
        this.GetUserActivityData_chartDate = config.GetUserActivityData_chartDate;
        this.GetUserActivityData_chartDateType = config.GetUserActivityData_chartDateType || 'str';
        this.GetUserActivityData_chartBy = config.GetUserActivityData_chartBy;
        this.GetUserActivityData_chartByType = config.GetUserActivityData_chartByType || 'str';
        this.GetUserActivityData_includeInternalCalls = config.GetUserActivityData_includeInternalCalls;
        this.GetUserActivityData_includeInternalCallsType = config.GetUserActivityData_includeInternalCallsType || 'str';
        this.GetUserActivityData_includeQueueCalls = config.GetUserActivityData_includeQueueCalls;
        this.GetUserActivityData_includeQueueCallsType = config.GetUserActivityData_includeQueueCallsType || 'str';
        this.GetUserActivityData_queueDnStr = config.GetUserActivityData_queueDnStr;
        this.GetUserActivityData_queueDnStrType = config.GetUserActivityData_queueDnStrType || 'str';
        this.GetUserActivityData_clientTimeZone = config.GetUserActivityData_clientTimeZone;
        this.GetUserActivityData_clientTimeZoneType = config.GetUserActivityData_clientTimeZoneType || 'str';
        this.GetUserActivityData_waitInterval = config.GetUserActivityData_waitInterval;
        this.GetUserActivityData_waitIntervalType = config.GetUserActivityData_waitIntervalType || 'str';
        this.GetUserActivityData_top = config.GetUserActivityData_top;
        this.GetUserActivityData_topType = config.GetUserActivityData_topType || 'str';
        this.GetUserActivityData_skip = config.GetUserActivityData_skip;
        this.GetUserActivityData_skipType = config.GetUserActivityData_skipType || 'str';
        this.GetUserActivityData_search = config.GetUserActivityData_search;
        this.GetUserActivityData_searchType = config.GetUserActivityData_searchType || 'str';
        this.GetUserActivityData_filter = config.GetUserActivityData_filter;
        this.GetUserActivityData_filterType = config.GetUserActivityData_filterType || 'str';
        this.GetUserActivityData_count = config.GetUserActivityData_count;
        this.GetUserActivityData_countType = config.GetUserActivityData_countType || 'str';
        this.GetUserActivityData_select = config.GetUserActivityData_select;
        this.GetUserActivityData_selectType = config.GetUserActivityData_selectType || 'str';
        this.GetUserActivityData_orderby = config.GetUserActivityData_orderby;
        this.GetUserActivityData_orderbyType = config.GetUserActivityData_orderbyType || 'str';
        this.GetUserActivityData_expand = config.GetUserActivityData_expand;
        this.GetUserActivityData_expandType = config.GetUserActivityData_expandType || 'str';
        this.DownloadUserActivityReport_chartDate = config.DownloadUserActivityReport_chartDate;
        this.DownloadUserActivityReport_chartDateType = config.DownloadUserActivityReport_chartDateType || 'str';
        this.DownloadUserActivityReport_chartBy = config.DownloadUserActivityReport_chartBy;
        this.DownloadUserActivityReport_chartByType = config.DownloadUserActivityReport_chartByType || 'str';
        this.DownloadUserActivityReport_includeInternalCalls = config.DownloadUserActivityReport_includeInternalCalls;
        this.DownloadUserActivityReport_includeInternalCallsType = config.DownloadUserActivityReport_includeInternalCallsType || 'str';
        this.DownloadUserActivityReport_includeQueueCalls = config.DownloadUserActivityReport_includeQueueCalls;
        this.DownloadUserActivityReport_includeQueueCallsType = config.DownloadUserActivityReport_includeQueueCallsType || 'str';
        this.DownloadUserActivityReport_queueDnStr = config.DownloadUserActivityReport_queueDnStr;
        this.DownloadUserActivityReport_queueDnStrType = config.DownloadUserActivityReport_queueDnStrType || 'str';
        this.DownloadUserActivityReport_clientTimeZone = config.DownloadUserActivityReport_clientTimeZone;
        this.DownloadUserActivityReport_clientTimeZoneType = config.DownloadUserActivityReport_clientTimeZoneType || 'str';
        this.DownloadUserActivityReport_waitInterval = config.DownloadUserActivityReport_waitInterval;
        this.DownloadUserActivityReport_waitIntervalType = config.DownloadUserActivityReport_waitIntervalType || 'str';
        this.DownloadUserActivityReport_top = config.DownloadUserActivityReport_top;
        this.DownloadUserActivityReport_topType = config.DownloadUserActivityReport_topType || 'str';
        this.DownloadUserActivityReport_skip = config.DownloadUserActivityReport_skip;
        this.DownloadUserActivityReport_skipType = config.DownloadUserActivityReport_skipType || 'str';
        this.DownloadUserActivityReport_search = config.DownloadUserActivityReport_search;
        this.DownloadUserActivityReport_searchType = config.DownloadUserActivityReport_searchType || 'str';
        this.DownloadUserActivityReport_filter = config.DownloadUserActivityReport_filter;
        this.DownloadUserActivityReport_filterType = config.DownloadUserActivityReport_filterType || 'str';
        this.DownloadUserActivityReport_count = config.DownloadUserActivityReport_count;
        this.DownloadUserActivityReport_countType = config.DownloadUserActivityReport_countType || 'str';
        this.DownloadUserActivityReport_select = config.DownloadUserActivityReport_select;
        this.DownloadUserActivityReport_selectType = config.DownloadUserActivityReport_selectType || 'str';
        this.DownloadUserActivityReport_orderby = config.DownloadUserActivityReport_orderby;
        this.DownloadUserActivityReport_orderbyType = config.DownloadUserActivityReport_orderbyType || 'str';
        this.DownloadUserActivityReport_expand = config.DownloadUserActivityReport_expand;
        this.DownloadUserActivityReport_expandType = config.DownloadUserActivityReport_expandType || 'str';
        this.ListScheduledReport_top = config.ListScheduledReport_top;
        this.ListScheduledReport_topType = config.ListScheduledReport_topType || 'str';
        this.ListScheduledReport_skip = config.ListScheduledReport_skip;
        this.ListScheduledReport_skipType = config.ListScheduledReport_skipType || 'str';
        this.ListScheduledReport_search = config.ListScheduledReport_search;
        this.ListScheduledReport_searchType = config.ListScheduledReport_searchType || 'str';
        this.ListScheduledReport_filter = config.ListScheduledReport_filter;
        this.ListScheduledReport_filterType = config.ListScheduledReport_filterType || 'str';
        this.ListScheduledReport_count = config.ListScheduledReport_count;
        this.ListScheduledReport_countType = config.ListScheduledReport_countType || 'str';
        this.ListScheduledReport_orderby = config.ListScheduledReport_orderby;
        this.ListScheduledReport_orderbyType = config.ListScheduledReport_orderbyType || 'str';
        this.ListScheduledReport_select = config.ListScheduledReport_select;
        this.ListScheduledReport_selectType = config.ListScheduledReport_selectType || 'str';
        this.ListScheduledReport_expand = config.ListScheduledReport_expand;
        this.ListScheduledReport_expandType = config.ListScheduledReport_expandType || 'str';
        this.CreateScheduledReport_body = config.CreateScheduledReport_body;
        this.CreateScheduledReport_bodyType = config.CreateScheduledReport_bodyType || 'str';
        this.GetScheduledReport_id = config.GetScheduledReport_id;
        this.GetScheduledReport_idType = config.GetScheduledReport_idType || 'str';
        this.GetScheduledReport_select = config.GetScheduledReport_select;
        this.GetScheduledReport_selectType = config.GetScheduledReport_selectType || 'str';
        this.GetScheduledReport_expand = config.GetScheduledReport_expand;
        this.GetScheduledReport_expandType = config.GetScheduledReport_expandType || 'str';
        this.UpdateScheduledReport_id = config.UpdateScheduledReport_id;
        this.UpdateScheduledReport_idType = config.UpdateScheduledReport_idType || 'str';
        this.UpdateScheduledReport_body = config.UpdateScheduledReport_body;
        this.UpdateScheduledReport_bodyType = config.UpdateScheduledReport_bodyType || 'str';
        this.DeleteScheduledReport_id = config.DeleteScheduledReport_id;
        this.DeleteScheduledReport_idType = config.DeleteScheduledReport_idType || 'str';
        this.DeleteScheduledReport_ifMatch = config.DeleteScheduledReport_ifMatch;
        this.DeleteScheduledReport_ifMatchType = config.DeleteScheduledReport_ifMatchType || 'str';
        this.ListRingGroupMembers_id = config.ListRingGroupMembers_id;
        this.ListRingGroupMembers_idType = config.ListRingGroupMembers_idType || 'str';
        this.ListRingGroupMembers_top = config.ListRingGroupMembers_top;
        this.ListRingGroupMembers_topType = config.ListRingGroupMembers_topType || 'str';
        this.ListRingGroupMembers_skip = config.ListRingGroupMembers_skip;
        this.ListRingGroupMembers_skipType = config.ListRingGroupMembers_skipType || 'str';
        this.ListRingGroupMembers_search = config.ListRingGroupMembers_search;
        this.ListRingGroupMembers_searchType = config.ListRingGroupMembers_searchType || 'str';
        this.ListRingGroupMembers_filter = config.ListRingGroupMembers_filter;
        this.ListRingGroupMembers_filterType = config.ListRingGroupMembers_filterType || 'str';
        this.ListRingGroupMembers_count = config.ListRingGroupMembers_count;
        this.ListRingGroupMembers_countType = config.ListRingGroupMembers_countType || 'str';
        this.ListRingGroupMembers_orderby = config.ListRingGroupMembers_orderby;
        this.ListRingGroupMembers_orderbyType = config.ListRingGroupMembers_orderbyType || 'str';
        this.ListRingGroupMembers_select = config.ListRingGroupMembers_select;
        this.ListRingGroupMembers_selectType = config.ListRingGroupMembers_selectType || 'str';
        this.ListRingGroupMembers_expand = config.ListRingGroupMembers_expand;
        this.ListRingGroupMembers_expandType = config.ListRingGroupMembers_expandType || 'str';
        this.GetRingGroupByNumber_number = config.GetRingGroupByNumber_number;
        this.GetRingGroupByNumber_numberType = config.GetRingGroupByNumber_numberType || 'str';
        this.ListRingGroup_top = config.ListRingGroup_top;
        this.ListRingGroup_topType = config.ListRingGroup_topType || 'str';
        this.ListRingGroup_skip = config.ListRingGroup_skip;
        this.ListRingGroup_skipType = config.ListRingGroup_skipType || 'str';
        this.ListRingGroup_search = config.ListRingGroup_search;
        this.ListRingGroup_searchType = config.ListRingGroup_searchType || 'str';
        this.ListRingGroup_filter = config.ListRingGroup_filter;
        this.ListRingGroup_filterType = config.ListRingGroup_filterType || 'str';
        this.ListRingGroup_count = config.ListRingGroup_count;
        this.ListRingGroup_countType = config.ListRingGroup_countType || 'str';
        this.ListRingGroup_orderby = config.ListRingGroup_orderby;
        this.ListRingGroup_orderbyType = config.ListRingGroup_orderbyType || 'str';
        this.ListRingGroup_select = config.ListRingGroup_select;
        this.ListRingGroup_selectType = config.ListRingGroup_selectType || 'str';
        this.ListRingGroup_expand = config.ListRingGroup_expand;
        this.ListRingGroup_expandType = config.ListRingGroup_expandType || 'str';
        this.CreateRingGroup_body = config.CreateRingGroup_body;
        this.CreateRingGroup_bodyType = config.CreateRingGroup_bodyType || 'str';
        this.GetRingGroup_id = config.GetRingGroup_id;
        this.GetRingGroup_idType = config.GetRingGroup_idType || 'str';
        this.GetRingGroup_select = config.GetRingGroup_select;
        this.GetRingGroup_selectType = config.GetRingGroup_selectType || 'str';
        this.GetRingGroup_expand = config.GetRingGroup_expand;
        this.GetRingGroup_expandType = config.GetRingGroup_expandType || 'str';
        this.UpdateRingGroup_id = config.UpdateRingGroup_id;
        this.UpdateRingGroup_idType = config.UpdateRingGroup_idType || 'str';
        this.UpdateRingGroup_body = config.UpdateRingGroup_body;
        this.UpdateRingGroup_bodyType = config.UpdateRingGroup_bodyType || 'str';
        this.DeleteRingGroup_id = config.DeleteRingGroup_id;
        this.DeleteRingGroup_idType = config.DeleteRingGroup_idType || 'str';
        this.DeleteRingGroup_ifMatch = config.DeleteRingGroup_ifMatch;
        this.DeleteRingGroup_ifMatchType = config.DeleteRingGroup_ifMatchType || 'str';
        this.GetSbc_name = config.GetSbc_name;
        this.GetSbc_nameType = config.GetSbc_nameType || 'str';
        this.GetSbc_select = config.GetSbc_select;
        this.GetSbc_selectType = config.GetSbc_selectType || 'str';
        this.GetSbc_expand = config.GetSbc_expand;
        this.GetSbc_expandType = config.GetSbc_expandType || 'str';
        this.UpdateSbc_name = config.UpdateSbc_name;
        this.UpdateSbc_nameType = config.UpdateSbc_nameType || 'str';
        this.UpdateSbc_body = config.UpdateSbc_body;
        this.UpdateSbc_bodyType = config.UpdateSbc_bodyType || 'str';
        this.DeleteSbc_name = config.DeleteSbc_name;
        this.DeleteSbc_nameType = config.DeleteSbc_nameType || 'str';
        this.DeleteSbc_ifMatch = config.DeleteSbc_ifMatch;
        this.DeleteSbc_ifMatchType = config.DeleteSbc_ifMatchType || 'str';
        this.ListSbc_top = config.ListSbc_top;
        this.ListSbc_topType = config.ListSbc_topType || 'str';
        this.ListSbc_skip = config.ListSbc_skip;
        this.ListSbc_skipType = config.ListSbc_skipType || 'str';
        this.ListSbc_search = config.ListSbc_search;
        this.ListSbc_searchType = config.ListSbc_searchType || 'str';
        this.ListSbc_filter = config.ListSbc_filter;
        this.ListSbc_filterType = config.ListSbc_filterType || 'str';
        this.ListSbc_count = config.ListSbc_count;
        this.ListSbc_countType = config.ListSbc_countType || 'str';
        this.ListSbc_orderby = config.ListSbc_orderby;
        this.ListSbc_orderbyType = config.ListSbc_orderbyType || 'str';
        this.ListSbc_select = config.ListSbc_select;
        this.ListSbc_selectType = config.ListSbc_selectType || 'str';
        this.ListSbc_expand = config.ListSbc_expand;
        this.ListSbc_expandType = config.ListSbc_expandType || 'str';
        this.CreateSbc_body = config.CreateSbc_body;
        this.CreateSbc_bodyType = config.CreateSbc_bodyType || 'str';
        this.GetSecureSipSettings_select = config.GetSecureSipSettings_select;
        this.GetSecureSipSettings_selectType = config.GetSecureSipSettings_selectType || 'str';
        this.GetSecureSipSettings_expand = config.GetSecureSipSettings_expand;
        this.GetSecureSipSettings_expandType = config.GetSecureSipSettings_expandType || 'str';
        this.UpdateSecureSipSettings_body = config.UpdateSecureSipSettings_body;
        this.UpdateSecureSipSettings_bodyType = config.UpdateSecureSipSettings_bodyType || 'str';
        this.ListSecurityRefreshToken_top = config.ListSecurityRefreshToken_top;
        this.ListSecurityRefreshToken_topType = config.ListSecurityRefreshToken_topType || 'str';
        this.ListSecurityRefreshToken_skip = config.ListSecurityRefreshToken_skip;
        this.ListSecurityRefreshToken_skipType = config.ListSecurityRefreshToken_skipType || 'str';
        this.ListSecurityRefreshToken_search = config.ListSecurityRefreshToken_search;
        this.ListSecurityRefreshToken_searchType = config.ListSecurityRefreshToken_searchType || 'str';
        this.ListSecurityRefreshToken_filter = config.ListSecurityRefreshToken_filter;
        this.ListSecurityRefreshToken_filterType = config.ListSecurityRefreshToken_filterType || 'str';
        this.ListSecurityRefreshToken_count = config.ListSecurityRefreshToken_count;
        this.ListSecurityRefreshToken_countType = config.ListSecurityRefreshToken_countType || 'str';
        this.ListSecurityRefreshToken_orderby = config.ListSecurityRefreshToken_orderby;
        this.ListSecurityRefreshToken_orderbyType = config.ListSecurityRefreshToken_orderbyType || 'str';
        this.ListSecurityRefreshToken_select = config.ListSecurityRefreshToken_select;
        this.ListSecurityRefreshToken_selectType = config.ListSecurityRefreshToken_selectType || 'str';
        this.ListSecurityRefreshToken_expand = config.ListSecurityRefreshToken_expand;
        this.ListSecurityRefreshToken_expandType = config.ListSecurityRefreshToken_expandType || 'str';
        this.RevokeSecurityToken_id = config.RevokeSecurityToken_id;
        this.RevokeSecurityToken_idType = config.RevokeSecurityToken_idType || 'str';
        this.ListServiceInfo_top = config.ListServiceInfo_top;
        this.ListServiceInfo_topType = config.ListServiceInfo_topType || 'str';
        this.ListServiceInfo_skip = config.ListServiceInfo_skip;
        this.ListServiceInfo_skipType = config.ListServiceInfo_skipType || 'str';
        this.ListServiceInfo_search = config.ListServiceInfo_search;
        this.ListServiceInfo_searchType = config.ListServiceInfo_searchType || 'str';
        this.ListServiceInfo_filter = config.ListServiceInfo_filter;
        this.ListServiceInfo_filterType = config.ListServiceInfo_filterType || 'str';
        this.ListServiceInfo_count = config.ListServiceInfo_count;
        this.ListServiceInfo_countType = config.ListServiceInfo_countType || 'str';
        this.ListServiceInfo_orderby = config.ListServiceInfo_orderby;
        this.ListServiceInfo_orderbyType = config.ListServiceInfo_orderbyType || 'str';
        this.ListServiceInfo_select = config.ListServiceInfo_select;
        this.ListServiceInfo_selectType = config.ListServiceInfo_selectType || 'str';
        this.ListServiceInfo_expand = config.ListServiceInfo_expand;
        this.ListServiceInfo_expandType = config.ListServiceInfo_expandType || 'str';
        this.GarbageCollect_body = config.GarbageCollect_body;
        this.GarbageCollect_bodyType = config.GarbageCollect_bodyType || 'str';
        this.Start_body = config.Start_body;
        this.Start_bodyType = config.Start_bodyType || 'str';
        this.Stop_body = config.Stop_body;
        this.Stop_bodyType = config.Stop_bodyType || 'str';
        this.Enable_body = config.Enable_body;
        this.Enable_bodyType = config.Enable_bodyType || 'str';
        this.Disable_body = config.Disable_body;
        this.Disable_bodyType = config.Disable_bodyType || 'str';
        this.Restart_body = config.Restart_body;
        this.Restart_bodyType = config.Restart_bodyType || 'str';
        this.ListSipDevice_top = config.ListSipDevice_top;
        this.ListSipDevice_topType = config.ListSipDevice_topType || 'str';
        this.ListSipDevice_skip = config.ListSipDevice_skip;
        this.ListSipDevice_skipType = config.ListSipDevice_skipType || 'str';
        this.ListSipDevice_search = config.ListSipDevice_search;
        this.ListSipDevice_searchType = config.ListSipDevice_searchType || 'str';
        this.ListSipDevice_filter = config.ListSipDevice_filter;
        this.ListSipDevice_filterType = config.ListSipDevice_filterType || 'str';
        this.ListSipDevice_count = config.ListSipDevice_count;
        this.ListSipDevice_countType = config.ListSipDevice_countType || 'str';
        this.ListSipDevice_orderby = config.ListSipDevice_orderby;
        this.ListSipDevice_orderbyType = config.ListSipDevice_orderbyType || 'str';
        this.ListSipDevice_select = config.ListSipDevice_select;
        this.ListSipDevice_selectType = config.ListSipDevice_selectType || 'str';
        this.ListSipDevice_expand = config.ListSipDevice_expand;
        this.ListSipDevice_expandType = config.ListSipDevice_expandType || 'str';
        this.GetDirectoryInfo_body = config.GetDirectoryInfo_body;
        this.GetDirectoryInfo_bodyType = config.GetDirectoryInfo_bodyType || 'str';
        this.GetSystemStatus_select = config.GetSystemStatus_select;
        this.GetSystemStatus_selectType = config.GetSystemStatus_selectType || 'str';
        this.GetSystemStatus_expand = config.GetSystemStatus_expand;
        this.GetSystemStatus_expandType = config.GetSystemStatus_expandType || 'str';
        this.SystemExtensions_top = config.SystemExtensions_top;
        this.SystemExtensions_topType = config.SystemExtensions_topType || 'str';
        this.SystemExtensions_skip = config.SystemExtensions_skip;
        this.SystemExtensions_skipType = config.SystemExtensions_skipType || 'str';
        this.SystemExtensions_search = config.SystemExtensions_search;
        this.SystemExtensions_searchType = config.SystemExtensions_searchType || 'str';
        this.SystemExtensions_filter = config.SystemExtensions_filter;
        this.SystemExtensions_filterType = config.SystemExtensions_filterType || 'str';
        this.SystemExtensions_count = config.SystemExtensions_count;
        this.SystemExtensions_countType = config.SystemExtensions_countType || 'str';
        this.SetChatLogStatus_body = config.SetChatLogStatus_body;
        this.SetChatLogStatus_bodyType = config.SetChatLogStatus_bodyType || 'str';
        this.SetMultiCompanyMode_body = config.SetMultiCompanyMode_body;
        this.SetMultiCompanyMode_bodyType = config.SetMultiCompanyMode_bodyType || 'str';
        this.ListProperty_top = config.ListProperty_top;
        this.ListProperty_topType = config.ListProperty_topType || 'str';
        this.ListProperty_skip = config.ListProperty_skip;
        this.ListProperty_skipType = config.ListProperty_skipType || 'str';
        this.ListProperty_search = config.ListProperty_search;
        this.ListProperty_searchType = config.ListProperty_searchType || 'str';
        this.ListProperty_filter = config.ListProperty_filter;
        this.ListProperty_filterType = config.ListProperty_filterType || 'str';
        this.ListProperty_count = config.ListProperty_count;
        this.ListProperty_countType = config.ListProperty_countType || 'str';
        this.ListProperty_orderby = config.ListProperty_orderby;
        this.ListProperty_orderbyType = config.ListProperty_orderbyType || 'str';
        this.ListProperty_select = config.ListProperty_select;
        this.ListProperty_selectType = config.ListProperty_selectType || 'str';
        this.ListProperty_expand = config.ListProperty_expand;
        this.ListProperty_expandType = config.ListProperty_expandType || 'str';
        this.CreateProperty_body = config.CreateProperty_body;
        this.CreateProperty_bodyType = config.CreateProperty_bodyType || 'str';
        this.GetProperty_name = config.GetProperty_name;
        this.GetProperty_nameType = config.GetProperty_nameType || 'str';
        this.GetProperty_select = config.GetProperty_select;
        this.GetProperty_selectType = config.GetProperty_selectType || 'str';
        this.GetProperty_expand = config.GetProperty_expand;
        this.GetProperty_expandType = config.GetProperty_expandType || 'str';
        this.UpdateProperty_name = config.UpdateProperty_name;
        this.UpdateProperty_nameType = config.UpdateProperty_nameType || 'str';
        this.UpdateProperty_body = config.UpdateProperty_body;
        this.UpdateProperty_bodyType = config.UpdateProperty_bodyType || 'str';
        this.DeleteProperty_name = config.DeleteProperty_name;
        this.DeleteProperty_nameType = config.DeleteProperty_nameType || 'str';
        this.DeleteProperty_ifMatch = config.DeleteProperty_ifMatch;
        this.DeleteProperty_ifMatchType = config.DeleteProperty_ifMatchType || 'str';
        this.GetTrunk_id = config.GetTrunk_id;
        this.GetTrunk_idType = config.GetTrunk_idType || 'str';
        this.GetTrunk_select = config.GetTrunk_select;
        this.GetTrunk_selectType = config.GetTrunk_selectType || 'str';
        this.GetTrunk_expand = config.GetTrunk_expand;
        this.GetTrunk_expandType = config.GetTrunk_expandType || 'str';
        this.UpdateTrunk_id = config.UpdateTrunk_id;
        this.UpdateTrunk_idType = config.UpdateTrunk_idType || 'str';
        this.UpdateTrunk_body = config.UpdateTrunk_body;
        this.UpdateTrunk_bodyType = config.UpdateTrunk_bodyType || 'str';
        this.DeleteTrunk_id = config.DeleteTrunk_id;
        this.DeleteTrunk_idType = config.DeleteTrunk_idType || 'str';
        this.DeleteTrunk_ifMatch = config.DeleteTrunk_ifMatch;
        this.DeleteTrunk_ifMatchType = config.DeleteTrunk_ifMatchType || 'str';
        this.InitTrunk_template = config.InitTrunk_template;
        this.InitTrunk_templateType = config.InitTrunk_templateType || 'str';
        this.ExportTrunk_id = config.ExportTrunk_id;
        this.ExportTrunk_idType = config.ExportTrunk_idType || 'str';
        this.RefreshRegistration_body = config.RefreshRegistration_body;
        this.RefreshRegistration_bodyType = config.RefreshRegistration_bodyType || 'str';
        this.SetRoutes_body = config.SetRoutes_body;
        this.SetRoutes_bodyType = config.SetRoutes_bodyType || 'str';
        this.GetTrunkByNumber_number = config.GetTrunkByNumber_number;
        this.GetTrunkByNumber_numberType = config.GetTrunkByNumber_numberType || 'str';
        this.ListTrunk_top = config.ListTrunk_top;
        this.ListTrunk_topType = config.ListTrunk_topType || 'str';
        this.ListTrunk_skip = config.ListTrunk_skip;
        this.ListTrunk_skipType = config.ListTrunk_skipType || 'str';
        this.ListTrunk_search = config.ListTrunk_search;
        this.ListTrunk_searchType = config.ListTrunk_searchType || 'str';
        this.ListTrunk_filter = config.ListTrunk_filter;
        this.ListTrunk_filterType = config.ListTrunk_filterType || 'str';
        this.ListTrunk_count = config.ListTrunk_count;
        this.ListTrunk_countType = config.ListTrunk_countType || 'str';
        this.ListTrunk_orderby = config.ListTrunk_orderby;
        this.ListTrunk_orderbyType = config.ListTrunk_orderbyType || 'str';
        this.ListTrunk_select = config.ListTrunk_select;
        this.ListTrunk_selectType = config.ListTrunk_selectType || 'str';
        this.ListTrunk_expand = config.ListTrunk_expand;
        this.ListTrunk_expandType = config.ListTrunk_expandType || 'str';
        this.CreateTrunk_body = config.CreateTrunk_body;
        this.CreateTrunk_bodyType = config.CreateTrunk_bodyType || 'str';
        this.ProvisionTrunk_body = config.ProvisionTrunk_body;
        this.ProvisionTrunk_bodyType = config.ProvisionTrunk_bodyType || 'str';
        this.TelegramSession_body = config.TelegramSession_body;
        this.TelegramSession_bodyType = config.TelegramSession_bodyType || 'str';
        this.ListTrunkTemplate_top = config.ListTrunkTemplate_top;
        this.ListTrunkTemplate_topType = config.ListTrunkTemplate_topType || 'str';
        this.ListTrunkTemplate_skip = config.ListTrunkTemplate_skip;
        this.ListTrunkTemplate_skipType = config.ListTrunkTemplate_skipType || 'str';
        this.ListTrunkTemplate_search = config.ListTrunkTemplate_search;
        this.ListTrunkTemplate_searchType = config.ListTrunkTemplate_searchType || 'str';
        this.ListTrunkTemplate_filter = config.ListTrunkTemplate_filter;
        this.ListTrunkTemplate_filterType = config.ListTrunkTemplate_filterType || 'str';
        this.ListTrunkTemplate_count = config.ListTrunkTemplate_count;
        this.ListTrunkTemplate_countType = config.ListTrunkTemplate_countType || 'str';
        this.ListTrunkTemplate_orderby = config.ListTrunkTemplate_orderby;
        this.ListTrunkTemplate_orderbyType = config.ListTrunkTemplate_orderbyType || 'str';
        this.ListTrunkTemplate_select = config.ListTrunkTemplate_select;
        this.ListTrunkTemplate_selectType = config.ListTrunkTemplate_selectType || 'str';
        this.ListTrunkTemplate_expand = config.ListTrunkTemplate_expand;
        this.ListTrunkTemplate_expandType = config.ListTrunkTemplate_expandType || 'str';
        this.CreateTrunkTemplate_body = config.CreateTrunkTemplate_body;
        this.CreateTrunkTemplate_bodyType = config.CreateTrunkTemplate_bodyType || 'str';
        this.GetTrunkTemplate_id = config.GetTrunkTemplate_id;
        this.GetTrunkTemplate_idType = config.GetTrunkTemplate_idType || 'str';
        this.GetTrunkTemplate_select = config.GetTrunkTemplate_select;
        this.GetTrunkTemplate_selectType = config.GetTrunkTemplate_selectType || 'str';
        this.GetTrunkTemplate_expand = config.GetTrunkTemplate_expand;
        this.GetTrunkTemplate_expandType = config.GetTrunkTemplate_expandType || 'str';
        this.UpdateTrunkTemplate_id = config.UpdateTrunkTemplate_id;
        this.UpdateTrunkTemplate_idType = config.UpdateTrunkTemplate_idType || 'str';
        this.UpdateTrunkTemplate_body = config.UpdateTrunkTemplate_body;
        this.UpdateTrunkTemplate_bodyType = config.UpdateTrunkTemplate_bodyType || 'str';
        this.DeleteTrunkTemplate_id = config.DeleteTrunkTemplate_id;
        this.DeleteTrunkTemplate_idType = config.DeleteTrunkTemplate_idType || 'str';
        this.DeleteTrunkTemplate_ifMatch = config.DeleteTrunkTemplate_ifMatch;
        this.DeleteTrunkTemplate_ifMatchType = config.DeleteTrunkTemplate_ifMatchType || 'str';
        this.SetUpdateSettings_body = config.SetUpdateSettings_body;
        this.SetUpdateSettings_bodyType = config.SetUpdateSettings_bodyType || 'str';
        this.InstallUpdates_body = config.InstallUpdates_body;
        this.InstallUpdates_bodyType = config.InstallUpdates_bodyType || 'str';
        this.HasDuplicatedEmail_id = config.HasDuplicatedEmail_id;
        this.HasDuplicatedEmail_idType = config.HasDuplicatedEmail_idType || 'str';
        this.GetDuplicatedEmails_body = config.GetDuplicatedEmails_body;
        this.GetDuplicatedEmails_bodyType = config.GetDuplicatedEmails_bodyType || 'str';
        this.SendWelcomeEmail_id = config.SendWelcomeEmail_id;
        this.SendWelcomeEmail_idType = config.SendWelcomeEmail_idType || 'str';
        this.ListGroups_id = config.ListGroups_id;
        this.ListGroups_idType = config.ListGroups_idType || 'str';
        this.ListGroups_top = config.ListGroups_top;
        this.ListGroups_topType = config.ListGroups_topType || 'str';
        this.ListGroups_skip = config.ListGroups_skip;
        this.ListGroups_skipType = config.ListGroups_skipType || 'str';
        this.ListGroups_search = config.ListGroups_search;
        this.ListGroups_searchType = config.ListGroups_searchType || 'str';
        this.ListGroups_filter = config.ListGroups_filter;
        this.ListGroups_filterType = config.ListGroups_filterType || 'str';
        this.ListGroups_count = config.ListGroups_count;
        this.ListGroups_countType = config.ListGroups_countType || 'str';
        this.ListGroups_orderby = config.ListGroups_orderby;
        this.ListGroups_orderbyType = config.ListGroups_orderbyType || 'str';
        this.ListGroups_select = config.ListGroups_select;
        this.ListGroups_selectType = config.ListGroups_selectType || 'str';
        this.ListGroups_expand = config.ListGroups_expand;
        this.ListGroups_expandType = config.ListGroups_expandType || 'str';
        this.ListForwardingProfiles_id = config.ListForwardingProfiles_id;
        this.ListForwardingProfiles_idType = config.ListForwardingProfiles_idType || 'str';
        this.ListForwardingProfiles_top = config.ListForwardingProfiles_top;
        this.ListForwardingProfiles_topType = config.ListForwardingProfiles_topType || 'str';
        this.ListForwardingProfiles_skip = config.ListForwardingProfiles_skip;
        this.ListForwardingProfiles_skipType = config.ListForwardingProfiles_skipType || 'str';
        this.ListForwardingProfiles_search = config.ListForwardingProfiles_search;
        this.ListForwardingProfiles_searchType = config.ListForwardingProfiles_searchType || 'str';
        this.ListForwardingProfiles_filter = config.ListForwardingProfiles_filter;
        this.ListForwardingProfiles_filterType = config.ListForwardingProfiles_filterType || 'str';
        this.ListForwardingProfiles_count = config.ListForwardingProfiles_count;
        this.ListForwardingProfiles_countType = config.ListForwardingProfiles_countType || 'str';
        this.ListForwardingProfiles_orderby = config.ListForwardingProfiles_orderby;
        this.ListForwardingProfiles_orderbyType = config.ListForwardingProfiles_orderbyType || 'str';
        this.ListForwardingProfiles_select = config.ListForwardingProfiles_select;
        this.ListForwardingProfiles_selectType = config.ListForwardingProfiles_selectType || 'str';
        this.ListForwardingProfiles_expand = config.ListForwardingProfiles_expand;
        this.ListForwardingProfiles_expandType = config.ListForwardingProfiles_expandType || 'str';
        this.GetPhoneSecret_id = config.GetPhoneSecret_id;
        this.GetPhoneSecret_idType = config.GetPhoneSecret_idType || 'str';
        this.Regenerate_id = config.Regenerate_id;
        this.Regenerate_idType = config.Regenerate_idType || 'str';
        this.Regenerate_body = config.Regenerate_body;
        this.Regenerate_bodyType = config.Regenerate_bodyType || 'str';
        this.RegeneratePasswords_body = config.RegeneratePasswords_body;
        this.RegeneratePasswords_bodyType = config.RegeneratePasswords_bodyType || 'str';
        this.ExportExtensions_top = config.ExportExtensions_top;
        this.ExportExtensions_topType = config.ExportExtensions_topType || 'str';
        this.ExportExtensions_skip = config.ExportExtensions_skip;
        this.ExportExtensions_skipType = config.ExportExtensions_skipType || 'str';
        this.ExportExtensions_search = config.ExportExtensions_search;
        this.ExportExtensions_searchType = config.ExportExtensions_searchType || 'str';
        this.ExportExtensions_filter = config.ExportExtensions_filter;
        this.ExportExtensions_filterType = config.ExportExtensions_filterType || 'str';
        this.ExportExtensions_count = config.ExportExtensions_count;
        this.ExportExtensions_countType = config.ExportExtensions_countType || 'str';
        this.ExportExtensions_select = config.ExportExtensions_select;
        this.ExportExtensions_selectType = config.ExportExtensions_selectType || 'str';
        this.ExportExtensions_orderby = config.ExportExtensions_orderby;
        this.ExportExtensions_orderbyType = config.ExportExtensions_orderbyType || 'str';
        this.ExportExtensions_expand = config.ExportExtensions_expand;
        this.ExportExtensions_expandType = config.ExportExtensions_expandType || 'str';
        this.GetPhoneRegistrar_mac = config.GetPhoneRegistrar_mac;
        this.GetPhoneRegistrar_macType = config.GetPhoneRegistrar_macType || 'str';
        this.BulkUpdate_body = config.BulkUpdate_body;
        this.BulkUpdate_bodyType = config.BulkUpdate_bodyType || 'str';
        this.GetPhoneRegistrars_body = config.GetPhoneRegistrars_body;
        this.GetPhoneRegistrars_bodyType = config.GetPhoneRegistrars_bodyType || 'str';
        this.RebootPhone_body = config.RebootPhone_body;
        this.RebootPhone_bodyType = config.RebootPhone_bodyType || 'str';
        this.ReprovisionPhone_body = config.ReprovisionPhone_body;
        this.ReprovisionPhone_bodyType = config.ReprovisionPhone_bodyType || 'str';
        this.UpgradePhone_body = config.UpgradePhone_body;
        this.UpgradePhone_bodyType = config.UpgradePhone_bodyType || 'str';
        this.GenerateProvLink_id = config.GenerateProvLink_id;
        this.GenerateProvLink_idType = config.GenerateProvLink_idType || 'str';
        this.GetUser_id = config.GetUser_id;
        this.GetUser_idType = config.GetUser_idType || 'str';
        this.GetUser_select = config.GetUser_select;
        this.GetUser_selectType = config.GetUser_selectType || 'str';
        this.GetUser_expand = config.GetUser_expand;
        this.GetUser_expandType = config.GetUser_expandType || 'str';
        this.UpdateUser_id = config.UpdateUser_id;
        this.UpdateUser_idType = config.UpdateUser_idType || 'str';
        this.UpdateUser_body = config.UpdateUser_body;
        this.UpdateUser_bodyType = config.UpdateUser_bodyType || 'str';
        this.DeleteUser_id = config.DeleteUser_id;
        this.DeleteUser_idType = config.DeleteUser_idType || 'str';
        this.DeleteUser_ifMatch = config.DeleteUser_ifMatch;
        this.DeleteUser_ifMatchType = config.DeleteUser_ifMatchType || 'str';
        this.ListGreetings_id = config.ListGreetings_id;
        this.ListGreetings_idType = config.ListGreetings_idType || 'str';
        this.ListGreetings_top = config.ListGreetings_top;
        this.ListGreetings_topType = config.ListGreetings_topType || 'str';
        this.ListGreetings_skip = config.ListGreetings_skip;
        this.ListGreetings_skipType = config.ListGreetings_skipType || 'str';
        this.ListGreetings_search = config.ListGreetings_search;
        this.ListGreetings_searchType = config.ListGreetings_searchType || 'str';
        this.ListGreetings_filter = config.ListGreetings_filter;
        this.ListGreetings_filterType = config.ListGreetings_filterType || 'str';
        this.ListGreetings_count = config.ListGreetings_count;
        this.ListGreetings_countType = config.ListGreetings_countType || 'str';
        this.ListGreetings_orderby = config.ListGreetings_orderby;
        this.ListGreetings_orderbyType = config.ListGreetings_orderbyType || 'str';
        this.ListGreetings_select = config.ListGreetings_select;
        this.ListGreetings_selectType = config.ListGreetings_selectType || 'str';
        this.ListGreetings_expand = config.ListGreetings_expand;
        this.ListGreetings_expandType = config.ListGreetings_expandType || 'str';
        this.MakeCallUserRecordGreeting_id = config.MakeCallUserRecordGreeting_id;
        this.MakeCallUserRecordGreeting_idType = config.MakeCallUserRecordGreeting_idType || 'str';
        this.MakeCallUserRecordGreeting_body = config.MakeCallUserRecordGreeting_body;
        this.MakeCallUserRecordGreeting_bodyType = config.MakeCallUserRecordGreeting_bodyType || 'str';
        this.DownloadGreeting_userId = config.DownloadGreeting_userId;
        this.DownloadGreeting_userIdType = config.DownloadGreeting_userIdType || 'str';
        this.DownloadGreeting_fileName = config.DownloadGreeting_fileName;
        this.DownloadGreeting_fileNameType = config.DownloadGreeting_fileNameType || 'str';
        this.BatchDelete_body = config.BatchDelete_body;
        this.BatchDelete_bodyType = config.BatchDelete_bodyType || 'str';
        this.GetMonitorStatus_top = config.GetMonitorStatus_top;
        this.GetMonitorStatus_topType = config.GetMonitorStatus_topType || 'str';
        this.GetMonitorStatus_skip = config.GetMonitorStatus_skip;
        this.GetMonitorStatus_skipType = config.GetMonitorStatus_skipType || 'str';
        this.GetMonitorStatus_search = config.GetMonitorStatus_search;
        this.GetMonitorStatus_searchType = config.GetMonitorStatus_searchType || 'str';
        this.GetMonitorStatus_filter = config.GetMonitorStatus_filter;
        this.GetMonitorStatus_filterType = config.GetMonitorStatus_filterType || 'str';
        this.GetMonitorStatus_count = config.GetMonitorStatus_count;
        this.GetMonitorStatus_countType = config.GetMonitorStatus_countType || 'str';
        this.SetMonitorStatus_id = config.SetMonitorStatus_id;
        this.SetMonitorStatus_idType = config.SetMonitorStatus_idType || 'str';
        this.SetMonitorStatus_body = config.SetMonitorStatus_body;
        this.SetMonitorStatus_bodyType = config.SetMonitorStatus_bodyType || 'str';
        this.GetUserByNumber_number = config.GetUserByNumber_number;
        this.GetUserByNumber_numberType = config.GetUserByNumber_numberType || 'str';
        this.ListUser_top = config.ListUser_top;
        this.ListUser_topType = config.ListUser_topType || 'str';
        this.ListUser_skip = config.ListUser_skip;
        this.ListUser_skipType = config.ListUser_skipType || 'str';
        this.ListUser_search = config.ListUser_search;
        this.ListUser_searchType = config.ListUser_searchType || 'str';
        this.ListUser_filter = config.ListUser_filter;
        this.ListUser_filterType = config.ListUser_filterType || 'str';
        this.ListUser_count = config.ListUser_count;
        this.ListUser_countType = config.ListUser_countType || 'str';
        this.ListUser_orderby = config.ListUser_orderby;
        this.ListUser_orderbyType = config.ListUser_orderbyType || 'str';
        this.ListUser_select = config.ListUser_select;
        this.ListUser_selectType = config.ListUser_selectType || 'str';
        this.ListUser_expand = config.ListUser_expand;
        this.ListUser_expandType = config.ListUser_expandType || 'str';
        this.CreateUser_body = config.CreateUser_body;
        this.CreateUser_bodyType = config.CreateUser_bodyType || 'str';
        this.GetTranscribeLanguages_top = config.GetTranscribeLanguages_top;
        this.GetTranscribeLanguages_topType = config.GetTranscribeLanguages_topType || 'str';
        this.GetTranscribeLanguages_skip = config.GetTranscribeLanguages_skip;
        this.GetTranscribeLanguages_skipType = config.GetTranscribeLanguages_skipType || 'str';
        this.GetTranscribeLanguages_search = config.GetTranscribeLanguages_search;
        this.GetTranscribeLanguages_searchType = config.GetTranscribeLanguages_searchType || 'str';
        this.GetTranscribeLanguages_filter = config.GetTranscribeLanguages_filter;
        this.GetTranscribeLanguages_filterType = config.GetTranscribeLanguages_filterType || 'str';
        this.GetTranscribeLanguages_count = config.GetTranscribeLanguages_count;
        this.GetTranscribeLanguages_countType = config.GetTranscribeLanguages_countType || 'str';
        this.GetVoicemailSettings_select = config.GetVoicemailSettings_select;
        this.GetVoicemailSettings_selectType = config.GetVoicemailSettings_selectType || 'str';
        this.GetVoicemailSettings_expand = config.GetVoicemailSettings_expand;
        this.GetVoicemailSettings_expandType = config.GetVoicemailSettings_expandType || 'str';
        this.UpdateVoicemailSettings_body = config.UpdateVoicemailSettings_body;
        this.UpdateVoicemailSettings_bodyType = config.UpdateVoicemailSettings_bodyType || 'str';
        this.ListWeblink_top = config.ListWeblink_top;
        this.ListWeblink_topType = config.ListWeblink_topType || 'str';
        this.ListWeblink_skip = config.ListWeblink_skip;
        this.ListWeblink_skipType = config.ListWeblink_skipType || 'str';
        this.ListWeblink_search = config.ListWeblink_search;
        this.ListWeblink_searchType = config.ListWeblink_searchType || 'str';
        this.ListWeblink_filter = config.ListWeblink_filter;
        this.ListWeblink_filterType = config.ListWeblink_filterType || 'str';
        this.ListWeblink_count = config.ListWeblink_count;
        this.ListWeblink_countType = config.ListWeblink_countType || 'str';
        this.ListWeblink_orderby = config.ListWeblink_orderby;
        this.ListWeblink_orderbyType = config.ListWeblink_orderbyType || 'str';
        this.ListWeblink_select = config.ListWeblink_select;
        this.ListWeblink_selectType = config.ListWeblink_selectType || 'str';
        this.ListWeblink_expand = config.ListWeblink_expand;
        this.ListWeblink_expandType = config.ListWeblink_expandType || 'str';
        this.CreateWeblink_body = config.CreateWeblink_body;
        this.CreateWeblink_bodyType = config.CreateWeblink_bodyType || 'str';
        this.ValidateLink_body = config.ValidateLink_body;
        this.ValidateLink_bodyType = config.ValidateLink_bodyType || 'str';
        this.BulkLinksDelete_body = config.BulkLinksDelete_body;
        this.BulkLinksDelete_bodyType = config.BulkLinksDelete_bodyType || 'str';
        this.GetWeblink_link = config.GetWeblink_link;
        this.GetWeblink_linkType = config.GetWeblink_linkType || 'str';
        this.GetWeblink_select = config.GetWeblink_select;
        this.GetWeblink_selectType = config.GetWeblink_selectType || 'str';
        this.GetWeblink_expand = config.GetWeblink_expand;
        this.GetWeblink_expandType = config.GetWeblink_expandType || 'str';
        this.UpdateWeblink_link = config.UpdateWeblink_link;
        this.UpdateWeblink_linkType = config.UpdateWeblink_linkType || 'str';
        this.UpdateWeblink_body = config.UpdateWeblink_body;
        this.UpdateWeblink_bodyType = config.UpdateWeblink_bodyType || 'str';
        this.DeleteWeblink_link = config.DeleteWeblink_link;
        this.DeleteWeblink_linkType = config.DeleteWeblink_linkType || 'str';
        this.DeleteWeblink_ifMatch = config.DeleteWeblink_ifMatch;
        this.DeleteWeblink_ifMatchType = config.DeleteWeblink_ifMatchType || 'str';
        var node = this;

        node.on('input', function (msg) {
            var errorFlag = false;
            var client;
            if (this.service && this.service.host) {
                client = new lib.Xapi({ domain: this.service.host });
            } else {
                node.error('Host in configuration node is not specified.', msg);
                errorFlag = true;
            }
            if (!errorFlag && this.service && this.service.credentials && this.service.credentials.secureTokenValue) {
                if (this.service.secureTokenIsQuery) {
                    client.setToken(this.service.credentials.secureTokenValue,
                                    this.service.secureTokenHeaderOrQueryName, true);
                } else {
                    client.setToken(this.service.credentials.secureTokenValue,
                                    this.service.secureTokenHeaderOrQueryName, false);
                }
            }
            if (!errorFlag) {
                client.body = msg.payload;
            }

            var result;
            if (!errorFlag && node.method === 'ListActiveCall') {
                var ListActiveCall_parameters = [];
                var ListActiveCall_nodeParam;
                var ListActiveCall_nodeParamType;

                ListActiveCall_nodeParam = node.ListActiveCall_top;
                ListActiveCall_nodeParamType = node.ListActiveCall_topType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.top = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.top = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.top = !!ListActiveCall_parameters.top ? ListActiveCall_parameters.top : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_skip;
                ListActiveCall_nodeParamType = node.ListActiveCall_skipType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.skip = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.skip = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.skip = !!ListActiveCall_parameters.skip ? ListActiveCall_parameters.skip : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_search;
                ListActiveCall_nodeParamType = node.ListActiveCall_searchType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.search = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.search = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.search = !!ListActiveCall_parameters.search ? ListActiveCall_parameters.search : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_filter;
                ListActiveCall_nodeParamType = node.ListActiveCall_filterType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.filter = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.filter = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.filter = !!ListActiveCall_parameters.filter ? ListActiveCall_parameters.filter : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_count;
                ListActiveCall_nodeParamType = node.ListActiveCall_countType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.count = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.count = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.count = !!ListActiveCall_parameters.count ? ListActiveCall_parameters.count : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_orderby;
                ListActiveCall_nodeParamType = node.ListActiveCall_orderbyType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.orderby = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.orderby = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.orderby = !!ListActiveCall_parameters.orderby ? ListActiveCall_parameters.orderby : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_select;
                ListActiveCall_nodeParamType = node.ListActiveCall_selectType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.select = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.select = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.select = !!ListActiveCall_parameters.select ? ListActiveCall_parameters.select : msg.payload;
                
                ListActiveCall_nodeParam = node.ListActiveCall_expand;
                ListActiveCall_nodeParamType = node.ListActiveCall_expandType;
                if (ListActiveCall_nodeParamType === 'str') {
                    ListActiveCall_parameters.expand = ListActiveCall_nodeParam || '';
                } else {
                    ListActiveCall_parameters.expand = RED.util.getMessageProperty(msg, ListActiveCall_nodeParam);
                }
                ListActiveCall_parameters.expand = !!ListActiveCall_parameters.expand ? ListActiveCall_parameters.expand : msg.payload;
                                result = client.ListActiveCall(ListActiveCall_parameters);
            }
            if (!errorFlag && node.method === 'DropCall') {
                var DropCall_parameters = [];
                var DropCall_nodeParam;
                var DropCall_nodeParamType;

                DropCall_nodeParam = node.DropCall_id;
                DropCall_nodeParamType = node.DropCall_idType;
                if (DropCall_nodeParamType === 'str') {
                    DropCall_parameters.id = DropCall_nodeParam || '';
                } else {
                    DropCall_parameters.id = RED.util.getMessageProperty(msg, DropCall_nodeParam);
                }
                DropCall_parameters.id = !!DropCall_parameters.id ? DropCall_parameters.id : msg.payload;
                                result = client.DropCall(DropCall_parameters);
            }
            if (!errorFlag && node.method === 'GetFilter') {
                var GetFilter_parameters = [];
                var GetFilter_nodeParam;
                var GetFilter_nodeParamType;
                result = client.GetFilter(GetFilter_parameters);
            }
            if (!errorFlag && node.method === 'GetLogs') {
                var GetLogs_parameters = [];
                var GetLogs_nodeParam;
                var GetLogs_nodeParamType;

                GetLogs_nodeParam = node.GetLogs_extension;
                GetLogs_nodeParamType = node.GetLogs_extensionType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.extension = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.extension = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.extension = !!GetLogs_parameters.extension ? GetLogs_parameters.extension : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_call;
                GetLogs_nodeParamType = node.GetLogs_callType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.call = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.call = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.call = !!GetLogs_parameters.call ? GetLogs_parameters.call : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_search;
                GetLogs_nodeParamType = node.GetLogs_searchType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.search = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.search = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.search = !!GetLogs_parameters.search ? GetLogs_parameters.search : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_severity;
                GetLogs_nodeParamType = node.GetLogs_severityType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.severity = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.severity = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.severity = !!GetLogs_parameters.severity ? GetLogs_parameters.severity : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_top;
                GetLogs_nodeParamType = node.GetLogs_topType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.top = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.top = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.top = !!GetLogs_parameters.top ? GetLogs_parameters.top : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_skip;
                GetLogs_nodeParamType = node.GetLogs_skipType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.skip = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.skip = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.skip = !!GetLogs_parameters.skip ? GetLogs_parameters.skip : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_top;
                GetLogs_nodeParamType = node.GetLogs_topType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.top = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.top = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.top = !!GetLogs_parameters.top ? GetLogs_parameters.top : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_skip;
                GetLogs_nodeParamType = node.GetLogs_skipType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.skip = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.skip = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.skip = !!GetLogs_parameters.skip ? GetLogs_parameters.skip : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_search;
                GetLogs_nodeParamType = node.GetLogs_searchType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.search = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.search = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.search = !!GetLogs_parameters.search ? GetLogs_parameters.search : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_filter;
                GetLogs_nodeParamType = node.GetLogs_filterType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.filter = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.filter = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.filter = !!GetLogs_parameters.filter ? GetLogs_parameters.filter : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_count;
                GetLogs_nodeParamType = node.GetLogs_countType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.count = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.count = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.count = !!GetLogs_parameters.count ? GetLogs_parameters.count : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_select;
                GetLogs_nodeParamType = node.GetLogs_selectType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.select = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.select = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.select = !!GetLogs_parameters.select ? GetLogs_parameters.select : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_orderby;
                GetLogs_nodeParamType = node.GetLogs_orderbyType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.orderby = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.orderby = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.orderby = !!GetLogs_parameters.orderby ? GetLogs_parameters.orderby : msg.payload;
                
                GetLogs_nodeParam = node.GetLogs_expand;
                GetLogs_nodeParamType = node.GetLogs_expandType;
                if (GetLogs_nodeParamType === 'str') {
                    GetLogs_parameters.expand = GetLogs_nodeParam || '';
                } else {
                    GetLogs_parameters.expand = RED.util.getMessageProperty(msg, GetLogs_nodeParam);
                }
                GetLogs_parameters.expand = !!GetLogs_parameters.expand ? GetLogs_parameters.expand : msg.payload;
                                result = client.GetLogs(GetLogs_parameters);
            }
            if (!errorFlag && node.method === 'PurgeLogs') {
                var PurgeLogs_parameters = [];
                var PurgeLogs_nodeParam;
                var PurgeLogs_nodeParamType;
                result = client.PurgeLogs(PurgeLogs_parameters);
            }
            if (!errorFlag && node.method === 'GetAntiHackingSettings') {
                var GetAntiHackingSettings_parameters = [];
                var GetAntiHackingSettings_nodeParam;
                var GetAntiHackingSettings_nodeParamType;

                GetAntiHackingSettings_nodeParam = node.GetAntiHackingSettings_select;
                GetAntiHackingSettings_nodeParamType = node.GetAntiHackingSettings_selectType;
                if (GetAntiHackingSettings_nodeParamType === 'str') {
                    GetAntiHackingSettings_parameters.select = GetAntiHackingSettings_nodeParam || '';
                } else {
                    GetAntiHackingSettings_parameters.select = RED.util.getMessageProperty(msg, GetAntiHackingSettings_nodeParam);
                }
                GetAntiHackingSettings_parameters.select = !!GetAntiHackingSettings_parameters.select ? GetAntiHackingSettings_parameters.select : msg.payload;
                
                GetAntiHackingSettings_nodeParam = node.GetAntiHackingSettings_expand;
                GetAntiHackingSettings_nodeParamType = node.GetAntiHackingSettings_expandType;
                if (GetAntiHackingSettings_nodeParamType === 'str') {
                    GetAntiHackingSettings_parameters.expand = GetAntiHackingSettings_nodeParam || '';
                } else {
                    GetAntiHackingSettings_parameters.expand = RED.util.getMessageProperty(msg, GetAntiHackingSettings_nodeParam);
                }
                GetAntiHackingSettings_parameters.expand = !!GetAntiHackingSettings_parameters.expand ? GetAntiHackingSettings_parameters.expand : msg.payload;
                                result = client.GetAntiHackingSettings(GetAntiHackingSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateAntiHackingSettings') {
                var UpdateAntiHackingSettings_parameters = [];
                var UpdateAntiHackingSettings_nodeParam;
                var UpdateAntiHackingSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateAntiHackingSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateAntiHackingSettings(UpdateAntiHackingSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListBackups') {
                var ListBackups_parameters = [];
                var ListBackups_nodeParam;
                var ListBackups_nodeParamType;

                ListBackups_nodeParam = node.ListBackups_top;
                ListBackups_nodeParamType = node.ListBackups_topType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.top = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.top = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.top = !!ListBackups_parameters.top ? ListBackups_parameters.top : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_skip;
                ListBackups_nodeParamType = node.ListBackups_skipType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.skip = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.skip = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.skip = !!ListBackups_parameters.skip ? ListBackups_parameters.skip : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_search;
                ListBackups_nodeParamType = node.ListBackups_searchType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.search = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.search = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.search = !!ListBackups_parameters.search ? ListBackups_parameters.search : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_filter;
                ListBackups_nodeParamType = node.ListBackups_filterType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.filter = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.filter = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.filter = !!ListBackups_parameters.filter ? ListBackups_parameters.filter : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_count;
                ListBackups_nodeParamType = node.ListBackups_countType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.count = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.count = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.count = !!ListBackups_parameters.count ? ListBackups_parameters.count : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_orderby;
                ListBackups_nodeParamType = node.ListBackups_orderbyType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.orderby = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.orderby = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.orderby = !!ListBackups_parameters.orderby ? ListBackups_parameters.orderby : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_select;
                ListBackups_nodeParamType = node.ListBackups_selectType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.select = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.select = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.select = !!ListBackups_parameters.select ? ListBackups_parameters.select : msg.payload;
                
                ListBackups_nodeParam = node.ListBackups_expand;
                ListBackups_nodeParamType = node.ListBackups_expandType;
                if (ListBackups_nodeParamType === 'str') {
                    ListBackups_parameters.expand = ListBackups_nodeParam || '';
                } else {
                    ListBackups_parameters.expand = RED.util.getMessageProperty(msg, ListBackups_nodeParam);
                }
                ListBackups_parameters.expand = !!ListBackups_parameters.expand ? ListBackups_parameters.expand : msg.payload;
                                result = client.ListBackups(ListBackups_parameters);
            }
            if (!errorFlag && node.method === 'GetBackupExtras') {
                var GetBackupExtras_parameters = [];
                var GetBackupExtras_nodeParam;
                var GetBackupExtras_nodeParamType;

                GetBackupExtras_nodeParam = node.GetBackupExtras_fileName;
                GetBackupExtras_nodeParamType = node.GetBackupExtras_fileNameType;
                if (GetBackupExtras_nodeParamType === 'str') {
                    GetBackupExtras_parameters.fileName = GetBackupExtras_nodeParam || '';
                } else {
                    GetBackupExtras_parameters.fileName = RED.util.getMessageProperty(msg, GetBackupExtras_nodeParam);
                }
                GetBackupExtras_parameters.fileName = !!GetBackupExtras_parameters.fileName ? GetBackupExtras_parameters.fileName : msg.payload;
                                result = client.GetBackupExtras(GetBackupExtras_parameters);
            }
            if (!errorFlag && node.method === 'DeleteBackups') {
                var DeleteBackups_parameters = [];
                var DeleteBackups_nodeParam;
                var DeleteBackups_nodeParamType;

                DeleteBackups_nodeParam = node.DeleteBackups_fileName;
                DeleteBackups_nodeParamType = node.DeleteBackups_fileNameType;
                if (DeleteBackups_nodeParamType === 'str') {
                    DeleteBackups_parameters.fileName = DeleteBackups_nodeParam || '';
                } else {
                    DeleteBackups_parameters.fileName = RED.util.getMessageProperty(msg, DeleteBackups_nodeParam);
                }
                DeleteBackups_parameters.fileName = !!DeleteBackups_parameters.fileName ? DeleteBackups_parameters.fileName : msg.payload;
                
                DeleteBackups_nodeParam = node.DeleteBackups_ifMatch;
                DeleteBackups_nodeParamType = node.DeleteBackups_ifMatchType;
                if (DeleteBackups_nodeParamType === 'str') {
                    DeleteBackups_parameters.ifMatch = DeleteBackups_nodeParam || '';
                } else {
                    DeleteBackups_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteBackups_nodeParam);
                }
                DeleteBackups_parameters.ifMatch = !!DeleteBackups_parameters.ifMatch ? DeleteBackups_parameters.ifMatch : msg.payload;
                                result = client.DeleteBackups(DeleteBackups_parameters);
            }
            if (!errorFlag && node.method === 'Restore') {
                var Restore_parameters = [];
                var Restore_nodeParam;
                var Restore_nodeParamType;

                Restore_nodeParam = node.Restore_fileName;
                Restore_nodeParamType = node.Restore_fileNameType;
                if (Restore_nodeParamType === 'str') {
                    Restore_parameters.fileName = Restore_nodeParam || '';
                } else {
                    Restore_parameters.fileName = RED.util.getMessageProperty(msg, Restore_nodeParam);
                }
                Restore_parameters.fileName = !!Restore_parameters.fileName ? Restore_parameters.fileName : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    Restore_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Restore(Restore_parameters);
            }
            if (!errorFlag && node.method === 'Backup') {
                var Backup_parameters = [];
                var Backup_nodeParam;
                var Backup_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Backup_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Backup(Backup_parameters);
            }
            if (!errorFlag && node.method === 'GetCanCreateBackup') {
                var GetCanCreateBackup_parameters = [];
                var GetCanCreateBackup_nodeParam;
                var GetCanCreateBackup_nodeParamType;
                result = client.GetCanCreateBackup(GetCanCreateBackup_parameters);
            }
            if (!errorFlag && node.method === 'GetBackupSettings') {
                var GetBackupSettings_parameters = [];
                var GetBackupSettings_nodeParam;
                var GetBackupSettings_nodeParamType;
                result = client.GetBackupSettings(GetBackupSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetBackupFailoverSettings') {
                var GetBackupFailoverSettings_parameters = [];
                var GetBackupFailoverSettings_nodeParam;
                var GetBackupFailoverSettings_nodeParamType;
                result = client.GetBackupFailoverSettings(GetBackupFailoverSettings_parameters);
            }
            if (!errorFlag && node.method === 'SetBackupFailoverSettings') {
                var SetBackupFailoverSettings_parameters = [];
                var SetBackupFailoverSettings_nodeParam;
                var SetBackupFailoverSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetBackupFailoverSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetBackupFailoverSettings(SetBackupFailoverSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetFailoverScripts') {
                var GetFailoverScripts_parameters = [];
                var GetFailoverScripts_nodeParam;
                var GetFailoverScripts_nodeParamType;

                GetFailoverScripts_nodeParam = node.GetFailoverScripts_top;
                GetFailoverScripts_nodeParamType = node.GetFailoverScripts_topType;
                if (GetFailoverScripts_nodeParamType === 'str') {
                    GetFailoverScripts_parameters.top = GetFailoverScripts_nodeParam || '';
                } else {
                    GetFailoverScripts_parameters.top = RED.util.getMessageProperty(msg, GetFailoverScripts_nodeParam);
                }
                GetFailoverScripts_parameters.top = !!GetFailoverScripts_parameters.top ? GetFailoverScripts_parameters.top : msg.payload;
                
                GetFailoverScripts_nodeParam = node.GetFailoverScripts_skip;
                GetFailoverScripts_nodeParamType = node.GetFailoverScripts_skipType;
                if (GetFailoverScripts_nodeParamType === 'str') {
                    GetFailoverScripts_parameters.skip = GetFailoverScripts_nodeParam || '';
                } else {
                    GetFailoverScripts_parameters.skip = RED.util.getMessageProperty(msg, GetFailoverScripts_nodeParam);
                }
                GetFailoverScripts_parameters.skip = !!GetFailoverScripts_parameters.skip ? GetFailoverScripts_parameters.skip : msg.payload;
                
                GetFailoverScripts_nodeParam = node.GetFailoverScripts_search;
                GetFailoverScripts_nodeParamType = node.GetFailoverScripts_searchType;
                if (GetFailoverScripts_nodeParamType === 'str') {
                    GetFailoverScripts_parameters.search = GetFailoverScripts_nodeParam || '';
                } else {
                    GetFailoverScripts_parameters.search = RED.util.getMessageProperty(msg, GetFailoverScripts_nodeParam);
                }
                GetFailoverScripts_parameters.search = !!GetFailoverScripts_parameters.search ? GetFailoverScripts_parameters.search : msg.payload;
                
                GetFailoverScripts_nodeParam = node.GetFailoverScripts_filter;
                GetFailoverScripts_nodeParamType = node.GetFailoverScripts_filterType;
                if (GetFailoverScripts_nodeParamType === 'str') {
                    GetFailoverScripts_parameters.filter = GetFailoverScripts_nodeParam || '';
                } else {
                    GetFailoverScripts_parameters.filter = RED.util.getMessageProperty(msg, GetFailoverScripts_nodeParam);
                }
                GetFailoverScripts_parameters.filter = !!GetFailoverScripts_parameters.filter ? GetFailoverScripts_parameters.filter : msg.payload;
                
                GetFailoverScripts_nodeParam = node.GetFailoverScripts_count;
                GetFailoverScripts_nodeParamType = node.GetFailoverScripts_countType;
                if (GetFailoverScripts_nodeParamType === 'str') {
                    GetFailoverScripts_parameters.count = GetFailoverScripts_nodeParam || '';
                } else {
                    GetFailoverScripts_parameters.count = RED.util.getMessageProperty(msg, GetFailoverScripts_nodeParam);
                }
                GetFailoverScripts_parameters.count = !!GetFailoverScripts_parameters.count ? GetFailoverScripts_parameters.count : msg.payload;
                                result = client.GetFailoverScripts(GetFailoverScripts_parameters);
            }
            if (!errorFlag && node.method === 'SetBackupSettings') {
                var SetBackupSettings_parameters = [];
                var SetBackupSettings_nodeParam;
                var SetBackupSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetBackupSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetBackupSettings(SetBackupSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetBackupRepositorySettings') {
                var GetBackupRepositorySettings_parameters = [];
                var GetBackupRepositorySettings_nodeParam;
                var GetBackupRepositorySettings_nodeParamType;
                result = client.GetBackupRepositorySettings(GetBackupRepositorySettings_parameters);
            }
            if (!errorFlag && node.method === 'SetBackupRepositorySettings') {
                var SetBackupRepositorySettings_parameters = [];
                var SetBackupRepositorySettings_nodeParam;
                var SetBackupRepositorySettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetBackupRepositorySettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetBackupRepositorySettings(SetBackupRepositorySettings_parameters);
            }
            if (!errorFlag && node.method === 'GetRestoreSettings') {
                var GetRestoreSettings_parameters = [];
                var GetRestoreSettings_nodeParam;
                var GetRestoreSettings_nodeParamType;
                result = client.GetRestoreSettings(GetRestoreSettings_parameters);
            }
            if (!errorFlag && node.method === 'SetRestoreSettings') {
                var SetRestoreSettings_parameters = [];
                var SetRestoreSettings_nodeParam;
                var SetRestoreSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetRestoreSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetRestoreSettings(SetRestoreSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListBlackListNumber') {
                var ListBlackListNumber_parameters = [];
                var ListBlackListNumber_nodeParam;
                var ListBlackListNumber_nodeParamType;

                ListBlackListNumber_nodeParam = node.ListBlackListNumber_top;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_topType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.top = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.top = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.top = !!ListBlackListNumber_parameters.top ? ListBlackListNumber_parameters.top : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_skip;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_skipType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.skip = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.skip = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.skip = !!ListBlackListNumber_parameters.skip ? ListBlackListNumber_parameters.skip : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_search;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_searchType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.search = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.search = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.search = !!ListBlackListNumber_parameters.search ? ListBlackListNumber_parameters.search : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_filter;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_filterType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.filter = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.filter = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.filter = !!ListBlackListNumber_parameters.filter ? ListBlackListNumber_parameters.filter : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_count;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_countType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.count = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.count = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.count = !!ListBlackListNumber_parameters.count ? ListBlackListNumber_parameters.count : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_orderby;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_orderbyType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.orderby = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.orderby = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.orderby = !!ListBlackListNumber_parameters.orderby ? ListBlackListNumber_parameters.orderby : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_select;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_selectType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.select = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.select = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.select = !!ListBlackListNumber_parameters.select ? ListBlackListNumber_parameters.select : msg.payload;
                
                ListBlackListNumber_nodeParam = node.ListBlackListNumber_expand;
                ListBlackListNumber_nodeParamType = node.ListBlackListNumber_expandType;
                if (ListBlackListNumber_nodeParamType === 'str') {
                    ListBlackListNumber_parameters.expand = ListBlackListNumber_nodeParam || '';
                } else {
                    ListBlackListNumber_parameters.expand = RED.util.getMessageProperty(msg, ListBlackListNumber_nodeParam);
                }
                ListBlackListNumber_parameters.expand = !!ListBlackListNumber_parameters.expand ? ListBlackListNumber_parameters.expand : msg.payload;
                                result = client.ListBlackListNumber(ListBlackListNumber_parameters);
            }
            if (!errorFlag && node.method === 'CreateBlackListNumber') {
                var CreateBlackListNumber_parameters = [];
                var CreateBlackListNumber_nodeParam;
                var CreateBlackListNumber_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateBlackListNumber_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateBlackListNumber(CreateBlackListNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetBlackListNumber') {
                var GetBlackListNumber_parameters = [];
                var GetBlackListNumber_nodeParam;
                var GetBlackListNumber_nodeParamType;

                GetBlackListNumber_nodeParam = node.GetBlackListNumber_id;
                GetBlackListNumber_nodeParamType = node.GetBlackListNumber_idType;
                if (GetBlackListNumber_nodeParamType === 'str') {
                    GetBlackListNumber_parameters.id = GetBlackListNumber_nodeParam || '';
                } else {
                    GetBlackListNumber_parameters.id = RED.util.getMessageProperty(msg, GetBlackListNumber_nodeParam);
                }
                GetBlackListNumber_parameters.id = !!GetBlackListNumber_parameters.id ? GetBlackListNumber_parameters.id : msg.payload;
                
                GetBlackListNumber_nodeParam = node.GetBlackListNumber_select;
                GetBlackListNumber_nodeParamType = node.GetBlackListNumber_selectType;
                if (GetBlackListNumber_nodeParamType === 'str') {
                    GetBlackListNumber_parameters.select = GetBlackListNumber_nodeParam || '';
                } else {
                    GetBlackListNumber_parameters.select = RED.util.getMessageProperty(msg, GetBlackListNumber_nodeParam);
                }
                GetBlackListNumber_parameters.select = !!GetBlackListNumber_parameters.select ? GetBlackListNumber_parameters.select : msg.payload;
                
                GetBlackListNumber_nodeParam = node.GetBlackListNumber_expand;
                GetBlackListNumber_nodeParamType = node.GetBlackListNumber_expandType;
                if (GetBlackListNumber_nodeParamType === 'str') {
                    GetBlackListNumber_parameters.expand = GetBlackListNumber_nodeParam || '';
                } else {
                    GetBlackListNumber_parameters.expand = RED.util.getMessageProperty(msg, GetBlackListNumber_nodeParam);
                }
                GetBlackListNumber_parameters.expand = !!GetBlackListNumber_parameters.expand ? GetBlackListNumber_parameters.expand : msg.payload;
                                result = client.GetBlackListNumber(GetBlackListNumber_parameters);
            }
            if (!errorFlag && node.method === 'UpdateBlackListNumber') {
                var UpdateBlackListNumber_parameters = [];
                var UpdateBlackListNumber_nodeParam;
                var UpdateBlackListNumber_nodeParamType;

                UpdateBlackListNumber_nodeParam = node.UpdateBlackListNumber_id;
                UpdateBlackListNumber_nodeParamType = node.UpdateBlackListNumber_idType;
                if (UpdateBlackListNumber_nodeParamType === 'str') {
                    UpdateBlackListNumber_parameters.id = UpdateBlackListNumber_nodeParam || '';
                } else {
                    UpdateBlackListNumber_parameters.id = RED.util.getMessageProperty(msg, UpdateBlackListNumber_nodeParam);
                }
                UpdateBlackListNumber_parameters.id = !!UpdateBlackListNumber_parameters.id ? UpdateBlackListNumber_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateBlackListNumber_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateBlackListNumber(UpdateBlackListNumber_parameters);
            }
            if (!errorFlag && node.method === 'DeleteBlackListNumber') {
                var DeleteBlackListNumber_parameters = [];
                var DeleteBlackListNumber_nodeParam;
                var DeleteBlackListNumber_nodeParamType;

                DeleteBlackListNumber_nodeParam = node.DeleteBlackListNumber_id;
                DeleteBlackListNumber_nodeParamType = node.DeleteBlackListNumber_idType;
                if (DeleteBlackListNumber_nodeParamType === 'str') {
                    DeleteBlackListNumber_parameters.id = DeleteBlackListNumber_nodeParam || '';
                } else {
                    DeleteBlackListNumber_parameters.id = RED.util.getMessageProperty(msg, DeleteBlackListNumber_nodeParam);
                }
                DeleteBlackListNumber_parameters.id = !!DeleteBlackListNumber_parameters.id ? DeleteBlackListNumber_parameters.id : msg.payload;
                
                DeleteBlackListNumber_nodeParam = node.DeleteBlackListNumber_ifMatch;
                DeleteBlackListNumber_nodeParamType = node.DeleteBlackListNumber_ifMatchType;
                if (DeleteBlackListNumber_nodeParamType === 'str') {
                    DeleteBlackListNumber_parameters.ifMatch = DeleteBlackListNumber_nodeParam || '';
                } else {
                    DeleteBlackListNumber_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteBlackListNumber_nodeParam);
                }
                DeleteBlackListNumber_parameters.ifMatch = !!DeleteBlackListNumber_parameters.ifMatch ? DeleteBlackListNumber_parameters.ifMatch : msg.payload;
                                result = client.DeleteBlackListNumber(DeleteBlackListNumber_parameters);
            }
            if (!errorFlag && node.method === 'BulkNumbersDelete') {
                var BulkNumbersDelete_parameters = [];
                var BulkNumbersDelete_nodeParam;
                var BulkNumbersDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkNumbersDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkNumbersDelete(BulkNumbersDelete_parameters);
            }
            if (!errorFlag && node.method === 'ListBlocklistAddr') {
                var ListBlocklistAddr_parameters = [];
                var ListBlocklistAddr_nodeParam;
                var ListBlocklistAddr_nodeParamType;

                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_top;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_topType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.top = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.top = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.top = !!ListBlocklistAddr_parameters.top ? ListBlocklistAddr_parameters.top : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_skip;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_skipType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.skip = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.skip = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.skip = !!ListBlocklistAddr_parameters.skip ? ListBlocklistAddr_parameters.skip : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_search;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_searchType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.search = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.search = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.search = !!ListBlocklistAddr_parameters.search ? ListBlocklistAddr_parameters.search : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_filter;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_filterType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.filter = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.filter = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.filter = !!ListBlocklistAddr_parameters.filter ? ListBlocklistAddr_parameters.filter : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_count;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_countType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.count = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.count = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.count = !!ListBlocklistAddr_parameters.count ? ListBlocklistAddr_parameters.count : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_orderby;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_orderbyType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.orderby = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.orderby = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.orderby = !!ListBlocklistAddr_parameters.orderby ? ListBlocklistAddr_parameters.orderby : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_select;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_selectType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.select = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.select = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.select = !!ListBlocklistAddr_parameters.select ? ListBlocklistAddr_parameters.select : msg.payload;
                
                ListBlocklistAddr_nodeParam = node.ListBlocklistAddr_expand;
                ListBlocklistAddr_nodeParamType = node.ListBlocklistAddr_expandType;
                if (ListBlocklistAddr_nodeParamType === 'str') {
                    ListBlocklistAddr_parameters.expand = ListBlocklistAddr_nodeParam || '';
                } else {
                    ListBlocklistAddr_parameters.expand = RED.util.getMessageProperty(msg, ListBlocklistAddr_nodeParam);
                }
                ListBlocklistAddr_parameters.expand = !!ListBlocklistAddr_parameters.expand ? ListBlocklistAddr_parameters.expand : msg.payload;
                                result = client.ListBlocklistAddr(ListBlocklistAddr_parameters);
            }
            if (!errorFlag && node.method === 'CreateBlocklistAddr') {
                var CreateBlocklistAddr_parameters = [];
                var CreateBlocklistAddr_nodeParam;
                var CreateBlocklistAddr_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateBlocklistAddr_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateBlocklistAddr(CreateBlocklistAddr_parameters);
            }
            if (!errorFlag && node.method === 'GetBlocklistAddr') {
                var GetBlocklistAddr_parameters = [];
                var GetBlocklistAddr_nodeParam;
                var GetBlocklistAddr_nodeParamType;

                GetBlocklistAddr_nodeParam = node.GetBlocklistAddr_id;
                GetBlocklistAddr_nodeParamType = node.GetBlocklistAddr_idType;
                if (GetBlocklistAddr_nodeParamType === 'str') {
                    GetBlocklistAddr_parameters.id = GetBlocklistAddr_nodeParam || '';
                } else {
                    GetBlocklistAddr_parameters.id = RED.util.getMessageProperty(msg, GetBlocklistAddr_nodeParam);
                }
                GetBlocklistAddr_parameters.id = !!GetBlocklistAddr_parameters.id ? GetBlocklistAddr_parameters.id : msg.payload;
                
                GetBlocklistAddr_nodeParam = node.GetBlocklistAddr_select;
                GetBlocklistAddr_nodeParamType = node.GetBlocklistAddr_selectType;
                if (GetBlocklistAddr_nodeParamType === 'str') {
                    GetBlocklistAddr_parameters.select = GetBlocklistAddr_nodeParam || '';
                } else {
                    GetBlocklistAddr_parameters.select = RED.util.getMessageProperty(msg, GetBlocklistAddr_nodeParam);
                }
                GetBlocklistAddr_parameters.select = !!GetBlocklistAddr_parameters.select ? GetBlocklistAddr_parameters.select : msg.payload;
                
                GetBlocklistAddr_nodeParam = node.GetBlocklistAddr_expand;
                GetBlocklistAddr_nodeParamType = node.GetBlocklistAddr_expandType;
                if (GetBlocklistAddr_nodeParamType === 'str') {
                    GetBlocklistAddr_parameters.expand = GetBlocklistAddr_nodeParam || '';
                } else {
                    GetBlocklistAddr_parameters.expand = RED.util.getMessageProperty(msg, GetBlocklistAddr_nodeParam);
                }
                GetBlocklistAddr_parameters.expand = !!GetBlocklistAddr_parameters.expand ? GetBlocklistAddr_parameters.expand : msg.payload;
                                result = client.GetBlocklistAddr(GetBlocklistAddr_parameters);
            }
            if (!errorFlag && node.method === 'UpdateBlocklistAddr') {
                var UpdateBlocklistAddr_parameters = [];
                var UpdateBlocklistAddr_nodeParam;
                var UpdateBlocklistAddr_nodeParamType;

                UpdateBlocklistAddr_nodeParam = node.UpdateBlocklistAddr_id;
                UpdateBlocklistAddr_nodeParamType = node.UpdateBlocklistAddr_idType;
                if (UpdateBlocklistAddr_nodeParamType === 'str') {
                    UpdateBlocklistAddr_parameters.id = UpdateBlocklistAddr_nodeParam || '';
                } else {
                    UpdateBlocklistAddr_parameters.id = RED.util.getMessageProperty(msg, UpdateBlocklistAddr_nodeParam);
                }
                UpdateBlocklistAddr_parameters.id = !!UpdateBlocklistAddr_parameters.id ? UpdateBlocklistAddr_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateBlocklistAddr_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateBlocklistAddr(UpdateBlocklistAddr_parameters);
            }
            if (!errorFlag && node.method === 'DeleteBlocklistAddr') {
                var DeleteBlocklistAddr_parameters = [];
                var DeleteBlocklistAddr_nodeParam;
                var DeleteBlocklistAddr_nodeParamType;

                DeleteBlocklistAddr_nodeParam = node.DeleteBlocklistAddr_id;
                DeleteBlocklistAddr_nodeParamType = node.DeleteBlocklistAddr_idType;
                if (DeleteBlocklistAddr_nodeParamType === 'str') {
                    DeleteBlocklistAddr_parameters.id = DeleteBlocklistAddr_nodeParam || '';
                } else {
                    DeleteBlocklistAddr_parameters.id = RED.util.getMessageProperty(msg, DeleteBlocklistAddr_nodeParam);
                }
                DeleteBlocklistAddr_parameters.id = !!DeleteBlocklistAddr_parameters.id ? DeleteBlocklistAddr_parameters.id : msg.payload;
                
                DeleteBlocklistAddr_nodeParam = node.DeleteBlocklistAddr_ifMatch;
                DeleteBlocklistAddr_nodeParamType = node.DeleteBlocklistAddr_ifMatchType;
                if (DeleteBlocklistAddr_nodeParamType === 'str') {
                    DeleteBlocklistAddr_parameters.ifMatch = DeleteBlocklistAddr_nodeParam || '';
                } else {
                    DeleteBlocklistAddr_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteBlocklistAddr_nodeParam);
                }
                DeleteBlocklistAddr_parameters.ifMatch = !!DeleteBlocklistAddr_parameters.ifMatch ? DeleteBlocklistAddr_parameters.ifMatch : msg.payload;
                                result = client.DeleteBlocklistAddr(DeleteBlocklistAddr_parameters);
            }
            if (!errorFlag && node.method === 'BulkIpsDelete') {
                var BulkIpsDelete_parameters = [];
                var BulkIpsDelete_nodeParam;
                var BulkIpsDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkIpsDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkIpsDelete(BulkIpsDelete_parameters);
            }
            if (!errorFlag && node.method === 'ListCallCostSettings') {
                var ListCallCostSettings_parameters = [];
                var ListCallCostSettings_nodeParam;
                var ListCallCostSettings_nodeParamType;

                ListCallCostSettings_nodeParam = node.ListCallCostSettings_top;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_topType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.top = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.top = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.top = !!ListCallCostSettings_parameters.top ? ListCallCostSettings_parameters.top : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_skip;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_skipType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.skip = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.skip = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.skip = !!ListCallCostSettings_parameters.skip ? ListCallCostSettings_parameters.skip : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_search;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_searchType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.search = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.search = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.search = !!ListCallCostSettings_parameters.search ? ListCallCostSettings_parameters.search : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_filter;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_filterType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.filter = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.filter = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.filter = !!ListCallCostSettings_parameters.filter ? ListCallCostSettings_parameters.filter : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_count;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_countType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.count = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.count = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.count = !!ListCallCostSettings_parameters.count ? ListCallCostSettings_parameters.count : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_orderby;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_orderbyType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.orderby = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.orderby = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.orderby = !!ListCallCostSettings_parameters.orderby ? ListCallCostSettings_parameters.orderby : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_select;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_selectType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.select = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.select = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.select = !!ListCallCostSettings_parameters.select ? ListCallCostSettings_parameters.select : msg.payload;
                
                ListCallCostSettings_nodeParam = node.ListCallCostSettings_expand;
                ListCallCostSettings_nodeParamType = node.ListCallCostSettings_expandType;
                if (ListCallCostSettings_nodeParamType === 'str') {
                    ListCallCostSettings_parameters.expand = ListCallCostSettings_nodeParam || '';
                } else {
                    ListCallCostSettings_parameters.expand = RED.util.getMessageProperty(msg, ListCallCostSettings_nodeParam);
                }
                ListCallCostSettings_parameters.expand = !!ListCallCostSettings_parameters.expand ? ListCallCostSettings_parameters.expand : msg.payload;
                                result = client.ListCallCostSettings(ListCallCostSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCost') {
                var UpdateCost_parameters = [];
                var UpdateCost_nodeParam;
                var UpdateCost_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCost_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCost(UpdateCost_parameters);
            }
            if (!errorFlag && node.method === 'ExportCallCosts') {
                var ExportCallCosts_parameters = [];
                var ExportCallCosts_nodeParam;
                var ExportCallCosts_nodeParamType;
                result = client.ExportCallCosts(ExportCallCosts_parameters);
            }
            if (!errorFlag && node.method === 'GetCallFlowApp') {
                var GetCallFlowApp_parameters = [];
                var GetCallFlowApp_nodeParam;
                var GetCallFlowApp_nodeParamType;

                GetCallFlowApp_nodeParam = node.GetCallFlowApp_id;
                GetCallFlowApp_nodeParamType = node.GetCallFlowApp_idType;
                if (GetCallFlowApp_nodeParamType === 'str') {
                    GetCallFlowApp_parameters.id = GetCallFlowApp_nodeParam || '';
                } else {
                    GetCallFlowApp_parameters.id = RED.util.getMessageProperty(msg, GetCallFlowApp_nodeParam);
                }
                GetCallFlowApp_parameters.id = !!GetCallFlowApp_parameters.id ? GetCallFlowApp_parameters.id : msg.payload;
                
                GetCallFlowApp_nodeParam = node.GetCallFlowApp_select;
                GetCallFlowApp_nodeParamType = node.GetCallFlowApp_selectType;
                if (GetCallFlowApp_nodeParamType === 'str') {
                    GetCallFlowApp_parameters.select = GetCallFlowApp_nodeParam || '';
                } else {
                    GetCallFlowApp_parameters.select = RED.util.getMessageProperty(msg, GetCallFlowApp_nodeParam);
                }
                GetCallFlowApp_parameters.select = !!GetCallFlowApp_parameters.select ? GetCallFlowApp_parameters.select : msg.payload;
                
                GetCallFlowApp_nodeParam = node.GetCallFlowApp_expand;
                GetCallFlowApp_nodeParamType = node.GetCallFlowApp_expandType;
                if (GetCallFlowApp_nodeParamType === 'str') {
                    GetCallFlowApp_parameters.expand = GetCallFlowApp_nodeParam || '';
                } else {
                    GetCallFlowApp_parameters.expand = RED.util.getMessageProperty(msg, GetCallFlowApp_nodeParam);
                }
                GetCallFlowApp_parameters.expand = !!GetCallFlowApp_parameters.expand ? GetCallFlowApp_parameters.expand : msg.payload;
                                result = client.GetCallFlowApp(GetCallFlowApp_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCallFlowApp') {
                var UpdateCallFlowApp_parameters = [];
                var UpdateCallFlowApp_nodeParam;
                var UpdateCallFlowApp_nodeParamType;

                UpdateCallFlowApp_nodeParam = node.UpdateCallFlowApp_id;
                UpdateCallFlowApp_nodeParamType = node.UpdateCallFlowApp_idType;
                if (UpdateCallFlowApp_nodeParamType === 'str') {
                    UpdateCallFlowApp_parameters.id = UpdateCallFlowApp_nodeParam || '';
                } else {
                    UpdateCallFlowApp_parameters.id = RED.util.getMessageProperty(msg, UpdateCallFlowApp_nodeParam);
                }
                UpdateCallFlowApp_parameters.id = !!UpdateCallFlowApp_parameters.id ? UpdateCallFlowApp_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateCallFlowApp_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCallFlowApp(UpdateCallFlowApp_parameters);
            }
            if (!errorFlag && node.method === 'DeleteCallFlowApp') {
                var DeleteCallFlowApp_parameters = [];
                var DeleteCallFlowApp_nodeParam;
                var DeleteCallFlowApp_nodeParamType;

                DeleteCallFlowApp_nodeParam = node.DeleteCallFlowApp_id;
                DeleteCallFlowApp_nodeParamType = node.DeleteCallFlowApp_idType;
                if (DeleteCallFlowApp_nodeParamType === 'str') {
                    DeleteCallFlowApp_parameters.id = DeleteCallFlowApp_nodeParam || '';
                } else {
                    DeleteCallFlowApp_parameters.id = RED.util.getMessageProperty(msg, DeleteCallFlowApp_nodeParam);
                }
                DeleteCallFlowApp_parameters.id = !!DeleteCallFlowApp_parameters.id ? DeleteCallFlowApp_parameters.id : msg.payload;
                
                DeleteCallFlowApp_nodeParam = node.DeleteCallFlowApp_ifMatch;
                DeleteCallFlowApp_nodeParamType = node.DeleteCallFlowApp_ifMatchType;
                if (DeleteCallFlowApp_nodeParamType === 'str') {
                    DeleteCallFlowApp_parameters.ifMatch = DeleteCallFlowApp_nodeParam || '';
                } else {
                    DeleteCallFlowApp_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteCallFlowApp_nodeParam);
                }
                DeleteCallFlowApp_parameters.ifMatch = !!DeleteCallFlowApp_parameters.ifMatch ? DeleteCallFlowApp_parameters.ifMatch : msg.payload;
                                result = client.DeleteCallFlowApp(DeleteCallFlowApp_parameters);
            }
            if (!errorFlag && node.method === 'ListCallFlowApp') {
                var ListCallFlowApp_parameters = [];
                var ListCallFlowApp_nodeParam;
                var ListCallFlowApp_nodeParamType;

                ListCallFlowApp_nodeParam = node.ListCallFlowApp_top;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_topType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.top = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.top = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.top = !!ListCallFlowApp_parameters.top ? ListCallFlowApp_parameters.top : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_skip;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_skipType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.skip = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.skip = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.skip = !!ListCallFlowApp_parameters.skip ? ListCallFlowApp_parameters.skip : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_search;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_searchType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.search = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.search = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.search = !!ListCallFlowApp_parameters.search ? ListCallFlowApp_parameters.search : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_filter;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_filterType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.filter = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.filter = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.filter = !!ListCallFlowApp_parameters.filter ? ListCallFlowApp_parameters.filter : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_count;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_countType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.count = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.count = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.count = !!ListCallFlowApp_parameters.count ? ListCallFlowApp_parameters.count : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_orderby;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_orderbyType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.orderby = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.orderby = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.orderby = !!ListCallFlowApp_parameters.orderby ? ListCallFlowApp_parameters.orderby : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_select;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_selectType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.select = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.select = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.select = !!ListCallFlowApp_parameters.select ? ListCallFlowApp_parameters.select : msg.payload;
                
                ListCallFlowApp_nodeParam = node.ListCallFlowApp_expand;
                ListCallFlowApp_nodeParamType = node.ListCallFlowApp_expandType;
                if (ListCallFlowApp_nodeParamType === 'str') {
                    ListCallFlowApp_parameters.expand = ListCallFlowApp_nodeParam || '';
                } else {
                    ListCallFlowApp_parameters.expand = RED.util.getMessageProperty(msg, ListCallFlowApp_nodeParam);
                }
                ListCallFlowApp_parameters.expand = !!ListCallFlowApp_parameters.expand ? ListCallFlowApp_parameters.expand : msg.payload;
                                result = client.ListCallFlowApp(ListCallFlowApp_parameters);
            }
            if (!errorFlag && node.method === 'CreateCallFlowApp') {
                var CreateCallFlowApp_parameters = [];
                var CreateCallFlowApp_nodeParam;
                var CreateCallFlowApp_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateCallFlowApp_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateCallFlowApp(CreateCallFlowApp_parameters);
            }
            if (!errorFlag && node.method === 'GetAudioFiles') {
                var GetAudioFiles_parameters = [];
                var GetAudioFiles_nodeParam;
                var GetAudioFiles_nodeParamType;

                GetAudioFiles_nodeParam = node.GetAudioFiles_id;
                GetAudioFiles_nodeParamType = node.GetAudioFiles_idType;
                if (GetAudioFiles_nodeParamType === 'str') {
                    GetAudioFiles_parameters.id = GetAudioFiles_nodeParam || '';
                } else {
                    GetAudioFiles_parameters.id = RED.util.getMessageProperty(msg, GetAudioFiles_nodeParam);
                }
                GetAudioFiles_parameters.id = !!GetAudioFiles_parameters.id ? GetAudioFiles_parameters.id : msg.payload;
                
                GetAudioFiles_nodeParam = node.GetAudioFiles_top;
                GetAudioFiles_nodeParamType = node.GetAudioFiles_topType;
                if (GetAudioFiles_nodeParamType === 'str') {
                    GetAudioFiles_parameters.top = GetAudioFiles_nodeParam || '';
                } else {
                    GetAudioFiles_parameters.top = RED.util.getMessageProperty(msg, GetAudioFiles_nodeParam);
                }
                GetAudioFiles_parameters.top = !!GetAudioFiles_parameters.top ? GetAudioFiles_parameters.top : msg.payload;
                
                GetAudioFiles_nodeParam = node.GetAudioFiles_skip;
                GetAudioFiles_nodeParamType = node.GetAudioFiles_skipType;
                if (GetAudioFiles_nodeParamType === 'str') {
                    GetAudioFiles_parameters.skip = GetAudioFiles_nodeParam || '';
                } else {
                    GetAudioFiles_parameters.skip = RED.util.getMessageProperty(msg, GetAudioFiles_nodeParam);
                }
                GetAudioFiles_parameters.skip = !!GetAudioFiles_parameters.skip ? GetAudioFiles_parameters.skip : msg.payload;
                
                GetAudioFiles_nodeParam = node.GetAudioFiles_search;
                GetAudioFiles_nodeParamType = node.GetAudioFiles_searchType;
                if (GetAudioFiles_nodeParamType === 'str') {
                    GetAudioFiles_parameters.search = GetAudioFiles_nodeParam || '';
                } else {
                    GetAudioFiles_parameters.search = RED.util.getMessageProperty(msg, GetAudioFiles_nodeParam);
                }
                GetAudioFiles_parameters.search = !!GetAudioFiles_parameters.search ? GetAudioFiles_parameters.search : msg.payload;
                
                GetAudioFiles_nodeParam = node.GetAudioFiles_filter;
                GetAudioFiles_nodeParamType = node.GetAudioFiles_filterType;
                if (GetAudioFiles_nodeParamType === 'str') {
                    GetAudioFiles_parameters.filter = GetAudioFiles_nodeParam || '';
                } else {
                    GetAudioFiles_parameters.filter = RED.util.getMessageProperty(msg, GetAudioFiles_nodeParam);
                }
                GetAudioFiles_parameters.filter = !!GetAudioFiles_parameters.filter ? GetAudioFiles_parameters.filter : msg.payload;
                
                GetAudioFiles_nodeParam = node.GetAudioFiles_count;
                GetAudioFiles_nodeParamType = node.GetAudioFiles_countType;
                if (GetAudioFiles_nodeParamType === 'str') {
                    GetAudioFiles_parameters.count = GetAudioFiles_nodeParam || '';
                } else {
                    GetAudioFiles_parameters.count = RED.util.getMessageProperty(msg, GetAudioFiles_nodeParam);
                }
                GetAudioFiles_parameters.count = !!GetAudioFiles_parameters.count ? GetAudioFiles_parameters.count : msg.payload;
                                result = client.GetAudioFiles(GetAudioFiles_parameters);
            }
            if (!errorFlag && node.method === 'DeleteAudioFile') {
                var DeleteAudioFile_parameters = [];
                var DeleteAudioFile_nodeParam;
                var DeleteAudioFile_nodeParamType;

                DeleteAudioFile_nodeParam = node.DeleteAudioFile_id;
                DeleteAudioFile_nodeParamType = node.DeleteAudioFile_idType;
                if (DeleteAudioFile_nodeParamType === 'str') {
                    DeleteAudioFile_parameters.id = DeleteAudioFile_nodeParam || '';
                } else {
                    DeleteAudioFile_parameters.id = RED.util.getMessageProperty(msg, DeleteAudioFile_nodeParam);
                }
                DeleteAudioFile_parameters.id = !!DeleteAudioFile_parameters.id ? DeleteAudioFile_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    DeleteAudioFile_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.DeleteAudioFile(DeleteAudioFile_parameters);
            }
            if (!errorFlag && node.method === 'DownloadCallHistory') {
                var DownloadCallHistory_parameters = [];
                var DownloadCallHistory_nodeParam;
                var DownloadCallHistory_nodeParamType;

                DownloadCallHistory_nodeParam = node.DownloadCallHistory_top;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_topType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.top = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.top = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.top = !!DownloadCallHistory_parameters.top ? DownloadCallHistory_parameters.top : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_skip;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_skipType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.skip = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.skip = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.skip = !!DownloadCallHistory_parameters.skip ? DownloadCallHistory_parameters.skip : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_search;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_searchType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.search = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.search = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.search = !!DownloadCallHistory_parameters.search ? DownloadCallHistory_parameters.search : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_filter;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_filterType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.filter = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.filter = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.filter = !!DownloadCallHistory_parameters.filter ? DownloadCallHistory_parameters.filter : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_count;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_countType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.count = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.count = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.count = !!DownloadCallHistory_parameters.count ? DownloadCallHistory_parameters.count : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_select;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_selectType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.select = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.select = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.select = !!DownloadCallHistory_parameters.select ? DownloadCallHistory_parameters.select : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_orderby;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_orderbyType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.orderby = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.orderby = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.orderby = !!DownloadCallHistory_parameters.orderby ? DownloadCallHistory_parameters.orderby : msg.payload;
                
                DownloadCallHistory_nodeParam = node.DownloadCallHistory_expand;
                DownloadCallHistory_nodeParamType = node.DownloadCallHistory_expandType;
                if (DownloadCallHistory_nodeParamType === 'str') {
                    DownloadCallHistory_parameters.expand = DownloadCallHistory_nodeParam || '';
                } else {
                    DownloadCallHistory_parameters.expand = RED.util.getMessageProperty(msg, DownloadCallHistory_nodeParam);
                }
                DownloadCallHistory_parameters.expand = !!DownloadCallHistory_parameters.expand ? DownloadCallHistory_parameters.expand : msg.payload;
                                result = client.DownloadCallHistory(DownloadCallHistory_parameters);
            }
            if (!errorFlag && node.method === 'ListCallHistoryView') {
                var ListCallHistoryView_parameters = [];
                var ListCallHistoryView_nodeParam;
                var ListCallHistoryView_nodeParamType;

                ListCallHistoryView_nodeParam = node.ListCallHistoryView_top;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_topType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.top = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.top = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.top = !!ListCallHistoryView_parameters.top ? ListCallHistoryView_parameters.top : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_skip;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_skipType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.skip = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.skip = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.skip = !!ListCallHistoryView_parameters.skip ? ListCallHistoryView_parameters.skip : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_search;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_searchType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.search = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.search = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.search = !!ListCallHistoryView_parameters.search ? ListCallHistoryView_parameters.search : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_filter;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_filterType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.filter = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.filter = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.filter = !!ListCallHistoryView_parameters.filter ? ListCallHistoryView_parameters.filter : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_count;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_countType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.count = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.count = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.count = !!ListCallHistoryView_parameters.count ? ListCallHistoryView_parameters.count : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_orderby;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_orderbyType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.orderby = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.orderby = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.orderby = !!ListCallHistoryView_parameters.orderby ? ListCallHistoryView_parameters.orderby : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_select;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_selectType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.select = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.select = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.select = !!ListCallHistoryView_parameters.select ? ListCallHistoryView_parameters.select : msg.payload;
                
                ListCallHistoryView_nodeParam = node.ListCallHistoryView_expand;
                ListCallHistoryView_nodeParamType = node.ListCallHistoryView_expandType;
                if (ListCallHistoryView_nodeParamType === 'str') {
                    ListCallHistoryView_parameters.expand = ListCallHistoryView_nodeParam || '';
                } else {
                    ListCallHistoryView_parameters.expand = RED.util.getMessageProperty(msg, ListCallHistoryView_nodeParam);
                }
                ListCallHistoryView_parameters.expand = !!ListCallHistoryView_parameters.expand ? ListCallHistoryView_parameters.expand : msg.payload;
                                result = client.ListCallHistoryView(ListCallHistoryView_parameters);
            }
            if (!errorFlag && node.method === 'GetCallParkingSettings') {
                var GetCallParkingSettings_parameters = [];
                var GetCallParkingSettings_nodeParam;
                var GetCallParkingSettings_nodeParamType;

                GetCallParkingSettings_nodeParam = node.GetCallParkingSettings_select;
                GetCallParkingSettings_nodeParamType = node.GetCallParkingSettings_selectType;
                if (GetCallParkingSettings_nodeParamType === 'str') {
                    GetCallParkingSettings_parameters.select = GetCallParkingSettings_nodeParam || '';
                } else {
                    GetCallParkingSettings_parameters.select = RED.util.getMessageProperty(msg, GetCallParkingSettings_nodeParam);
                }
                GetCallParkingSettings_parameters.select = !!GetCallParkingSettings_parameters.select ? GetCallParkingSettings_parameters.select : msg.payload;
                
                GetCallParkingSettings_nodeParam = node.GetCallParkingSettings_expand;
                GetCallParkingSettings_nodeParamType = node.GetCallParkingSettings_expandType;
                if (GetCallParkingSettings_nodeParamType === 'str') {
                    GetCallParkingSettings_parameters.expand = GetCallParkingSettings_nodeParam || '';
                } else {
                    GetCallParkingSettings_parameters.expand = RED.util.getMessageProperty(msg, GetCallParkingSettings_nodeParam);
                }
                GetCallParkingSettings_parameters.expand = !!GetCallParkingSettings_parameters.expand ? GetCallParkingSettings_parameters.expand : msg.payload;
                                result = client.GetCallParkingSettings(GetCallParkingSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCallParkingSettings') {
                var UpdateCallParkingSettings_parameters = [];
                var UpdateCallParkingSettings_nodeParam;
                var UpdateCallParkingSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCallParkingSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCallParkingSettings(UpdateCallParkingSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetCallTypesSettings') {
                var GetCallTypesSettings_parameters = [];
                var GetCallTypesSettings_nodeParam;
                var GetCallTypesSettings_nodeParamType;

                GetCallTypesSettings_nodeParam = node.GetCallTypesSettings_select;
                GetCallTypesSettings_nodeParamType = node.GetCallTypesSettings_selectType;
                if (GetCallTypesSettings_nodeParamType === 'str') {
                    GetCallTypesSettings_parameters.select = GetCallTypesSettings_nodeParam || '';
                } else {
                    GetCallTypesSettings_parameters.select = RED.util.getMessageProperty(msg, GetCallTypesSettings_nodeParam);
                }
                GetCallTypesSettings_parameters.select = !!GetCallTypesSettings_parameters.select ? GetCallTypesSettings_parameters.select : msg.payload;
                
                GetCallTypesSettings_nodeParam = node.GetCallTypesSettings_expand;
                GetCallTypesSettings_nodeParamType = node.GetCallTypesSettings_expandType;
                if (GetCallTypesSettings_nodeParamType === 'str') {
                    GetCallTypesSettings_parameters.expand = GetCallTypesSettings_nodeParam || '';
                } else {
                    GetCallTypesSettings_parameters.expand = RED.util.getMessageProperty(msg, GetCallTypesSettings_nodeParam);
                }
                GetCallTypesSettings_parameters.expand = !!GetCallTypesSettings_parameters.expand ? GetCallTypesSettings_parameters.expand : msg.payload;
                                result = client.GetCallTypesSettings(GetCallTypesSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCallTypesSettings') {
                var UpdateCallTypesSettings_parameters = [];
                var UpdateCallTypesSettings_nodeParam;
                var UpdateCallTypesSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCallTypesSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCallTypesSettings(UpdateCallTypesSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetCDRSettings') {
                var GetCDRSettings_parameters = [];
                var GetCDRSettings_nodeParam;
                var GetCDRSettings_nodeParamType;

                GetCDRSettings_nodeParam = node.GetCDRSettings_select;
                GetCDRSettings_nodeParamType = node.GetCDRSettings_selectType;
                if (GetCDRSettings_nodeParamType === 'str') {
                    GetCDRSettings_parameters.select = GetCDRSettings_nodeParam || '';
                } else {
                    GetCDRSettings_parameters.select = RED.util.getMessageProperty(msg, GetCDRSettings_nodeParam);
                }
                GetCDRSettings_parameters.select = !!GetCDRSettings_parameters.select ? GetCDRSettings_parameters.select : msg.payload;
                
                GetCDRSettings_nodeParam = node.GetCDRSettings_expand;
                GetCDRSettings_nodeParamType = node.GetCDRSettings_expandType;
                if (GetCDRSettings_nodeParamType === 'str') {
                    GetCDRSettings_parameters.expand = GetCDRSettings_nodeParam || '';
                } else {
                    GetCDRSettings_parameters.expand = RED.util.getMessageProperty(msg, GetCDRSettings_nodeParam);
                }
                GetCDRSettings_parameters.expand = !!GetCDRSettings_parameters.expand ? GetCDRSettings_parameters.expand : msg.payload;
                                result = client.GetCDRSettings(GetCDRSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCDRSettings') {
                var UpdateCDRSettings_parameters = [];
                var UpdateCDRSettings_nodeParam;
                var UpdateCDRSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCDRSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCDRSettings(UpdateCDRSettings_parameters);
            }
            if (!errorFlag && node.method === 'DownloadChatHistory') {
                var DownloadChatHistory_parameters = [];
                var DownloadChatHistory_nodeParam;
                var DownloadChatHistory_nodeParamType;

                DownloadChatHistory_nodeParam = node.DownloadChatHistory_clientTimeZone;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_clientTimeZoneType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.clientTimeZone = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.clientTimeZone = !!DownloadChatHistory_parameters.clientTimeZone ? DownloadChatHistory_parameters.clientTimeZone : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_top;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_topType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.top = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.top = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.top = !!DownloadChatHistory_parameters.top ? DownloadChatHistory_parameters.top : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_skip;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_skipType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.skip = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.skip = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.skip = !!DownloadChatHistory_parameters.skip ? DownloadChatHistory_parameters.skip : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_search;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_searchType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.search = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.search = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.search = !!DownloadChatHistory_parameters.search ? DownloadChatHistory_parameters.search : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_filter;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_filterType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.filter = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.filter = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.filter = !!DownloadChatHistory_parameters.filter ? DownloadChatHistory_parameters.filter : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_count;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_countType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.count = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.count = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.count = !!DownloadChatHistory_parameters.count ? DownloadChatHistory_parameters.count : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_select;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_selectType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.select = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.select = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.select = !!DownloadChatHistory_parameters.select ? DownloadChatHistory_parameters.select : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_orderby;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_orderbyType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.orderby = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.orderby = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.orderby = !!DownloadChatHistory_parameters.orderby ? DownloadChatHistory_parameters.orderby : msg.payload;
                
                DownloadChatHistory_nodeParam = node.DownloadChatHistory_expand;
                DownloadChatHistory_nodeParamType = node.DownloadChatHistory_expandType;
                if (DownloadChatHistory_nodeParamType === 'str') {
                    DownloadChatHistory_parameters.expand = DownloadChatHistory_nodeParam || '';
                } else {
                    DownloadChatHistory_parameters.expand = RED.util.getMessageProperty(msg, DownloadChatHistory_nodeParam);
                }
                DownloadChatHistory_parameters.expand = !!DownloadChatHistory_parameters.expand ? DownloadChatHistory_parameters.expand : msg.payload;
                                result = client.DownloadChatHistory(DownloadChatHistory_parameters);
            }
            if (!errorFlag && node.method === 'ListChatHistoryView') {
                var ListChatHistoryView_parameters = [];
                var ListChatHistoryView_nodeParam;
                var ListChatHistoryView_nodeParamType;

                ListChatHistoryView_nodeParam = node.ListChatHistoryView_top;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_topType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.top = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.top = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.top = !!ListChatHistoryView_parameters.top ? ListChatHistoryView_parameters.top : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_skip;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_skipType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.skip = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.skip = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.skip = !!ListChatHistoryView_parameters.skip ? ListChatHistoryView_parameters.skip : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_search;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_searchType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.search = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.search = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.search = !!ListChatHistoryView_parameters.search ? ListChatHistoryView_parameters.search : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_filter;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_filterType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.filter = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.filter = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.filter = !!ListChatHistoryView_parameters.filter ? ListChatHistoryView_parameters.filter : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_count;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_countType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.count = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.count = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.count = !!ListChatHistoryView_parameters.count ? ListChatHistoryView_parameters.count : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_orderby;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_orderbyType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.orderby = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.orderby = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.orderby = !!ListChatHistoryView_parameters.orderby ? ListChatHistoryView_parameters.orderby : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_select;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_selectType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.select = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.select = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.select = !!ListChatHistoryView_parameters.select ? ListChatHistoryView_parameters.select : msg.payload;
                
                ListChatHistoryView_nodeParam = node.ListChatHistoryView_expand;
                ListChatHistoryView_nodeParamType = node.ListChatHistoryView_expandType;
                if (ListChatHistoryView_nodeParamType === 'str') {
                    ListChatHistoryView_parameters.expand = ListChatHistoryView_nodeParam || '';
                } else {
                    ListChatHistoryView_parameters.expand = RED.util.getMessageProperty(msg, ListChatHistoryView_nodeParam);
                }
                ListChatHistoryView_parameters.expand = !!ListChatHistoryView_parameters.expand ? ListChatHistoryView_parameters.expand : msg.payload;
                                result = client.ListChatHistoryView(ListChatHistoryView_parameters);
            }
            if (!errorFlag && node.method === 'GetChatLogSettings') {
                var GetChatLogSettings_parameters = [];
                var GetChatLogSettings_nodeParam;
                var GetChatLogSettings_nodeParamType;

                GetChatLogSettings_nodeParam = node.GetChatLogSettings_select;
                GetChatLogSettings_nodeParamType = node.GetChatLogSettings_selectType;
                if (GetChatLogSettings_nodeParamType === 'str') {
                    GetChatLogSettings_parameters.select = GetChatLogSettings_nodeParam || '';
                } else {
                    GetChatLogSettings_parameters.select = RED.util.getMessageProperty(msg, GetChatLogSettings_nodeParam);
                }
                GetChatLogSettings_parameters.select = !!GetChatLogSettings_parameters.select ? GetChatLogSettings_parameters.select : msg.payload;
                
                GetChatLogSettings_nodeParam = node.GetChatLogSettings_expand;
                GetChatLogSettings_nodeParamType = node.GetChatLogSettings_expandType;
                if (GetChatLogSettings_nodeParamType === 'str') {
                    GetChatLogSettings_parameters.expand = GetChatLogSettings_nodeParam || '';
                } else {
                    GetChatLogSettings_parameters.expand = RED.util.getMessageProperty(msg, GetChatLogSettings_nodeParam);
                }
                GetChatLogSettings_parameters.expand = !!GetChatLogSettings_parameters.expand ? GetChatLogSettings_parameters.expand : msg.payload;
                                result = client.GetChatLogSettings(GetChatLogSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateChatLogSettings') {
                var UpdateChatLogSettings_parameters = [];
                var UpdateChatLogSettings_nodeParam;
                var UpdateChatLogSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateChatLogSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateChatLogSettings(UpdateChatLogSettings_parameters);
            }
            if (!errorFlag && node.method === 'DownloadChatMessagesHistory') {
                var DownloadChatMessagesHistory_parameters = [];
                var DownloadChatMessagesHistory_nodeParam;
                var DownloadChatMessagesHistory_nodeParamType;

                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_clientTimeZone;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_clientTimeZoneType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.clientTimeZone = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.clientTimeZone = !!DownloadChatMessagesHistory_parameters.clientTimeZone ? DownloadChatMessagesHistory_parameters.clientTimeZone : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_top;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_topType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.top = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.top = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.top = !!DownloadChatMessagesHistory_parameters.top ? DownloadChatMessagesHistory_parameters.top : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_skip;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_skipType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.skip = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.skip = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.skip = !!DownloadChatMessagesHistory_parameters.skip ? DownloadChatMessagesHistory_parameters.skip : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_search;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_searchType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.search = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.search = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.search = !!DownloadChatMessagesHistory_parameters.search ? DownloadChatMessagesHistory_parameters.search : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_filter;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_filterType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.filter = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.filter = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.filter = !!DownloadChatMessagesHistory_parameters.filter ? DownloadChatMessagesHistory_parameters.filter : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_count;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_countType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.count = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.count = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.count = !!DownloadChatMessagesHistory_parameters.count ? DownloadChatMessagesHistory_parameters.count : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_select;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_selectType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.select = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.select = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.select = !!DownloadChatMessagesHistory_parameters.select ? DownloadChatMessagesHistory_parameters.select : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_orderby;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_orderbyType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.orderby = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.orderby = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.orderby = !!DownloadChatMessagesHistory_parameters.orderby ? DownloadChatMessagesHistory_parameters.orderby : msg.payload;
                
                DownloadChatMessagesHistory_nodeParam = node.DownloadChatMessagesHistory_expand;
                DownloadChatMessagesHistory_nodeParamType = node.DownloadChatMessagesHistory_expandType;
                if (DownloadChatMessagesHistory_nodeParamType === 'str') {
                    DownloadChatMessagesHistory_parameters.expand = DownloadChatMessagesHistory_nodeParam || '';
                } else {
                    DownloadChatMessagesHistory_parameters.expand = RED.util.getMessageProperty(msg, DownloadChatMessagesHistory_nodeParam);
                }
                DownloadChatMessagesHistory_parameters.expand = !!DownloadChatMessagesHistory_parameters.expand ? DownloadChatMessagesHistory_parameters.expand : msg.payload;
                                result = client.DownloadChatMessagesHistory(DownloadChatMessagesHistory_parameters);
            }
            if (!errorFlag && node.method === 'ListChatMessagesHistoryView') {
                var ListChatMessagesHistoryView_parameters = [];
                var ListChatMessagesHistoryView_nodeParam;
                var ListChatMessagesHistoryView_nodeParamType;

                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_top;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_topType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.top = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.top = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.top = !!ListChatMessagesHistoryView_parameters.top ? ListChatMessagesHistoryView_parameters.top : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_skip;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_skipType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.skip = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.skip = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.skip = !!ListChatMessagesHistoryView_parameters.skip ? ListChatMessagesHistoryView_parameters.skip : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_search;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_searchType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.search = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.search = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.search = !!ListChatMessagesHistoryView_parameters.search ? ListChatMessagesHistoryView_parameters.search : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_filter;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_filterType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.filter = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.filter = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.filter = !!ListChatMessagesHistoryView_parameters.filter ? ListChatMessagesHistoryView_parameters.filter : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_count;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_countType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.count = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.count = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.count = !!ListChatMessagesHistoryView_parameters.count ? ListChatMessagesHistoryView_parameters.count : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_orderby;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_orderbyType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.orderby = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.orderby = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.orderby = !!ListChatMessagesHistoryView_parameters.orderby ? ListChatMessagesHistoryView_parameters.orderby : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_select;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_selectType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.select = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.select = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.select = !!ListChatMessagesHistoryView_parameters.select ? ListChatMessagesHistoryView_parameters.select : msg.payload;
                
                ListChatMessagesHistoryView_nodeParam = node.ListChatMessagesHistoryView_expand;
                ListChatMessagesHistoryView_nodeParamType = node.ListChatMessagesHistoryView_expandType;
                if (ListChatMessagesHistoryView_nodeParamType === 'str') {
                    ListChatMessagesHistoryView_parameters.expand = ListChatMessagesHistoryView_nodeParam || '';
                } else {
                    ListChatMessagesHistoryView_parameters.expand = RED.util.getMessageProperty(msg, ListChatMessagesHistoryView_nodeParam);
                }
                ListChatMessagesHistoryView_parameters.expand = !!ListChatMessagesHistoryView_parameters.expand ? ListChatMessagesHistoryView_parameters.expand : msg.payload;
                                result = client.ListChatMessagesHistoryView(ListChatMessagesHistoryView_parameters);
            }
            if (!errorFlag && node.method === 'GetCodecsSettings') {
                var GetCodecsSettings_parameters = [];
                var GetCodecsSettings_nodeParam;
                var GetCodecsSettings_nodeParamType;

                GetCodecsSettings_nodeParam = node.GetCodecsSettings_select;
                GetCodecsSettings_nodeParamType = node.GetCodecsSettings_selectType;
                if (GetCodecsSettings_nodeParamType === 'str') {
                    GetCodecsSettings_parameters.select = GetCodecsSettings_nodeParam || '';
                } else {
                    GetCodecsSettings_parameters.select = RED.util.getMessageProperty(msg, GetCodecsSettings_nodeParam);
                }
                GetCodecsSettings_parameters.select = !!GetCodecsSettings_parameters.select ? GetCodecsSettings_parameters.select : msg.payload;
                
                GetCodecsSettings_nodeParam = node.GetCodecsSettings_expand;
                GetCodecsSettings_nodeParamType = node.GetCodecsSettings_expandType;
                if (GetCodecsSettings_nodeParamType === 'str') {
                    GetCodecsSettings_parameters.expand = GetCodecsSettings_nodeParam || '';
                } else {
                    GetCodecsSettings_parameters.expand = RED.util.getMessageProperty(msg, GetCodecsSettings_nodeParam);
                }
                GetCodecsSettings_parameters.expand = !!GetCodecsSettings_parameters.expand ? GetCodecsSettings_parameters.expand : msg.payload;
                                result = client.GetCodecsSettings(GetCodecsSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCodecsSettings') {
                var UpdateCodecsSettings_parameters = [];
                var UpdateCodecsSettings_nodeParam;
                var UpdateCodecsSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCodecsSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCodecsSettings(UpdateCodecsSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetWebMeetingZones') {
                var GetWebMeetingZones_parameters = [];
                var GetWebMeetingZones_nodeParam;
                var GetWebMeetingZones_nodeParamType;

                GetWebMeetingZones_nodeParam = node.GetWebMeetingZones_top;
                GetWebMeetingZones_nodeParamType = node.GetWebMeetingZones_topType;
                if (GetWebMeetingZones_nodeParamType === 'str') {
                    GetWebMeetingZones_parameters.top = GetWebMeetingZones_nodeParam || '';
                } else {
                    GetWebMeetingZones_parameters.top = RED.util.getMessageProperty(msg, GetWebMeetingZones_nodeParam);
                }
                GetWebMeetingZones_parameters.top = !!GetWebMeetingZones_parameters.top ? GetWebMeetingZones_parameters.top : msg.payload;
                
                GetWebMeetingZones_nodeParam = node.GetWebMeetingZones_skip;
                GetWebMeetingZones_nodeParamType = node.GetWebMeetingZones_skipType;
                if (GetWebMeetingZones_nodeParamType === 'str') {
                    GetWebMeetingZones_parameters.skip = GetWebMeetingZones_nodeParam || '';
                } else {
                    GetWebMeetingZones_parameters.skip = RED.util.getMessageProperty(msg, GetWebMeetingZones_nodeParam);
                }
                GetWebMeetingZones_parameters.skip = !!GetWebMeetingZones_parameters.skip ? GetWebMeetingZones_parameters.skip : msg.payload;
                
                GetWebMeetingZones_nodeParam = node.GetWebMeetingZones_search;
                GetWebMeetingZones_nodeParamType = node.GetWebMeetingZones_searchType;
                if (GetWebMeetingZones_nodeParamType === 'str') {
                    GetWebMeetingZones_parameters.search = GetWebMeetingZones_nodeParam || '';
                } else {
                    GetWebMeetingZones_parameters.search = RED.util.getMessageProperty(msg, GetWebMeetingZones_nodeParam);
                }
                GetWebMeetingZones_parameters.search = !!GetWebMeetingZones_parameters.search ? GetWebMeetingZones_parameters.search : msg.payload;
                
                GetWebMeetingZones_nodeParam = node.GetWebMeetingZones_filter;
                GetWebMeetingZones_nodeParamType = node.GetWebMeetingZones_filterType;
                if (GetWebMeetingZones_nodeParamType === 'str') {
                    GetWebMeetingZones_parameters.filter = GetWebMeetingZones_nodeParam || '';
                } else {
                    GetWebMeetingZones_parameters.filter = RED.util.getMessageProperty(msg, GetWebMeetingZones_nodeParam);
                }
                GetWebMeetingZones_parameters.filter = !!GetWebMeetingZones_parameters.filter ? GetWebMeetingZones_parameters.filter : msg.payload;
                
                GetWebMeetingZones_nodeParam = node.GetWebMeetingZones_count;
                GetWebMeetingZones_nodeParamType = node.GetWebMeetingZones_countType;
                if (GetWebMeetingZones_nodeParamType === 'str') {
                    GetWebMeetingZones_parameters.count = GetWebMeetingZones_nodeParam || '';
                } else {
                    GetWebMeetingZones_parameters.count = RED.util.getMessageProperty(msg, GetWebMeetingZones_nodeParam);
                }
                GetWebMeetingZones_parameters.count = !!GetWebMeetingZones_parameters.count ? GetWebMeetingZones_parameters.count : msg.payload;
                                result = client.GetWebMeetingZones(GetWebMeetingZones_parameters);
            }
            if (!errorFlag && node.method === 'GenerateApiKey') {
                var GenerateApiKey_parameters = [];
                var GenerateApiKey_nodeParam;
                var GenerateApiKey_nodeParamType;
                result = client.GenerateApiKey(GenerateApiKey_parameters);
            }
            if (!errorFlag && node.method === 'GetConferenceSettings') {
                var GetConferenceSettings_parameters = [];
                var GetConferenceSettings_nodeParam;
                var GetConferenceSettings_nodeParamType;

                GetConferenceSettings_nodeParam = node.GetConferenceSettings_select;
                GetConferenceSettings_nodeParamType = node.GetConferenceSettings_selectType;
                if (GetConferenceSettings_nodeParamType === 'str') {
                    GetConferenceSettings_parameters.select = GetConferenceSettings_nodeParam || '';
                } else {
                    GetConferenceSettings_parameters.select = RED.util.getMessageProperty(msg, GetConferenceSettings_nodeParam);
                }
                GetConferenceSettings_parameters.select = !!GetConferenceSettings_parameters.select ? GetConferenceSettings_parameters.select : msg.payload;
                
                GetConferenceSettings_nodeParam = node.GetConferenceSettings_expand;
                GetConferenceSettings_nodeParamType = node.GetConferenceSettings_expandType;
                if (GetConferenceSettings_nodeParamType === 'str') {
                    GetConferenceSettings_parameters.expand = GetConferenceSettings_nodeParam || '';
                } else {
                    GetConferenceSettings_parameters.expand = RED.util.getMessageProperty(msg, GetConferenceSettings_nodeParam);
                }
                GetConferenceSettings_parameters.expand = !!GetConferenceSettings_parameters.expand ? GetConferenceSettings_parameters.expand : msg.payload;
                                result = client.GetConferenceSettings(GetConferenceSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateConferenceSettings') {
                var UpdateConferenceSettings_parameters = [];
                var UpdateConferenceSettings_nodeParam;
                var UpdateConferenceSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateConferenceSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateConferenceSettings(UpdateConferenceSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetMCURequestStatus') {
                var GetMCURequestStatus_parameters = [];
                var GetMCURequestStatus_nodeParam;
                var GetMCURequestStatus_nodeParamType;
                result = client.GetMCURequestStatus(GetMCURequestStatus_parameters);
            }
            if (!errorFlag && node.method === 'GetOnboardMcuData') {
                var GetOnboardMcuData_parameters = [];
                var GetOnboardMcuData_nodeParam;
                var GetOnboardMcuData_nodeParamType;

                GetOnboardMcuData_nodeParam = node.GetOnboardMcuData_top;
                GetOnboardMcuData_nodeParamType = node.GetOnboardMcuData_topType;
                if (GetOnboardMcuData_nodeParamType === 'str') {
                    GetOnboardMcuData_parameters.top = GetOnboardMcuData_nodeParam || '';
                } else {
                    GetOnboardMcuData_parameters.top = RED.util.getMessageProperty(msg, GetOnboardMcuData_nodeParam);
                }
                GetOnboardMcuData_parameters.top = !!GetOnboardMcuData_parameters.top ? GetOnboardMcuData_parameters.top : msg.payload;
                
                GetOnboardMcuData_nodeParam = node.GetOnboardMcuData_skip;
                GetOnboardMcuData_nodeParamType = node.GetOnboardMcuData_skipType;
                if (GetOnboardMcuData_nodeParamType === 'str') {
                    GetOnboardMcuData_parameters.skip = GetOnboardMcuData_nodeParam || '';
                } else {
                    GetOnboardMcuData_parameters.skip = RED.util.getMessageProperty(msg, GetOnboardMcuData_nodeParam);
                }
                GetOnboardMcuData_parameters.skip = !!GetOnboardMcuData_parameters.skip ? GetOnboardMcuData_parameters.skip : msg.payload;
                
                GetOnboardMcuData_nodeParam = node.GetOnboardMcuData_search;
                GetOnboardMcuData_nodeParamType = node.GetOnboardMcuData_searchType;
                if (GetOnboardMcuData_nodeParamType === 'str') {
                    GetOnboardMcuData_parameters.search = GetOnboardMcuData_nodeParam || '';
                } else {
                    GetOnboardMcuData_parameters.search = RED.util.getMessageProperty(msg, GetOnboardMcuData_nodeParam);
                }
                GetOnboardMcuData_parameters.search = !!GetOnboardMcuData_parameters.search ? GetOnboardMcuData_parameters.search : msg.payload;
                
                GetOnboardMcuData_nodeParam = node.GetOnboardMcuData_filter;
                GetOnboardMcuData_nodeParamType = node.GetOnboardMcuData_filterType;
                if (GetOnboardMcuData_nodeParamType === 'str') {
                    GetOnboardMcuData_parameters.filter = GetOnboardMcuData_nodeParam || '';
                } else {
                    GetOnboardMcuData_parameters.filter = RED.util.getMessageProperty(msg, GetOnboardMcuData_nodeParam);
                }
                GetOnboardMcuData_parameters.filter = !!GetOnboardMcuData_parameters.filter ? GetOnboardMcuData_parameters.filter : msg.payload;
                
                GetOnboardMcuData_nodeParam = node.GetOnboardMcuData_count;
                GetOnboardMcuData_nodeParamType = node.GetOnboardMcuData_countType;
                if (GetOnboardMcuData_nodeParamType === 'str') {
                    GetOnboardMcuData_parameters.count = GetOnboardMcuData_nodeParam || '';
                } else {
                    GetOnboardMcuData_parameters.count = RED.util.getMessageProperty(msg, GetOnboardMcuData_nodeParam);
                }
                GetOnboardMcuData_parameters.count = !!GetOnboardMcuData_parameters.count ? GetOnboardMcuData_parameters.count : msg.payload;
                                result = client.GetOnboardMcuData(GetOnboardMcuData_parameters);
            }
            if (!errorFlag && node.method === 'GetOnboardMeetings') {
                var GetOnboardMeetings_parameters = [];
                var GetOnboardMeetings_nodeParam;
                var GetOnboardMeetings_nodeParamType;

                GetOnboardMeetings_nodeParam = node.GetOnboardMeetings_top;
                GetOnboardMeetings_nodeParamType = node.GetOnboardMeetings_topType;
                if (GetOnboardMeetings_nodeParamType === 'str') {
                    GetOnboardMeetings_parameters.top = GetOnboardMeetings_nodeParam || '';
                } else {
                    GetOnboardMeetings_parameters.top = RED.util.getMessageProperty(msg, GetOnboardMeetings_nodeParam);
                }
                GetOnboardMeetings_parameters.top = !!GetOnboardMeetings_parameters.top ? GetOnboardMeetings_parameters.top : msg.payload;
                
                GetOnboardMeetings_nodeParam = node.GetOnboardMeetings_skip;
                GetOnboardMeetings_nodeParamType = node.GetOnboardMeetings_skipType;
                if (GetOnboardMeetings_nodeParamType === 'str') {
                    GetOnboardMeetings_parameters.skip = GetOnboardMeetings_nodeParam || '';
                } else {
                    GetOnboardMeetings_parameters.skip = RED.util.getMessageProperty(msg, GetOnboardMeetings_nodeParam);
                }
                GetOnboardMeetings_parameters.skip = !!GetOnboardMeetings_parameters.skip ? GetOnboardMeetings_parameters.skip : msg.payload;
                
                GetOnboardMeetings_nodeParam = node.GetOnboardMeetings_search;
                GetOnboardMeetings_nodeParamType = node.GetOnboardMeetings_searchType;
                if (GetOnboardMeetings_nodeParamType === 'str') {
                    GetOnboardMeetings_parameters.search = GetOnboardMeetings_nodeParam || '';
                } else {
                    GetOnboardMeetings_parameters.search = RED.util.getMessageProperty(msg, GetOnboardMeetings_nodeParam);
                }
                GetOnboardMeetings_parameters.search = !!GetOnboardMeetings_parameters.search ? GetOnboardMeetings_parameters.search : msg.payload;
                
                GetOnboardMeetings_nodeParam = node.GetOnboardMeetings_filter;
                GetOnboardMeetings_nodeParamType = node.GetOnboardMeetings_filterType;
                if (GetOnboardMeetings_nodeParamType === 'str') {
                    GetOnboardMeetings_parameters.filter = GetOnboardMeetings_nodeParam || '';
                } else {
                    GetOnboardMeetings_parameters.filter = RED.util.getMessageProperty(msg, GetOnboardMeetings_nodeParam);
                }
                GetOnboardMeetings_parameters.filter = !!GetOnboardMeetings_parameters.filter ? GetOnboardMeetings_parameters.filter : msg.payload;
                
                GetOnboardMeetings_nodeParam = node.GetOnboardMeetings_count;
                GetOnboardMeetings_nodeParamType = node.GetOnboardMeetings_countType;
                if (GetOnboardMeetings_nodeParamType === 'str') {
                    GetOnboardMeetings_parameters.count = GetOnboardMeetings_nodeParam || '';
                } else {
                    GetOnboardMeetings_parameters.count = RED.util.getMessageProperty(msg, GetOnboardMeetings_nodeParam);
                }
                GetOnboardMeetings_parameters.count = !!GetOnboardMeetings_parameters.count ? GetOnboardMeetings_parameters.count : msg.payload;
                                result = client.GetOnboardMeetings(GetOnboardMeetings_parameters);
            }
            if (!errorFlag && node.method === 'GetMCURows') {
                var GetMCURows_parameters = [];
                var GetMCURows_nodeParam;
                var GetMCURows_nodeParamType;

                GetMCURows_nodeParam = node.GetMCURows_top;
                GetMCURows_nodeParamType = node.GetMCURows_topType;
                if (GetMCURows_nodeParamType === 'str') {
                    GetMCURows_parameters.top = GetMCURows_nodeParam || '';
                } else {
                    GetMCURows_parameters.top = RED.util.getMessageProperty(msg, GetMCURows_nodeParam);
                }
                GetMCURows_parameters.top = !!GetMCURows_parameters.top ? GetMCURows_parameters.top : msg.payload;
                
                GetMCURows_nodeParam = node.GetMCURows_skip;
                GetMCURows_nodeParamType = node.GetMCURows_skipType;
                if (GetMCURows_nodeParamType === 'str') {
                    GetMCURows_parameters.skip = GetMCURows_nodeParam || '';
                } else {
                    GetMCURows_parameters.skip = RED.util.getMessageProperty(msg, GetMCURows_nodeParam);
                }
                GetMCURows_parameters.skip = !!GetMCURows_parameters.skip ? GetMCURows_parameters.skip : msg.payload;
                
                GetMCURows_nodeParam = node.GetMCURows_search;
                GetMCURows_nodeParamType = node.GetMCURows_searchType;
                if (GetMCURows_nodeParamType === 'str') {
                    GetMCURows_parameters.search = GetMCURows_nodeParam || '';
                } else {
                    GetMCURows_parameters.search = RED.util.getMessageProperty(msg, GetMCURows_nodeParam);
                }
                GetMCURows_parameters.search = !!GetMCURows_parameters.search ? GetMCURows_parameters.search : msg.payload;
                
                GetMCURows_nodeParam = node.GetMCURows_filter;
                GetMCURows_nodeParamType = node.GetMCURows_filterType;
                if (GetMCURows_nodeParamType === 'str') {
                    GetMCURows_parameters.filter = GetMCURows_nodeParam || '';
                } else {
                    GetMCURows_parameters.filter = RED.util.getMessageProperty(msg, GetMCURows_nodeParam);
                }
                GetMCURows_parameters.filter = !!GetMCURows_parameters.filter ? GetMCURows_parameters.filter : msg.payload;
                
                GetMCURows_nodeParam = node.GetMCURows_count;
                GetMCURows_nodeParamType = node.GetMCURows_countType;
                if (GetMCURows_nodeParamType === 'str') {
                    GetMCURows_parameters.count = GetMCURows_nodeParam || '';
                } else {
                    GetMCURows_parameters.count = RED.util.getMessageProperty(msg, GetMCURows_nodeParam);
                }
                GetMCURows_parameters.count = !!GetMCURows_parameters.count ? GetMCURows_parameters.count : msg.payload;
                                result = client.GetMCURows(GetMCURows_parameters);
            }
            if (!errorFlag && node.method === 'GetMCURow') {
                var GetMCURow_parameters = [];
                var GetMCURow_nodeParam;
                var GetMCURow_nodeParamType;

                GetMCURow_nodeParam = node.GetMCURow_guid;
                GetMCURow_nodeParamType = node.GetMCURow_guidType;
                if (GetMCURow_nodeParamType === 'str') {
                    GetMCURow_parameters.guid = GetMCURow_nodeParam || '';
                } else {
                    GetMCURow_parameters.guid = RED.util.getMessageProperty(msg, GetMCURow_nodeParam);
                }
                GetMCURow_parameters.guid = !!GetMCURow_parameters.guid ? GetMCURow_parameters.guid : msg.payload;
                                result = client.GetMCURow(GetMCURow_parameters);
            }
            if (!errorFlag && node.method === 'UpdateMCURequestStatus') {
                var UpdateMCURequestStatus_parameters = [];
                var UpdateMCURequestStatus_nodeParam;
                var UpdateMCURequestStatus_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateMCURequestStatus_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateMCURequestStatus(UpdateMCURequestStatus_parameters);
            }
            if (!errorFlag && node.method === 'GetConsoleRestrictions') {
                var GetConsoleRestrictions_parameters = [];
                var GetConsoleRestrictions_nodeParam;
                var GetConsoleRestrictions_nodeParamType;

                GetConsoleRestrictions_nodeParam = node.GetConsoleRestrictions_select;
                GetConsoleRestrictions_nodeParamType = node.GetConsoleRestrictions_selectType;
                if (GetConsoleRestrictions_nodeParamType === 'str') {
                    GetConsoleRestrictions_parameters.select = GetConsoleRestrictions_nodeParam || '';
                } else {
                    GetConsoleRestrictions_parameters.select = RED.util.getMessageProperty(msg, GetConsoleRestrictions_nodeParam);
                }
                GetConsoleRestrictions_parameters.select = !!GetConsoleRestrictions_parameters.select ? GetConsoleRestrictions_parameters.select : msg.payload;
                
                GetConsoleRestrictions_nodeParam = node.GetConsoleRestrictions_expand;
                GetConsoleRestrictions_nodeParamType = node.GetConsoleRestrictions_expandType;
                if (GetConsoleRestrictions_nodeParamType === 'str') {
                    GetConsoleRestrictions_parameters.expand = GetConsoleRestrictions_nodeParam || '';
                } else {
                    GetConsoleRestrictions_parameters.expand = RED.util.getMessageProperty(msg, GetConsoleRestrictions_nodeParam);
                }
                GetConsoleRestrictions_parameters.expand = !!GetConsoleRestrictions_parameters.expand ? GetConsoleRestrictions_parameters.expand : msg.payload;
                                result = client.GetConsoleRestrictions(GetConsoleRestrictions_parameters);
            }
            if (!errorFlag && node.method === 'UpdateConsoleRestrictions') {
                var UpdateConsoleRestrictions_parameters = [];
                var UpdateConsoleRestrictions_nodeParam;
                var UpdateConsoleRestrictions_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateConsoleRestrictions_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateConsoleRestrictions(UpdateConsoleRestrictions_parameters);
            }
            if (!errorFlag && node.method === 'ListContact') {
                var ListContact_parameters = [];
                var ListContact_nodeParam;
                var ListContact_nodeParamType;

                ListContact_nodeParam = node.ListContact_top;
                ListContact_nodeParamType = node.ListContact_topType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.top = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.top = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.top = !!ListContact_parameters.top ? ListContact_parameters.top : msg.payload;
                
                ListContact_nodeParam = node.ListContact_skip;
                ListContact_nodeParamType = node.ListContact_skipType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.skip = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.skip = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.skip = !!ListContact_parameters.skip ? ListContact_parameters.skip : msg.payload;
                
                ListContact_nodeParam = node.ListContact_search;
                ListContact_nodeParamType = node.ListContact_searchType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.search = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.search = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.search = !!ListContact_parameters.search ? ListContact_parameters.search : msg.payload;
                
                ListContact_nodeParam = node.ListContact_filter;
                ListContact_nodeParamType = node.ListContact_filterType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.filter = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.filter = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.filter = !!ListContact_parameters.filter ? ListContact_parameters.filter : msg.payload;
                
                ListContact_nodeParam = node.ListContact_count;
                ListContact_nodeParamType = node.ListContact_countType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.count = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.count = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.count = !!ListContact_parameters.count ? ListContact_parameters.count : msg.payload;
                
                ListContact_nodeParam = node.ListContact_orderby;
                ListContact_nodeParamType = node.ListContact_orderbyType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.orderby = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.orderby = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.orderby = !!ListContact_parameters.orderby ? ListContact_parameters.orderby : msg.payload;
                
                ListContact_nodeParam = node.ListContact_select;
                ListContact_nodeParamType = node.ListContact_selectType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.select = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.select = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.select = !!ListContact_parameters.select ? ListContact_parameters.select : msg.payload;
                
                ListContact_nodeParam = node.ListContact_expand;
                ListContact_nodeParamType = node.ListContact_expandType;
                if (ListContact_nodeParamType === 'str') {
                    ListContact_parameters.expand = ListContact_nodeParam || '';
                } else {
                    ListContact_parameters.expand = RED.util.getMessageProperty(msg, ListContact_nodeParam);
                }
                ListContact_parameters.expand = !!ListContact_parameters.expand ? ListContact_parameters.expand : msg.payload;
                                result = client.ListContact(ListContact_parameters);
            }
            if (!errorFlag && node.method === 'CreateContact') {
                var CreateContact_parameters = [];
                var CreateContact_nodeParam;
                var CreateContact_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateContact_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateContact(CreateContact_parameters);
            }
            if (!errorFlag && node.method === 'SetDirSearchSettings') {
                var SetDirSearchSettings_parameters = [];
                var SetDirSearchSettings_nodeParam;
                var SetDirSearchSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetDirSearchSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetDirSearchSettings(SetDirSearchSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetDirSearchSettings') {
                var GetDirSearchSettings_parameters = [];
                var GetDirSearchSettings_nodeParam;
                var GetDirSearchSettings_nodeParamType;
                result = client.GetDirSearchSettings(GetDirSearchSettings_parameters);
            }
            if (!errorFlag && node.method === 'BatchContactsDelete') {
                var BatchContactsDelete_parameters = [];
                var BatchContactsDelete_nodeParam;
                var BatchContactsDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BatchContactsDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BatchContactsDelete(BatchContactsDelete_parameters);
            }
            if (!errorFlag && node.method === 'Office365ContactsBulkDelete') {
                var Office365ContactsBulkDelete_parameters = [];
                var Office365ContactsBulkDelete_nodeParam;
                var Office365ContactsBulkDelete_nodeParamType;
                result = client.Office365ContactsBulkDelete(Office365ContactsBulkDelete_parameters);
            }
            if (!errorFlag && node.method === 'CRMContactsBulkDelete') {
                var CRMContactsBulkDelete_parameters = [];
                var CRMContactsBulkDelete_nodeParam;
                var CRMContactsBulkDelete_nodeParamType;
                result = client.CRMContactsBulkDelete(CRMContactsBulkDelete_parameters);
            }
            if (!errorFlag && node.method === 'AllContactsBulkDelete') {
                var AllContactsBulkDelete_parameters = [];
                var AllContactsBulkDelete_nodeParam;
                var AllContactsBulkDelete_nodeParamType;
                result = client.AllContactsBulkDelete(AllContactsBulkDelete_parameters);
            }
            if (!errorFlag && node.method === 'ExportContacts') {
                var ExportContacts_parameters = [];
                var ExportContacts_nodeParam;
                var ExportContacts_nodeParamType;
                result = client.ExportContacts(ExportContacts_parameters);
            }
            if (!errorFlag && node.method === 'GetContact') {
                var GetContact_parameters = [];
                var GetContact_nodeParam;
                var GetContact_nodeParamType;

                GetContact_nodeParam = node.GetContact_id;
                GetContact_nodeParamType = node.GetContact_idType;
                if (GetContact_nodeParamType === 'str') {
                    GetContact_parameters.id = GetContact_nodeParam || '';
                } else {
                    GetContact_parameters.id = RED.util.getMessageProperty(msg, GetContact_nodeParam);
                }
                GetContact_parameters.id = !!GetContact_parameters.id ? GetContact_parameters.id : msg.payload;
                
                GetContact_nodeParam = node.GetContact_select;
                GetContact_nodeParamType = node.GetContact_selectType;
                if (GetContact_nodeParamType === 'str') {
                    GetContact_parameters.select = GetContact_nodeParam || '';
                } else {
                    GetContact_parameters.select = RED.util.getMessageProperty(msg, GetContact_nodeParam);
                }
                GetContact_parameters.select = !!GetContact_parameters.select ? GetContact_parameters.select : msg.payload;
                
                GetContact_nodeParam = node.GetContact_expand;
                GetContact_nodeParamType = node.GetContact_expandType;
                if (GetContact_nodeParamType === 'str') {
                    GetContact_parameters.expand = GetContact_nodeParam || '';
                } else {
                    GetContact_parameters.expand = RED.util.getMessageProperty(msg, GetContact_nodeParam);
                }
                GetContact_parameters.expand = !!GetContact_parameters.expand ? GetContact_parameters.expand : msg.payload;
                                result = client.GetContact(GetContact_parameters);
            }
            if (!errorFlag && node.method === 'UpdateContact') {
                var UpdateContact_parameters = [];
                var UpdateContact_nodeParam;
                var UpdateContact_nodeParamType;

                UpdateContact_nodeParam = node.UpdateContact_id;
                UpdateContact_nodeParamType = node.UpdateContact_idType;
                if (UpdateContact_nodeParamType === 'str') {
                    UpdateContact_parameters.id = UpdateContact_nodeParam || '';
                } else {
                    UpdateContact_parameters.id = RED.util.getMessageProperty(msg, UpdateContact_nodeParam);
                }
                UpdateContact_parameters.id = !!UpdateContact_parameters.id ? UpdateContact_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateContact_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateContact(UpdateContact_parameters);
            }
            if (!errorFlag && node.method === 'DeleteContact') {
                var DeleteContact_parameters = [];
                var DeleteContact_nodeParam;
                var DeleteContact_nodeParamType;

                DeleteContact_nodeParam = node.DeleteContact_id;
                DeleteContact_nodeParamType = node.DeleteContact_idType;
                if (DeleteContact_nodeParamType === 'str') {
                    DeleteContact_parameters.id = DeleteContact_nodeParam || '';
                } else {
                    DeleteContact_parameters.id = RED.util.getMessageProperty(msg, DeleteContact_nodeParam);
                }
                DeleteContact_parameters.id = !!DeleteContact_parameters.id ? DeleteContact_parameters.id : msg.payload;
                
                DeleteContact_nodeParam = node.DeleteContact_ifMatch;
                DeleteContact_nodeParamType = node.DeleteContact_ifMatchType;
                if (DeleteContact_nodeParamType === 'str') {
                    DeleteContact_parameters.ifMatch = DeleteContact_nodeParam || '';
                } else {
                    DeleteContact_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteContact_nodeParam);
                }
                DeleteContact_parameters.ifMatch = !!DeleteContact_parameters.ifMatch ? DeleteContact_parameters.ifMatch : msg.payload;
                                result = client.DeleteContact(DeleteContact_parameters);
            }
            if (!errorFlag && node.method === 'ListCountry') {
                var ListCountry_parameters = [];
                var ListCountry_nodeParam;
                var ListCountry_nodeParamType;

                ListCountry_nodeParam = node.ListCountry_top;
                ListCountry_nodeParamType = node.ListCountry_topType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.top = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.top = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.top = !!ListCountry_parameters.top ? ListCountry_parameters.top : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_skip;
                ListCountry_nodeParamType = node.ListCountry_skipType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.skip = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.skip = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.skip = !!ListCountry_parameters.skip ? ListCountry_parameters.skip : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_search;
                ListCountry_nodeParamType = node.ListCountry_searchType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.search = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.search = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.search = !!ListCountry_parameters.search ? ListCountry_parameters.search : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_filter;
                ListCountry_nodeParamType = node.ListCountry_filterType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.filter = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.filter = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.filter = !!ListCountry_parameters.filter ? ListCountry_parameters.filter : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_count;
                ListCountry_nodeParamType = node.ListCountry_countType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.count = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.count = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.count = !!ListCountry_parameters.count ? ListCountry_parameters.count : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_orderby;
                ListCountry_nodeParamType = node.ListCountry_orderbyType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.orderby = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.orderby = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.orderby = !!ListCountry_parameters.orderby ? ListCountry_parameters.orderby : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_select;
                ListCountry_nodeParamType = node.ListCountry_selectType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.select = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.select = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.select = !!ListCountry_parameters.select ? ListCountry_parameters.select : msg.payload;
                
                ListCountry_nodeParam = node.ListCountry_expand;
                ListCountry_nodeParamType = node.ListCountry_expandType;
                if (ListCountry_nodeParamType === 'str') {
                    ListCountry_parameters.expand = ListCountry_nodeParam || '';
                } else {
                    ListCountry_parameters.expand = RED.util.getMessageProperty(msg, ListCountry_nodeParam);
                }
                ListCountry_parameters.expand = !!ListCountry_parameters.expand ? ListCountry_parameters.expand : msg.payload;
                                result = client.ListCountry(ListCountry_parameters);
            }
            if (!errorFlag && node.method === 'GetCountryCodes') {
                var GetCountryCodes_parameters = [];
                var GetCountryCodes_nodeParam;
                var GetCountryCodes_nodeParamType;

                GetCountryCodes_nodeParam = node.GetCountryCodes_select;
                GetCountryCodes_nodeParamType = node.GetCountryCodes_selectType;
                if (GetCountryCodes_nodeParamType === 'str') {
                    GetCountryCodes_parameters.select = GetCountryCodes_nodeParam || '';
                } else {
                    GetCountryCodes_parameters.select = RED.util.getMessageProperty(msg, GetCountryCodes_nodeParam);
                }
                GetCountryCodes_parameters.select = !!GetCountryCodes_parameters.select ? GetCountryCodes_parameters.select : msg.payload;
                
                GetCountryCodes_nodeParam = node.GetCountryCodes_expand;
                GetCountryCodes_nodeParamType = node.GetCountryCodes_expandType;
                if (GetCountryCodes_nodeParamType === 'str') {
                    GetCountryCodes_parameters.expand = GetCountryCodes_nodeParam || '';
                } else {
                    GetCountryCodes_parameters.expand = RED.util.getMessageProperty(msg, GetCountryCodes_nodeParam);
                }
                GetCountryCodes_parameters.expand = !!GetCountryCodes_parameters.expand ? GetCountryCodes_parameters.expand : msg.payload;
                                result = client.GetCountryCodes(GetCountryCodes_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCountryCodes') {
                var UpdateCountryCodes_parameters = [];
                var UpdateCountryCodes_nodeParam;
                var UpdateCountryCodes_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCountryCodes_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCountryCodes(UpdateCountryCodes_parameters);
            }
            if (!errorFlag && node.method === 'GetCrmIntegration') {
                var GetCrmIntegration_parameters = [];
                var GetCrmIntegration_nodeParam;
                var GetCrmIntegration_nodeParamType;

                GetCrmIntegration_nodeParam = node.GetCrmIntegration_select;
                GetCrmIntegration_nodeParamType = node.GetCrmIntegration_selectType;
                if (GetCrmIntegration_nodeParamType === 'str') {
                    GetCrmIntegration_parameters.select = GetCrmIntegration_nodeParam || '';
                } else {
                    GetCrmIntegration_parameters.select = RED.util.getMessageProperty(msg, GetCrmIntegration_nodeParam);
                }
                GetCrmIntegration_parameters.select = !!GetCrmIntegration_parameters.select ? GetCrmIntegration_parameters.select : msg.payload;
                
                GetCrmIntegration_nodeParam = node.GetCrmIntegration_expand;
                GetCrmIntegration_nodeParamType = node.GetCrmIntegration_expandType;
                if (GetCrmIntegration_nodeParamType === 'str') {
                    GetCrmIntegration_parameters.expand = GetCrmIntegration_nodeParam || '';
                } else {
                    GetCrmIntegration_parameters.expand = RED.util.getMessageProperty(msg, GetCrmIntegration_nodeParam);
                }
                GetCrmIntegration_parameters.expand = !!GetCrmIntegration_parameters.expand ? GetCrmIntegration_parameters.expand : msg.payload;
                                result = client.GetCrmIntegration(GetCrmIntegration_parameters);
            }
            if (!errorFlag && node.method === 'UpdateCrmIntegration') {
                var UpdateCrmIntegration_parameters = [];
                var UpdateCrmIntegration_nodeParam;
                var UpdateCrmIntegration_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateCrmIntegration_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateCrmIntegration(UpdateCrmIntegration_parameters);
            }
            if (!errorFlag && node.method === 'Test') {
                var Test_parameters = [];
                var Test_nodeParam;
                var Test_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Test_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Test(Test_parameters);
            }
            if (!errorFlag && node.method === 'DeleteCrmContacts') {
                var DeleteCrmContacts_parameters = [];
                var DeleteCrmContacts_nodeParam;
                var DeleteCrmContacts_nodeParamType;
                result = client.DeleteCrmContacts(DeleteCrmContacts_parameters);
            }
            if (!errorFlag && node.method === 'SetOAuthState') {
                var SetOAuthState_parameters = [];
                var SetOAuthState_nodeParam;
                var SetOAuthState_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetOAuthState_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetOAuthState(SetOAuthState_parameters);
            }
            if (!errorFlag && node.method === 'GetOAuth') {
                var GetOAuth_parameters = [];
                var GetOAuth_nodeParam;
                var GetOAuth_nodeParamType;

                GetOAuth_nodeParam = node.GetOAuth_variable;
                GetOAuth_nodeParamType = node.GetOAuth_variableType;
                if (GetOAuth_nodeParamType === 'str') {
                    GetOAuth_parameters.variable = GetOAuth_nodeParam || '';
                } else {
                    GetOAuth_parameters.variable = RED.util.getMessageProperty(msg, GetOAuth_nodeParam);
                }
                GetOAuth_parameters.variable = !!GetOAuth_parameters.variable ? GetOAuth_parameters.variable : msg.payload;
                                result = client.GetOAuth(GetOAuth_parameters);
            }
            if (!errorFlag && node.method === 'GetCrmTemplateSource') {
                var GetCrmTemplateSource_parameters = [];
                var GetCrmTemplateSource_nodeParam;
                var GetCrmTemplateSource_nodeParamType;

                GetCrmTemplateSource_nodeParam = node.GetCrmTemplateSource_name;
                GetCrmTemplateSource_nodeParamType = node.GetCrmTemplateSource_nameType;
                if (GetCrmTemplateSource_nodeParamType === 'str') {
                    GetCrmTemplateSource_parameters.name = GetCrmTemplateSource_nodeParam || '';
                } else {
                    GetCrmTemplateSource_parameters.name = RED.util.getMessageProperty(msg, GetCrmTemplateSource_nodeParam);
                }
                GetCrmTemplateSource_parameters.name = !!GetCrmTemplateSource_parameters.name ? GetCrmTemplateSource_parameters.name : msg.payload;
                                result = client.GetCrmTemplateSource(GetCrmTemplateSource_parameters);
            }
            if (!errorFlag && node.method === 'GeCrmtTemplates') {
                var GeCrmtTemplates_parameters = [];
                var GeCrmtTemplates_nodeParam;
                var GeCrmtTemplates_nodeParamType;

                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_top;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_topType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.top = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.top = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.top = !!GeCrmtTemplates_parameters.top ? GeCrmtTemplates_parameters.top : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_skip;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_skipType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.skip = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.skip = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.skip = !!GeCrmtTemplates_parameters.skip ? GeCrmtTemplates_parameters.skip : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_search;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_searchType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.search = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.search = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.search = !!GeCrmtTemplates_parameters.search ? GeCrmtTemplates_parameters.search : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_filter;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_filterType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.filter = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.filter = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.filter = !!GeCrmtTemplates_parameters.filter ? GeCrmtTemplates_parameters.filter : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_count;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_countType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.count = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.count = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.count = !!GeCrmtTemplates_parameters.count ? GeCrmtTemplates_parameters.count : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_select;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_selectType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.select = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.select = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.select = !!GeCrmtTemplates_parameters.select ? GeCrmtTemplates_parameters.select : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_orderby;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_orderbyType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.orderby = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.orderby = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.orderby = !!GeCrmtTemplates_parameters.orderby ? GeCrmtTemplates_parameters.orderby : msg.payload;
                
                GeCrmtTemplates_nodeParam = node.GeCrmtTemplates_expand;
                GeCrmtTemplates_nodeParamType = node.GeCrmtTemplates_expandType;
                if (GeCrmtTemplates_nodeParamType === 'str') {
                    GeCrmtTemplates_parameters.expand = GeCrmtTemplates_nodeParam || '';
                } else {
                    GeCrmtTemplates_parameters.expand = RED.util.getMessageProperty(msg, GeCrmtTemplates_nodeParam);
                }
                GeCrmtTemplates_parameters.expand = !!GeCrmtTemplates_parameters.expand ? GeCrmtTemplates_parameters.expand : msg.payload;
                                result = client.GeCrmtTemplates(GeCrmtTemplates_parameters);
            }
            if (!errorFlag && node.method === 'GetCrmTemplate') {
                var GetCrmTemplate_parameters = [];
                var GetCrmTemplate_nodeParam;
                var GetCrmTemplate_nodeParamType;

                GetCrmTemplate_nodeParam = node.GetCrmTemplate_name;
                GetCrmTemplate_nodeParamType = node.GetCrmTemplate_nameType;
                if (GetCrmTemplate_nodeParamType === 'str') {
                    GetCrmTemplate_parameters.name = GetCrmTemplate_nodeParam || '';
                } else {
                    GetCrmTemplate_parameters.name = RED.util.getMessageProperty(msg, GetCrmTemplate_nodeParam);
                }
                GetCrmTemplate_parameters.name = !!GetCrmTemplate_parameters.name ? GetCrmTemplate_parameters.name : msg.payload;
                
                GetCrmTemplate_nodeParam = node.GetCrmTemplate_select;
                GetCrmTemplate_nodeParamType = node.GetCrmTemplate_selectType;
                if (GetCrmTemplate_nodeParamType === 'str') {
                    GetCrmTemplate_parameters.select = GetCrmTemplate_nodeParam || '';
                } else {
                    GetCrmTemplate_parameters.select = RED.util.getMessageProperty(msg, GetCrmTemplate_nodeParam);
                }
                GetCrmTemplate_parameters.select = !!GetCrmTemplate_parameters.select ? GetCrmTemplate_parameters.select : msg.payload;
                
                GetCrmTemplate_nodeParam = node.GetCrmTemplate_expand;
                GetCrmTemplate_nodeParamType = node.GetCrmTemplate_expandType;
                if (GetCrmTemplate_nodeParamType === 'str') {
                    GetCrmTemplate_parameters.expand = GetCrmTemplate_nodeParam || '';
                } else {
                    GetCrmTemplate_parameters.expand = RED.util.getMessageProperty(msg, GetCrmTemplate_nodeParam);
                }
                GetCrmTemplate_parameters.expand = !!GetCrmTemplate_parameters.expand ? GetCrmTemplate_parameters.expand : msg.payload;
                                result = client.GetCrmTemplate(GetCrmTemplate_parameters);
            }
            if (!errorFlag && node.method === 'DeleteCrmTemplate') {
                var DeleteCrmTemplate_parameters = [];
                var DeleteCrmTemplate_nodeParam;
                var DeleteCrmTemplate_nodeParamType;

                DeleteCrmTemplate_nodeParam = node.DeleteCrmTemplate_name;
                DeleteCrmTemplate_nodeParamType = node.DeleteCrmTemplate_nameType;
                if (DeleteCrmTemplate_nodeParamType === 'str') {
                    DeleteCrmTemplate_parameters.name = DeleteCrmTemplate_nodeParam || '';
                } else {
                    DeleteCrmTemplate_parameters.name = RED.util.getMessageProperty(msg, DeleteCrmTemplate_nodeParam);
                }
                DeleteCrmTemplate_parameters.name = !!DeleteCrmTemplate_parameters.name ? DeleteCrmTemplate_parameters.name : msg.payload;
                
                DeleteCrmTemplate_nodeParam = node.DeleteCrmTemplate_ifMatch;
                DeleteCrmTemplate_nodeParamType = node.DeleteCrmTemplate_ifMatchType;
                if (DeleteCrmTemplate_nodeParamType === 'str') {
                    DeleteCrmTemplate_parameters.ifMatch = DeleteCrmTemplate_nodeParam || '';
                } else {
                    DeleteCrmTemplate_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteCrmTemplate_nodeParam);
                }
                DeleteCrmTemplate_parameters.ifMatch = !!DeleteCrmTemplate_parameters.ifMatch ? DeleteCrmTemplate_parameters.ifMatch : msg.payload;
                                result = client.DeleteCrmTemplate(DeleteCrmTemplate_parameters);
            }
            if (!errorFlag && node.method === 'ListCustomPrompt') {
                var ListCustomPrompt_parameters = [];
                var ListCustomPrompt_nodeParam;
                var ListCustomPrompt_nodeParamType;

                ListCustomPrompt_nodeParam = node.ListCustomPrompt_top;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_topType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.top = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.top = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.top = !!ListCustomPrompt_parameters.top ? ListCustomPrompt_parameters.top : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_skip;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_skipType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.skip = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.skip = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.skip = !!ListCustomPrompt_parameters.skip ? ListCustomPrompt_parameters.skip : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_search;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_searchType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.search = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.search = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.search = !!ListCustomPrompt_parameters.search ? ListCustomPrompt_parameters.search : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_filter;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_filterType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.filter = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.filter = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.filter = !!ListCustomPrompt_parameters.filter ? ListCustomPrompt_parameters.filter : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_count;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_countType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.count = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.count = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.count = !!ListCustomPrompt_parameters.count ? ListCustomPrompt_parameters.count : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_orderby;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_orderbyType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.orderby = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.orderby = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.orderby = !!ListCustomPrompt_parameters.orderby ? ListCustomPrompt_parameters.orderby : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_select;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_selectType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.select = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.select = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.select = !!ListCustomPrompt_parameters.select ? ListCustomPrompt_parameters.select : msg.payload;
                
                ListCustomPrompt_nodeParam = node.ListCustomPrompt_expand;
                ListCustomPrompt_nodeParamType = node.ListCustomPrompt_expandType;
                if (ListCustomPrompt_nodeParamType === 'str') {
                    ListCustomPrompt_parameters.expand = ListCustomPrompt_nodeParam || '';
                } else {
                    ListCustomPrompt_parameters.expand = RED.util.getMessageProperty(msg, ListCustomPrompt_nodeParam);
                }
                ListCustomPrompt_parameters.expand = !!ListCustomPrompt_parameters.expand ? ListCustomPrompt_parameters.expand : msg.payload;
                                result = client.ListCustomPrompt(ListCustomPrompt_parameters);
            }
            if (!errorFlag && node.method === 'DeleteCustomPrompt') {
                var DeleteCustomPrompt_parameters = [];
                var DeleteCustomPrompt_nodeParam;
                var DeleteCustomPrompt_nodeParamType;

                DeleteCustomPrompt_nodeParam = node.DeleteCustomPrompt_filename;
                DeleteCustomPrompt_nodeParamType = node.DeleteCustomPrompt_filenameType;
                if (DeleteCustomPrompt_nodeParamType === 'str') {
                    DeleteCustomPrompt_parameters.filename = DeleteCustomPrompt_nodeParam || '';
                } else {
                    DeleteCustomPrompt_parameters.filename = RED.util.getMessageProperty(msg, DeleteCustomPrompt_nodeParam);
                }
                DeleteCustomPrompt_parameters.filename = !!DeleteCustomPrompt_parameters.filename ? DeleteCustomPrompt_parameters.filename : msg.payload;
                
                DeleteCustomPrompt_nodeParam = node.DeleteCustomPrompt_ifMatch;
                DeleteCustomPrompt_nodeParamType = node.DeleteCustomPrompt_ifMatchType;
                if (DeleteCustomPrompt_nodeParamType === 'str') {
                    DeleteCustomPrompt_parameters.ifMatch = DeleteCustomPrompt_nodeParam || '';
                } else {
                    DeleteCustomPrompt_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteCustomPrompt_nodeParam);
                }
                DeleteCustomPrompt_parameters.ifMatch = !!DeleteCustomPrompt_parameters.ifMatch ? DeleteCustomPrompt_parameters.ifMatch : msg.payload;
                                result = client.DeleteCustomPrompt(DeleteCustomPrompt_parameters);
            }
            if (!errorFlag && node.method === 'GetDefs') {
                var GetDefs_parameters = [];
                var GetDefs_nodeParam;
                var GetDefs_nodeParamType;

                GetDefs_nodeParam = node.GetDefs_select;
                GetDefs_nodeParamType = node.GetDefs_selectType;
                if (GetDefs_nodeParamType === 'str') {
                    GetDefs_parameters.select = GetDefs_nodeParam || '';
                } else {
                    GetDefs_parameters.select = RED.util.getMessageProperty(msg, GetDefs_nodeParam);
                }
                GetDefs_parameters.select = !!GetDefs_parameters.select ? GetDefs_parameters.select : msg.payload;
                
                GetDefs_nodeParam = node.GetDefs_expand;
                GetDefs_nodeParamType = node.GetDefs_expandType;
                if (GetDefs_nodeParamType === 'str') {
                    GetDefs_parameters.expand = GetDefs_nodeParam || '';
                } else {
                    GetDefs_parameters.expand = RED.util.getMessageProperty(msg, GetDefs_nodeParam);
                }
                GetDefs_parameters.expand = !!GetDefs_parameters.expand ? GetDefs_parameters.expand : msg.payload;
                                result = client.GetDefs(GetDefs_parameters);
            }
            if (!errorFlag && node.method === 'ListCodecs') {
                var ListCodecs_parameters = [];
                var ListCodecs_nodeParam;
                var ListCodecs_nodeParamType;

                ListCodecs_nodeParam = node.ListCodecs_top;
                ListCodecs_nodeParamType = node.ListCodecs_topType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.top = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.top = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.top = !!ListCodecs_parameters.top ? ListCodecs_parameters.top : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_skip;
                ListCodecs_nodeParamType = node.ListCodecs_skipType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.skip = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.skip = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.skip = !!ListCodecs_parameters.skip ? ListCodecs_parameters.skip : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_search;
                ListCodecs_nodeParamType = node.ListCodecs_searchType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.search = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.search = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.search = !!ListCodecs_parameters.search ? ListCodecs_parameters.search : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_filter;
                ListCodecs_nodeParamType = node.ListCodecs_filterType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.filter = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.filter = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.filter = !!ListCodecs_parameters.filter ? ListCodecs_parameters.filter : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_count;
                ListCodecs_nodeParamType = node.ListCodecs_countType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.count = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.count = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.count = !!ListCodecs_parameters.count ? ListCodecs_parameters.count : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_orderby;
                ListCodecs_nodeParamType = node.ListCodecs_orderbyType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.orderby = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.orderby = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.orderby = !!ListCodecs_parameters.orderby ? ListCodecs_parameters.orderby : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_select;
                ListCodecs_nodeParamType = node.ListCodecs_selectType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.select = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.select = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.select = !!ListCodecs_parameters.select ? ListCodecs_parameters.select : msg.payload;
                
                ListCodecs_nodeParam = node.ListCodecs_expand;
                ListCodecs_nodeParamType = node.ListCodecs_expandType;
                if (ListCodecs_nodeParamType === 'str') {
                    ListCodecs_parameters.expand = ListCodecs_nodeParam || '';
                } else {
                    ListCodecs_parameters.expand = RED.util.getMessageProperty(msg, ListCodecs_nodeParam);
                }
                ListCodecs_parameters.expand = !!ListCodecs_parameters.expand ? ListCodecs_parameters.expand : msg.payload;
                                result = client.ListCodecs(ListCodecs_parameters);
            }
            if (!errorFlag && node.method === 'ListGatewayParameters') {
                var ListGatewayParameters_parameters = [];
                var ListGatewayParameters_nodeParam;
                var ListGatewayParameters_nodeParamType;

                ListGatewayParameters_nodeParam = node.ListGatewayParameters_top;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_topType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.top = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.top = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.top = !!ListGatewayParameters_parameters.top ? ListGatewayParameters_parameters.top : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_skip;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_skipType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.skip = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.skip = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.skip = !!ListGatewayParameters_parameters.skip ? ListGatewayParameters_parameters.skip : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_search;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_searchType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.search = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.search = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.search = !!ListGatewayParameters_parameters.search ? ListGatewayParameters_parameters.search : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_filter;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_filterType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.filter = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.filter = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.filter = !!ListGatewayParameters_parameters.filter ? ListGatewayParameters_parameters.filter : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_count;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_countType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.count = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.count = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.count = !!ListGatewayParameters_parameters.count ? ListGatewayParameters_parameters.count : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_orderby;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_orderbyType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.orderby = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.orderby = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.orderby = !!ListGatewayParameters_parameters.orderby ? ListGatewayParameters_parameters.orderby : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_select;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_selectType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.select = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.select = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.select = !!ListGatewayParameters_parameters.select ? ListGatewayParameters_parameters.select : msg.payload;
                
                ListGatewayParameters_nodeParam = node.ListGatewayParameters_expand;
                ListGatewayParameters_nodeParamType = node.ListGatewayParameters_expandType;
                if (ListGatewayParameters_nodeParamType === 'str') {
                    ListGatewayParameters_parameters.expand = ListGatewayParameters_nodeParam || '';
                } else {
                    ListGatewayParameters_parameters.expand = RED.util.getMessageProperty(msg, ListGatewayParameters_nodeParam);
                }
                ListGatewayParameters_parameters.expand = !!ListGatewayParameters_parameters.expand ? ListGatewayParameters_parameters.expand : msg.payload;
                                result = client.ListGatewayParameters(ListGatewayParameters_parameters);
            }
            if (!errorFlag && node.method === 'ListGatewayParameterValues') {
                var ListGatewayParameterValues_parameters = [];
                var ListGatewayParameterValues_nodeParam;
                var ListGatewayParameterValues_nodeParamType;

                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_top;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_topType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.top = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.top = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.top = !!ListGatewayParameterValues_parameters.top ? ListGatewayParameterValues_parameters.top : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_skip;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_skipType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.skip = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.skip = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.skip = !!ListGatewayParameterValues_parameters.skip ? ListGatewayParameterValues_parameters.skip : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_search;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_searchType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.search = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.search = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.search = !!ListGatewayParameterValues_parameters.search ? ListGatewayParameterValues_parameters.search : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_filter;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_filterType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.filter = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.filter = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.filter = !!ListGatewayParameterValues_parameters.filter ? ListGatewayParameterValues_parameters.filter : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_count;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_countType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.count = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.count = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.count = !!ListGatewayParameterValues_parameters.count ? ListGatewayParameterValues_parameters.count : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_orderby;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_orderbyType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.orderby = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.orderby = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.orderby = !!ListGatewayParameterValues_parameters.orderby ? ListGatewayParameterValues_parameters.orderby : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_select;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_selectType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.select = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.select = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.select = !!ListGatewayParameterValues_parameters.select ? ListGatewayParameterValues_parameters.select : msg.payload;
                
                ListGatewayParameterValues_nodeParam = node.ListGatewayParameterValues_expand;
                ListGatewayParameterValues_nodeParamType = node.ListGatewayParameterValues_expandType;
                if (ListGatewayParameterValues_nodeParamType === 'str') {
                    ListGatewayParameterValues_parameters.expand = ListGatewayParameterValues_nodeParam || '';
                } else {
                    ListGatewayParameterValues_parameters.expand = RED.util.getMessageProperty(msg, ListGatewayParameterValues_nodeParam);
                }
                ListGatewayParameterValues_parameters.expand = !!ListGatewayParameterValues_parameters.expand ? ListGatewayParameterValues_parameters.expand : msg.payload;
                                result = client.ListGatewayParameterValues(ListGatewayParameterValues_parameters);
            }
            if (!errorFlag && node.method === 'ListTimeZones') {
                var ListTimeZones_parameters = [];
                var ListTimeZones_nodeParam;
                var ListTimeZones_nodeParamType;

                ListTimeZones_nodeParam = node.ListTimeZones_top;
                ListTimeZones_nodeParamType = node.ListTimeZones_topType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.top = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.top = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.top = !!ListTimeZones_parameters.top ? ListTimeZones_parameters.top : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_skip;
                ListTimeZones_nodeParamType = node.ListTimeZones_skipType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.skip = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.skip = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.skip = !!ListTimeZones_parameters.skip ? ListTimeZones_parameters.skip : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_search;
                ListTimeZones_nodeParamType = node.ListTimeZones_searchType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.search = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.search = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.search = !!ListTimeZones_parameters.search ? ListTimeZones_parameters.search : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_filter;
                ListTimeZones_nodeParamType = node.ListTimeZones_filterType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.filter = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.filter = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.filter = !!ListTimeZones_parameters.filter ? ListTimeZones_parameters.filter : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_count;
                ListTimeZones_nodeParamType = node.ListTimeZones_countType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.count = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.count = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.count = !!ListTimeZones_parameters.count ? ListTimeZones_parameters.count : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_orderby;
                ListTimeZones_nodeParamType = node.ListTimeZones_orderbyType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.orderby = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.orderby = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.orderby = !!ListTimeZones_parameters.orderby ? ListTimeZones_parameters.orderby : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_select;
                ListTimeZones_nodeParamType = node.ListTimeZones_selectType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.select = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.select = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.select = !!ListTimeZones_parameters.select ? ListTimeZones_parameters.select : msg.payload;
                
                ListTimeZones_nodeParam = node.ListTimeZones_expand;
                ListTimeZones_nodeParamType = node.ListTimeZones_expandType;
                if (ListTimeZones_nodeParamType === 'str') {
                    ListTimeZones_parameters.expand = ListTimeZones_nodeParam || '';
                } else {
                    ListTimeZones_parameters.expand = RED.util.getMessageProperty(msg, ListTimeZones_nodeParam);
                }
                ListTimeZones_parameters.expand = !!ListTimeZones_parameters.expand ? ListTimeZones_parameters.expand : msg.payload;
                                result = client.ListTimeZones(ListTimeZones_parameters);
            }
            if (!errorFlag && node.method === 'GetSystemParameters') {
                var GetSystemParameters_parameters = [];
                var GetSystemParameters_nodeParam;
                var GetSystemParameters_nodeParamType;
                result = client.GetSystemParameters(GetSystemParameters_parameters);
            }
            if (!errorFlag && node.method === 'HasSystemOwner') {
                var HasSystemOwner_parameters = [];
                var HasSystemOwner_nodeParam;
                var HasSystemOwner_nodeParamType;
                result = client.HasSystemOwner(HasSystemOwner_parameters);
            }
            if (!errorFlag && node.method === 'GetRoutes') {
                var GetRoutes_parameters = [];
                var GetRoutes_nodeParam;
                var GetRoutes_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GetRoutes_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GetRoutes(GetRoutes_parameters);
            }
            if (!errorFlag && node.method === 'ListDeviceInfo') {
                var ListDeviceInfo_parameters = [];
                var ListDeviceInfo_nodeParam;
                var ListDeviceInfo_nodeParamType;

                ListDeviceInfo_nodeParam = node.ListDeviceInfo_top;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_topType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.top = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.top = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.top = !!ListDeviceInfo_parameters.top ? ListDeviceInfo_parameters.top : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_skip;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_skipType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.skip = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.skip = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.skip = !!ListDeviceInfo_parameters.skip ? ListDeviceInfo_parameters.skip : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_search;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_searchType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.search = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.search = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.search = !!ListDeviceInfo_parameters.search ? ListDeviceInfo_parameters.search : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_filter;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_filterType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.filter = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.filter = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.filter = !!ListDeviceInfo_parameters.filter ? ListDeviceInfo_parameters.filter : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_count;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_countType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.count = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.count = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.count = !!ListDeviceInfo_parameters.count ? ListDeviceInfo_parameters.count : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_orderby;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_orderbyType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.orderby = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.orderby = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.orderby = !!ListDeviceInfo_parameters.orderby ? ListDeviceInfo_parameters.orderby : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_select;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_selectType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.select = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.select = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.select = !!ListDeviceInfo_parameters.select ? ListDeviceInfo_parameters.select : msg.payload;
                
                ListDeviceInfo_nodeParam = node.ListDeviceInfo_expand;
                ListDeviceInfo_nodeParamType = node.ListDeviceInfo_expandType;
                if (ListDeviceInfo_nodeParamType === 'str') {
                    ListDeviceInfo_parameters.expand = ListDeviceInfo_nodeParam || '';
                } else {
                    ListDeviceInfo_parameters.expand = RED.util.getMessageProperty(msg, ListDeviceInfo_nodeParam);
                }
                ListDeviceInfo_parameters.expand = !!ListDeviceInfo_parameters.expand ? ListDeviceInfo_parameters.expand : msg.payload;
                                result = client.ListDeviceInfo(ListDeviceInfo_parameters);
            }
            if (!errorFlag && node.method === 'GetDeviceInfo') {
                var GetDeviceInfo_parameters = [];
                var GetDeviceInfo_nodeParam;
                var GetDeviceInfo_nodeParamType;

                GetDeviceInfo_nodeParam = node.GetDeviceInfo_id;
                GetDeviceInfo_nodeParamType = node.GetDeviceInfo_idType;
                if (GetDeviceInfo_nodeParamType === 'str') {
                    GetDeviceInfo_parameters.id = GetDeviceInfo_nodeParam || '';
                } else {
                    GetDeviceInfo_parameters.id = RED.util.getMessageProperty(msg, GetDeviceInfo_nodeParam);
                }
                GetDeviceInfo_parameters.id = !!GetDeviceInfo_parameters.id ? GetDeviceInfo_parameters.id : msg.payload;
                
                GetDeviceInfo_nodeParam = node.GetDeviceInfo_select;
                GetDeviceInfo_nodeParamType = node.GetDeviceInfo_selectType;
                if (GetDeviceInfo_nodeParamType === 'str') {
                    GetDeviceInfo_parameters.select = GetDeviceInfo_nodeParam || '';
                } else {
                    GetDeviceInfo_parameters.select = RED.util.getMessageProperty(msg, GetDeviceInfo_nodeParam);
                }
                GetDeviceInfo_parameters.select = !!GetDeviceInfo_parameters.select ? GetDeviceInfo_parameters.select : msg.payload;
                
                GetDeviceInfo_nodeParam = node.GetDeviceInfo_expand;
                GetDeviceInfo_nodeParamType = node.GetDeviceInfo_expandType;
                if (GetDeviceInfo_nodeParamType === 'str') {
                    GetDeviceInfo_parameters.expand = GetDeviceInfo_nodeParam || '';
                } else {
                    GetDeviceInfo_parameters.expand = RED.util.getMessageProperty(msg, GetDeviceInfo_nodeParam);
                }
                GetDeviceInfo_parameters.expand = !!GetDeviceInfo_parameters.expand ? GetDeviceInfo_parameters.expand : msg.payload;
                                result = client.GetDeviceInfo(GetDeviceInfo_parameters);
            }
            if (!errorFlag && node.method === 'DeleteDeviceInfo') {
                var DeleteDeviceInfo_parameters = [];
                var DeleteDeviceInfo_nodeParam;
                var DeleteDeviceInfo_nodeParamType;

                DeleteDeviceInfo_nodeParam = node.DeleteDeviceInfo_id;
                DeleteDeviceInfo_nodeParamType = node.DeleteDeviceInfo_idType;
                if (DeleteDeviceInfo_nodeParamType === 'str') {
                    DeleteDeviceInfo_parameters.id = DeleteDeviceInfo_nodeParam || '';
                } else {
                    DeleteDeviceInfo_parameters.id = RED.util.getMessageProperty(msg, DeleteDeviceInfo_nodeParam);
                }
                DeleteDeviceInfo_parameters.id = !!DeleteDeviceInfo_parameters.id ? DeleteDeviceInfo_parameters.id : msg.payload;
                
                DeleteDeviceInfo_nodeParam = node.DeleteDeviceInfo_ifMatch;
                DeleteDeviceInfo_nodeParamType = node.DeleteDeviceInfo_ifMatchType;
                if (DeleteDeviceInfo_nodeParamType === 'str') {
                    DeleteDeviceInfo_parameters.ifMatch = DeleteDeviceInfo_nodeParam || '';
                } else {
                    DeleteDeviceInfo_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteDeviceInfo_nodeParam);
                }
                DeleteDeviceInfo_parameters.ifMatch = !!DeleteDeviceInfo_parameters.ifMatch ? DeleteDeviceInfo_parameters.ifMatch : msg.payload;
                                result = client.DeleteDeviceInfo(DeleteDeviceInfo_parameters);
            }
            if (!errorFlag && node.method === 'Provision') {
                var Provision_parameters = [];
                var Provision_nodeParam;
                var Provision_nodeParamType;

                Provision_nodeParam = node.Provision_id;
                Provision_nodeParamType = node.Provision_idType;
                if (Provision_nodeParamType === 'str') {
                    Provision_parameters.id = Provision_nodeParam || '';
                } else {
                    Provision_parameters.id = RED.util.getMessageProperty(msg, Provision_nodeParam);
                }
                Provision_parameters.id = !!Provision_parameters.id ? Provision_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    Provision_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Provision(Provision_parameters);
            }
            if (!errorFlag && node.method === 'GetDialCodeSettings') {
                var GetDialCodeSettings_parameters = [];
                var GetDialCodeSettings_nodeParam;
                var GetDialCodeSettings_nodeParamType;

                GetDialCodeSettings_nodeParam = node.GetDialCodeSettings_select;
                GetDialCodeSettings_nodeParamType = node.GetDialCodeSettings_selectType;
                if (GetDialCodeSettings_nodeParamType === 'str') {
                    GetDialCodeSettings_parameters.select = GetDialCodeSettings_nodeParam || '';
                } else {
                    GetDialCodeSettings_parameters.select = RED.util.getMessageProperty(msg, GetDialCodeSettings_nodeParam);
                }
                GetDialCodeSettings_parameters.select = !!GetDialCodeSettings_parameters.select ? GetDialCodeSettings_parameters.select : msg.payload;
                
                GetDialCodeSettings_nodeParam = node.GetDialCodeSettings_expand;
                GetDialCodeSettings_nodeParamType = node.GetDialCodeSettings_expandType;
                if (GetDialCodeSettings_nodeParamType === 'str') {
                    GetDialCodeSettings_parameters.expand = GetDialCodeSettings_nodeParam || '';
                } else {
                    GetDialCodeSettings_parameters.expand = RED.util.getMessageProperty(msg, GetDialCodeSettings_nodeParam);
                }
                GetDialCodeSettings_parameters.expand = !!GetDialCodeSettings_parameters.expand ? GetDialCodeSettings_parameters.expand : msg.payload;
                                result = client.GetDialCodeSettings(GetDialCodeSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateDialCodeSettings') {
                var UpdateDialCodeSettings_parameters = [];
                var UpdateDialCodeSettings_nodeParam;
                var UpdateDialCodeSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateDialCodeSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateDialCodeSettings(UpdateDialCodeSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListDidNumber') {
                var ListDidNumber_parameters = [];
                var ListDidNumber_nodeParam;
                var ListDidNumber_nodeParamType;

                ListDidNumber_nodeParam = node.ListDidNumber_top;
                ListDidNumber_nodeParamType = node.ListDidNumber_topType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.top = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.top = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.top = !!ListDidNumber_parameters.top ? ListDidNumber_parameters.top : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_skip;
                ListDidNumber_nodeParamType = node.ListDidNumber_skipType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.skip = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.skip = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.skip = !!ListDidNumber_parameters.skip ? ListDidNumber_parameters.skip : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_search;
                ListDidNumber_nodeParamType = node.ListDidNumber_searchType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.search = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.search = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.search = !!ListDidNumber_parameters.search ? ListDidNumber_parameters.search : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_filter;
                ListDidNumber_nodeParamType = node.ListDidNumber_filterType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.filter = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.filter = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.filter = !!ListDidNumber_parameters.filter ? ListDidNumber_parameters.filter : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_count;
                ListDidNumber_nodeParamType = node.ListDidNumber_countType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.count = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.count = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.count = !!ListDidNumber_parameters.count ? ListDidNumber_parameters.count : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_orderby;
                ListDidNumber_nodeParamType = node.ListDidNumber_orderbyType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.orderby = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.orderby = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.orderby = !!ListDidNumber_parameters.orderby ? ListDidNumber_parameters.orderby : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_select;
                ListDidNumber_nodeParamType = node.ListDidNumber_selectType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.select = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.select = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.select = !!ListDidNumber_parameters.select ? ListDidNumber_parameters.select : msg.payload;
                
                ListDidNumber_nodeParam = node.ListDidNumber_expand;
                ListDidNumber_nodeParamType = node.ListDidNumber_expandType;
                if (ListDidNumber_nodeParamType === 'str') {
                    ListDidNumber_parameters.expand = ListDidNumber_nodeParam || '';
                } else {
                    ListDidNumber_parameters.expand = RED.util.getMessageProperty(msg, ListDidNumber_nodeParam);
                }
                ListDidNumber_parameters.expand = !!ListDidNumber_parameters.expand ? ListDidNumber_parameters.expand : msg.payload;
                                result = client.ListDidNumber(ListDidNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetPropertiesByDn') {
                var GetPropertiesByDn_parameters = [];
                var GetPropertiesByDn_nodeParam;
                var GetPropertiesByDn_nodeParamType;

                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_dnNumber;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_dnNumberType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.dnNumber = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.dnNumber = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.dnNumber = !!GetPropertiesByDn_parameters.dnNumber ? GetPropertiesByDn_parameters.dnNumber : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_top;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_topType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.top = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.top = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.top = !!GetPropertiesByDn_parameters.top ? GetPropertiesByDn_parameters.top : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_skip;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_skipType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.skip = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.skip = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.skip = !!GetPropertiesByDn_parameters.skip ? GetPropertiesByDn_parameters.skip : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_search;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_searchType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.search = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.search = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.search = !!GetPropertiesByDn_parameters.search ? GetPropertiesByDn_parameters.search : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_filter;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_filterType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.filter = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.filter = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.filter = !!GetPropertiesByDn_parameters.filter ? GetPropertiesByDn_parameters.filter : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_count;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_countType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.count = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.count = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.count = !!GetPropertiesByDn_parameters.count ? GetPropertiesByDn_parameters.count : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_select;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_selectType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.select = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.select = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.select = !!GetPropertiesByDn_parameters.select ? GetPropertiesByDn_parameters.select : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_orderby;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_orderbyType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.orderby = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.orderby = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.orderby = !!GetPropertiesByDn_parameters.orderby ? GetPropertiesByDn_parameters.orderby : msg.payload;
                
                GetPropertiesByDn_nodeParam = node.GetPropertiesByDn_expand;
                GetPropertiesByDn_nodeParamType = node.GetPropertiesByDn_expandType;
                if (GetPropertiesByDn_nodeParamType === 'str') {
                    GetPropertiesByDn_parameters.expand = GetPropertiesByDn_nodeParam || '';
                } else {
                    GetPropertiesByDn_parameters.expand = RED.util.getMessageProperty(msg, GetPropertiesByDn_nodeParam);
                }
                GetPropertiesByDn_parameters.expand = !!GetPropertiesByDn_parameters.expand ? GetPropertiesByDn_parameters.expand : msg.payload;
                                result = client.GetPropertiesByDn(GetPropertiesByDn_parameters);
            }
            if (!errorFlag && node.method === 'CreateDNProperty') {
                var CreateDNProperty_parameters = [];
                var CreateDNProperty_nodeParam;
                var CreateDNProperty_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateDNProperty_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateDNProperty(CreateDNProperty_parameters);
            }
            if (!errorFlag && node.method === 'UpdateDNProperty') {
                var UpdateDNProperty_parameters = [];
                var UpdateDNProperty_nodeParam;
                var UpdateDNProperty_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateDNProperty_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateDNProperty(UpdateDNProperty_parameters);
            }
            if (!errorFlag && node.method === 'DeleteDNProperty') {
                var DeleteDNProperty_parameters = [];
                var DeleteDNProperty_nodeParam;
                var DeleteDNProperty_nodeParamType;

                if (typeof msg.payload === 'object') {
                    DeleteDNProperty_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.DeleteDNProperty(DeleteDNProperty_parameters);
            }
            if (!errorFlag && node.method === 'GetDNPropertyByName') {
                var GetDNPropertyByName_parameters = [];
                var GetDNPropertyByName_nodeParam;
                var GetDNPropertyByName_nodeParamType;

                GetDNPropertyByName_nodeParam = node.GetDNPropertyByName_dnNumber;
                GetDNPropertyByName_nodeParamType = node.GetDNPropertyByName_dnNumberType;
                if (GetDNPropertyByName_nodeParamType === 'str') {
                    GetDNPropertyByName_parameters.dnNumber = GetDNPropertyByName_nodeParam || '';
                } else {
                    GetDNPropertyByName_parameters.dnNumber = RED.util.getMessageProperty(msg, GetDNPropertyByName_nodeParam);
                }
                GetDNPropertyByName_parameters.dnNumber = !!GetDNPropertyByName_parameters.dnNumber ? GetDNPropertyByName_parameters.dnNumber : msg.payload;
                
                GetDNPropertyByName_nodeParam = node.GetDNPropertyByName_name;
                GetDNPropertyByName_nodeParamType = node.GetDNPropertyByName_nameType;
                if (GetDNPropertyByName_nodeParamType === 'str') {
                    GetDNPropertyByName_parameters.name = GetDNPropertyByName_nodeParam || '';
                } else {
                    GetDNPropertyByName_parameters.name = RED.util.getMessageProperty(msg, GetDNPropertyByName_nodeParam);
                }
                GetDNPropertyByName_parameters.name = !!GetDNPropertyByName_parameters.name ? GetDNPropertyByName_parameters.name : msg.payload;
                                result = client.GetDNPropertyByName(GetDNPropertyByName_parameters);
            }
            if (!errorFlag && node.method === 'GetE164Settings') {
                var GetE164Settings_parameters = [];
                var GetE164Settings_nodeParam;
                var GetE164Settings_nodeParamType;

                GetE164Settings_nodeParam = node.GetE164Settings_select;
                GetE164Settings_nodeParamType = node.GetE164Settings_selectType;
                if (GetE164Settings_nodeParamType === 'str') {
                    GetE164Settings_parameters.select = GetE164Settings_nodeParam || '';
                } else {
                    GetE164Settings_parameters.select = RED.util.getMessageProperty(msg, GetE164Settings_nodeParam);
                }
                GetE164Settings_parameters.select = !!GetE164Settings_parameters.select ? GetE164Settings_parameters.select : msg.payload;
                
                GetE164Settings_nodeParam = node.GetE164Settings_expand;
                GetE164Settings_nodeParamType = node.GetE164Settings_expandType;
                if (GetE164Settings_nodeParamType === 'str') {
                    GetE164Settings_parameters.expand = GetE164Settings_nodeParam || '';
                } else {
                    GetE164Settings_parameters.expand = RED.util.getMessageProperty(msg, GetE164Settings_nodeParam);
                }
                GetE164Settings_parameters.expand = !!GetE164Settings_parameters.expand ? GetE164Settings_parameters.expand : msg.payload;
                                result = client.GetE164Settings(GetE164Settings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateE164Settings') {
                var UpdateE164Settings_parameters = [];
                var UpdateE164Settings_nodeParam;
                var UpdateE164Settings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateE164Settings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateE164Settings(UpdateE164Settings_parameters);
            }
            if (!errorFlag && node.method === 'ListEmailTemplate') {
                var ListEmailTemplate_parameters = [];
                var ListEmailTemplate_nodeParam;
                var ListEmailTemplate_nodeParamType;

                ListEmailTemplate_nodeParam = node.ListEmailTemplate_top;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_topType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.top = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.top = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.top = !!ListEmailTemplate_parameters.top ? ListEmailTemplate_parameters.top : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_skip;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_skipType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.skip = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.skip = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.skip = !!ListEmailTemplate_parameters.skip ? ListEmailTemplate_parameters.skip : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_search;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_searchType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.search = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.search = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.search = !!ListEmailTemplate_parameters.search ? ListEmailTemplate_parameters.search : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_filter;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_filterType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.filter = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.filter = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.filter = !!ListEmailTemplate_parameters.filter ? ListEmailTemplate_parameters.filter : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_count;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_countType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.count = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.count = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.count = !!ListEmailTemplate_parameters.count ? ListEmailTemplate_parameters.count : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_orderby;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_orderbyType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.orderby = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.orderby = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.orderby = !!ListEmailTemplate_parameters.orderby ? ListEmailTemplate_parameters.orderby : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_select;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_selectType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.select = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.select = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.select = !!ListEmailTemplate_parameters.select ? ListEmailTemplate_parameters.select : msg.payload;
                
                ListEmailTemplate_nodeParam = node.ListEmailTemplate_expand;
                ListEmailTemplate_nodeParamType = node.ListEmailTemplate_expandType;
                if (ListEmailTemplate_nodeParamType === 'str') {
                    ListEmailTemplate_parameters.expand = ListEmailTemplate_nodeParam || '';
                } else {
                    ListEmailTemplate_parameters.expand = RED.util.getMessageProperty(msg, ListEmailTemplate_nodeParam);
                }
                ListEmailTemplate_parameters.expand = !!ListEmailTemplate_parameters.expand ? ListEmailTemplate_parameters.expand : msg.payload;
                                result = client.ListEmailTemplate(ListEmailTemplate_parameters);
            }
            if (!errorFlag && node.method === 'GetEmailTemplate') {
                var GetEmailTemplate_parameters = [];
                var GetEmailTemplate_nodeParam;
                var GetEmailTemplate_nodeParamType;

                GetEmailTemplate_nodeParam = node.GetEmailTemplate_templatePath;
                GetEmailTemplate_nodeParamType = node.GetEmailTemplate_templatePathType;
                if (GetEmailTemplate_nodeParamType === 'str') {
                    GetEmailTemplate_parameters.templatePath = GetEmailTemplate_nodeParam || '';
                } else {
                    GetEmailTemplate_parameters.templatePath = RED.util.getMessageProperty(msg, GetEmailTemplate_nodeParam);
                }
                GetEmailTemplate_parameters.templatePath = !!GetEmailTemplate_parameters.templatePath ? GetEmailTemplate_parameters.templatePath : msg.payload;
                
                GetEmailTemplate_nodeParam = node.GetEmailTemplate_select;
                GetEmailTemplate_nodeParamType = node.GetEmailTemplate_selectType;
                if (GetEmailTemplate_nodeParamType === 'str') {
                    GetEmailTemplate_parameters.select = GetEmailTemplate_nodeParam || '';
                } else {
                    GetEmailTemplate_parameters.select = RED.util.getMessageProperty(msg, GetEmailTemplate_nodeParam);
                }
                GetEmailTemplate_parameters.select = !!GetEmailTemplate_parameters.select ? GetEmailTemplate_parameters.select : msg.payload;
                
                GetEmailTemplate_nodeParam = node.GetEmailTemplate_expand;
                GetEmailTemplate_nodeParamType = node.GetEmailTemplate_expandType;
                if (GetEmailTemplate_nodeParamType === 'str') {
                    GetEmailTemplate_parameters.expand = GetEmailTemplate_nodeParam || '';
                } else {
                    GetEmailTemplate_parameters.expand = RED.util.getMessageProperty(msg, GetEmailTemplate_nodeParam);
                }
                GetEmailTemplate_parameters.expand = !!GetEmailTemplate_parameters.expand ? GetEmailTemplate_parameters.expand : msg.payload;
                                result = client.GetEmailTemplate(GetEmailTemplate_parameters);
            }
            if (!errorFlag && node.method === 'UpdateEmailTemplate') {
                var UpdateEmailTemplate_parameters = [];
                var UpdateEmailTemplate_nodeParam;
                var UpdateEmailTemplate_nodeParamType;

                UpdateEmailTemplate_nodeParam = node.UpdateEmailTemplate_templatePath;
                UpdateEmailTemplate_nodeParamType = node.UpdateEmailTemplate_templatePathType;
                if (UpdateEmailTemplate_nodeParamType === 'str') {
                    UpdateEmailTemplate_parameters.templatePath = UpdateEmailTemplate_nodeParam || '';
                } else {
                    UpdateEmailTemplate_parameters.templatePath = RED.util.getMessageProperty(msg, UpdateEmailTemplate_nodeParam);
                }
                UpdateEmailTemplate_parameters.templatePath = !!UpdateEmailTemplate_parameters.templatePath ? UpdateEmailTemplate_parameters.templatePath : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateEmailTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateEmailTemplate(UpdateEmailTemplate_parameters);
            }
            if (!errorFlag && node.method === 'SetDefault') {
                var SetDefault_parameters = [];
                var SetDefault_nodeParam;
                var SetDefault_nodeParamType;

                SetDefault_nodeParam = node.SetDefault_templatePath;
                SetDefault_nodeParamType = node.SetDefault_templatePathType;
                if (SetDefault_nodeParamType === 'str') {
                    SetDefault_parameters.templatePath = SetDefault_nodeParam || '';
                } else {
                    SetDefault_parameters.templatePath = RED.util.getMessageProperty(msg, SetDefault_nodeParam);
                }
                SetDefault_parameters.templatePath = !!SetDefault_parameters.templatePath ? SetDefault_parameters.templatePath : msg.payload;
                                result = client.SetDefault(SetDefault_parameters);
            }
            if (!errorFlag && node.method === 'GetEmergencyNotificationsSettings') {
                var GetEmergencyNotificationsSettings_parameters = [];
                var GetEmergencyNotificationsSettings_nodeParam;
                var GetEmergencyNotificationsSettings_nodeParamType;

                GetEmergencyNotificationsSettings_nodeParam = node.GetEmergencyNotificationsSettings_select;
                GetEmergencyNotificationsSettings_nodeParamType = node.GetEmergencyNotificationsSettings_selectType;
                if (GetEmergencyNotificationsSettings_nodeParamType === 'str') {
                    GetEmergencyNotificationsSettings_parameters.select = GetEmergencyNotificationsSettings_nodeParam || '';
                } else {
                    GetEmergencyNotificationsSettings_parameters.select = RED.util.getMessageProperty(msg, GetEmergencyNotificationsSettings_nodeParam);
                }
                GetEmergencyNotificationsSettings_parameters.select = !!GetEmergencyNotificationsSettings_parameters.select ? GetEmergencyNotificationsSettings_parameters.select : msg.payload;
                
                GetEmergencyNotificationsSettings_nodeParam = node.GetEmergencyNotificationsSettings_expand;
                GetEmergencyNotificationsSettings_nodeParamType = node.GetEmergencyNotificationsSettings_expandType;
                if (GetEmergencyNotificationsSettings_nodeParamType === 'str') {
                    GetEmergencyNotificationsSettings_parameters.expand = GetEmergencyNotificationsSettings_nodeParam || '';
                } else {
                    GetEmergencyNotificationsSettings_parameters.expand = RED.util.getMessageProperty(msg, GetEmergencyNotificationsSettings_nodeParam);
                }
                GetEmergencyNotificationsSettings_parameters.expand = !!GetEmergencyNotificationsSettings_parameters.expand ? GetEmergencyNotificationsSettings_parameters.expand : msg.payload;
                                result = client.GetEmergencyNotificationsSettings(GetEmergencyNotificationsSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateEmergencyNotificationsSettings') {
                var UpdateEmergencyNotificationsSettings_parameters = [];
                var UpdateEmergencyNotificationsSettings_nodeParam;
                var UpdateEmergencyNotificationsSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateEmergencyNotificationsSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateEmergencyNotificationsSettings(UpdateEmergencyNotificationsSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListEventLog') {
                var ListEventLog_parameters = [];
                var ListEventLog_nodeParam;
                var ListEventLog_nodeParamType;

                ListEventLog_nodeParam = node.ListEventLog_top;
                ListEventLog_nodeParamType = node.ListEventLog_topType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.top = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.top = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.top = !!ListEventLog_parameters.top ? ListEventLog_parameters.top : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_skip;
                ListEventLog_nodeParamType = node.ListEventLog_skipType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.skip = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.skip = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.skip = !!ListEventLog_parameters.skip ? ListEventLog_parameters.skip : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_search;
                ListEventLog_nodeParamType = node.ListEventLog_searchType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.search = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.search = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.search = !!ListEventLog_parameters.search ? ListEventLog_parameters.search : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_filter;
                ListEventLog_nodeParamType = node.ListEventLog_filterType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.filter = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.filter = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.filter = !!ListEventLog_parameters.filter ? ListEventLog_parameters.filter : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_count;
                ListEventLog_nodeParamType = node.ListEventLog_countType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.count = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.count = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.count = !!ListEventLog_parameters.count ? ListEventLog_parameters.count : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_orderby;
                ListEventLog_nodeParamType = node.ListEventLog_orderbyType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.orderby = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.orderby = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.orderby = !!ListEventLog_parameters.orderby ? ListEventLog_parameters.orderby : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_select;
                ListEventLog_nodeParamType = node.ListEventLog_selectType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.select = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.select = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.select = !!ListEventLog_parameters.select ? ListEventLog_parameters.select : msg.payload;
                
                ListEventLog_nodeParam = node.ListEventLog_expand;
                ListEventLog_nodeParamType = node.ListEventLog_expandType;
                if (ListEventLog_nodeParamType === 'str') {
                    ListEventLog_parameters.expand = ListEventLog_nodeParam || '';
                } else {
                    ListEventLog_parameters.expand = RED.util.getMessageProperty(msg, ListEventLog_nodeParam);
                }
                ListEventLog_parameters.expand = !!ListEventLog_parameters.expand ? ListEventLog_parameters.expand : msg.payload;
                                result = client.ListEventLog(ListEventLog_parameters);
            }
            if (!errorFlag && node.method === 'DownloadEventLogs') {
                var DownloadEventLogs_parameters = [];
                var DownloadEventLogs_nodeParam;
                var DownloadEventLogs_nodeParamType;
                result = client.DownloadEventLogs(DownloadEventLogs_parameters);
            }
            if (!errorFlag && node.method === 'PurgeEventLog') {
                var PurgeEventLog_parameters = [];
                var PurgeEventLog_nodeParam;
                var PurgeEventLog_nodeParamType;
                result = client.PurgeEventLog(PurgeEventLog_parameters);
            }
            if (!errorFlag && node.method === 'InitFax') {
                var InitFax_parameters = [];
                var InitFax_nodeParam;
                var InitFax_nodeParamType;
                result = client.InitFax(InitFax_parameters);
            }
            if (!errorFlag && node.method === 'ListFax') {
                var ListFax_parameters = [];
                var ListFax_nodeParam;
                var ListFax_nodeParamType;

                ListFax_nodeParam = node.ListFax_top;
                ListFax_nodeParamType = node.ListFax_topType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.top = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.top = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.top = !!ListFax_parameters.top ? ListFax_parameters.top : msg.payload;
                
                ListFax_nodeParam = node.ListFax_skip;
                ListFax_nodeParamType = node.ListFax_skipType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.skip = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.skip = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.skip = !!ListFax_parameters.skip ? ListFax_parameters.skip : msg.payload;
                
                ListFax_nodeParam = node.ListFax_search;
                ListFax_nodeParamType = node.ListFax_searchType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.search = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.search = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.search = !!ListFax_parameters.search ? ListFax_parameters.search : msg.payload;
                
                ListFax_nodeParam = node.ListFax_filter;
                ListFax_nodeParamType = node.ListFax_filterType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.filter = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.filter = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.filter = !!ListFax_parameters.filter ? ListFax_parameters.filter : msg.payload;
                
                ListFax_nodeParam = node.ListFax_count;
                ListFax_nodeParamType = node.ListFax_countType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.count = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.count = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.count = !!ListFax_parameters.count ? ListFax_parameters.count : msg.payload;
                
                ListFax_nodeParam = node.ListFax_orderby;
                ListFax_nodeParamType = node.ListFax_orderbyType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.orderby = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.orderby = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.orderby = !!ListFax_parameters.orderby ? ListFax_parameters.orderby : msg.payload;
                
                ListFax_nodeParam = node.ListFax_select;
                ListFax_nodeParamType = node.ListFax_selectType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.select = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.select = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.select = !!ListFax_parameters.select ? ListFax_parameters.select : msg.payload;
                
                ListFax_nodeParam = node.ListFax_expand;
                ListFax_nodeParamType = node.ListFax_expandType;
                if (ListFax_nodeParamType === 'str') {
                    ListFax_parameters.expand = ListFax_nodeParam || '';
                } else {
                    ListFax_parameters.expand = RED.util.getMessageProperty(msg, ListFax_nodeParam);
                }
                ListFax_parameters.expand = !!ListFax_parameters.expand ? ListFax_parameters.expand : msg.payload;
                                result = client.ListFax(ListFax_parameters);
            }
            if (!errorFlag && node.method === 'CreateFax') {
                var CreateFax_parameters = [];
                var CreateFax_nodeParam;
                var CreateFax_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateFax_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateFax(CreateFax_parameters);
            }
            if (!errorFlag && node.method === 'GetFax') {
                var GetFax_parameters = [];
                var GetFax_nodeParam;
                var GetFax_nodeParamType;

                GetFax_nodeParam = node.GetFax_id;
                GetFax_nodeParamType = node.GetFax_idType;
                if (GetFax_nodeParamType === 'str') {
                    GetFax_parameters.id = GetFax_nodeParam || '';
                } else {
                    GetFax_parameters.id = RED.util.getMessageProperty(msg, GetFax_nodeParam);
                }
                GetFax_parameters.id = !!GetFax_parameters.id ? GetFax_parameters.id : msg.payload;
                
                GetFax_nodeParam = node.GetFax_select;
                GetFax_nodeParamType = node.GetFax_selectType;
                if (GetFax_nodeParamType === 'str') {
                    GetFax_parameters.select = GetFax_nodeParam || '';
                } else {
                    GetFax_parameters.select = RED.util.getMessageProperty(msg, GetFax_nodeParam);
                }
                GetFax_parameters.select = !!GetFax_parameters.select ? GetFax_parameters.select : msg.payload;
                
                GetFax_nodeParam = node.GetFax_expand;
                GetFax_nodeParamType = node.GetFax_expandType;
                if (GetFax_nodeParamType === 'str') {
                    GetFax_parameters.expand = GetFax_nodeParam || '';
                } else {
                    GetFax_parameters.expand = RED.util.getMessageProperty(msg, GetFax_nodeParam);
                }
                GetFax_parameters.expand = !!GetFax_parameters.expand ? GetFax_parameters.expand : msg.payload;
                                result = client.GetFax(GetFax_parameters);
            }
            if (!errorFlag && node.method === 'UpdateFax') {
                var UpdateFax_parameters = [];
                var UpdateFax_nodeParam;
                var UpdateFax_nodeParamType;

                UpdateFax_nodeParam = node.UpdateFax_id;
                UpdateFax_nodeParamType = node.UpdateFax_idType;
                if (UpdateFax_nodeParamType === 'str') {
                    UpdateFax_parameters.id = UpdateFax_nodeParam || '';
                } else {
                    UpdateFax_parameters.id = RED.util.getMessageProperty(msg, UpdateFax_nodeParam);
                }
                UpdateFax_parameters.id = !!UpdateFax_parameters.id ? UpdateFax_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateFax_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateFax(UpdateFax_parameters);
            }
            if (!errorFlag && node.method === 'DeleteFax') {
                var DeleteFax_parameters = [];
                var DeleteFax_nodeParam;
                var DeleteFax_nodeParamType;

                DeleteFax_nodeParam = node.DeleteFax_id;
                DeleteFax_nodeParamType = node.DeleteFax_idType;
                if (DeleteFax_nodeParamType === 'str') {
                    DeleteFax_parameters.id = DeleteFax_nodeParam || '';
                } else {
                    DeleteFax_parameters.id = RED.util.getMessageProperty(msg, DeleteFax_nodeParam);
                }
                DeleteFax_parameters.id = !!DeleteFax_parameters.id ? DeleteFax_parameters.id : msg.payload;
                
                DeleteFax_nodeParam = node.DeleteFax_ifMatch;
                DeleteFax_nodeParamType = node.DeleteFax_ifMatchType;
                if (DeleteFax_nodeParamType === 'str') {
                    DeleteFax_parameters.ifMatch = DeleteFax_nodeParam || '';
                } else {
                    DeleteFax_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteFax_nodeParam);
                }
                DeleteFax_parameters.ifMatch = !!DeleteFax_parameters.ifMatch ? DeleteFax_parameters.ifMatch : msg.payload;
                                result = client.DeleteFax(DeleteFax_parameters);
            }
            if (!errorFlag && node.method === 'BulkFaxDelete') {
                var BulkFaxDelete_parameters = [];
                var BulkFaxDelete_nodeParam;
                var BulkFaxDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkFaxDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkFaxDelete(BulkFaxDelete_parameters);
            }
            if (!errorFlag && node.method === 'GetFaxByNumber') {
                var GetFaxByNumber_parameters = [];
                var GetFaxByNumber_nodeParam;
                var GetFaxByNumber_nodeParamType;

                GetFaxByNumber_nodeParam = node.GetFaxByNumber_number;
                GetFaxByNumber_nodeParamType = node.GetFaxByNumber_numberType;
                if (GetFaxByNumber_nodeParamType === 'str') {
                    GetFaxByNumber_parameters.number = GetFaxByNumber_nodeParam || '';
                } else {
                    GetFaxByNumber_parameters.number = RED.util.getMessageProperty(msg, GetFaxByNumber_nodeParam);
                }
                GetFaxByNumber_parameters.number = !!GetFaxByNumber_parameters.number ? GetFaxByNumber_parameters.number : msg.payload;
                                result = client.GetFaxByNumber(GetFaxByNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetFaxServerSettings') {
                var GetFaxServerSettings_parameters = [];
                var GetFaxServerSettings_nodeParam;
                var GetFaxServerSettings_nodeParamType;

                GetFaxServerSettings_nodeParam = node.GetFaxServerSettings_select;
                GetFaxServerSettings_nodeParamType = node.GetFaxServerSettings_selectType;
                if (GetFaxServerSettings_nodeParamType === 'str') {
                    GetFaxServerSettings_parameters.select = GetFaxServerSettings_nodeParam || '';
                } else {
                    GetFaxServerSettings_parameters.select = RED.util.getMessageProperty(msg, GetFaxServerSettings_nodeParam);
                }
                GetFaxServerSettings_parameters.select = !!GetFaxServerSettings_parameters.select ? GetFaxServerSettings_parameters.select : msg.payload;
                
                GetFaxServerSettings_nodeParam = node.GetFaxServerSettings_expand;
                GetFaxServerSettings_nodeParamType = node.GetFaxServerSettings_expandType;
                if (GetFaxServerSettings_nodeParamType === 'str') {
                    GetFaxServerSettings_parameters.expand = GetFaxServerSettings_nodeParam || '';
                } else {
                    GetFaxServerSettings_parameters.expand = RED.util.getMessageProperty(msg, GetFaxServerSettings_nodeParam);
                }
                GetFaxServerSettings_parameters.expand = !!GetFaxServerSettings_parameters.expand ? GetFaxServerSettings_parameters.expand : msg.payload;
                                result = client.GetFaxServerSettings(GetFaxServerSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateFaxServerSettings') {
                var UpdateFaxServerSettings_parameters = [];
                var UpdateFaxServerSettings_nodeParam;
                var UpdateFaxServerSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateFaxServerSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateFaxServerSettings(UpdateFaxServerSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetFaxFilesSize') {
                var GetFaxFilesSize_parameters = [];
                var GetFaxFilesSize_nodeParam;
                var GetFaxFilesSize_nodeParamType;
                result = client.GetFaxFilesSize(GetFaxFilesSize_parameters);
            }
            if (!errorFlag && node.method === 'CleanUpFax') {
                var CleanUpFax_parameters = [];
                var CleanUpFax_nodeParam;
                var CleanUpFax_nodeParamType;
                result = client.CleanUpFax(CleanUpFax_parameters);
            }
            if (!errorFlag && node.method === 'GetFirewallState') {
                var GetFirewallState_parameters = [];
                var GetFirewallState_nodeParam;
                var GetFirewallState_nodeParamType;

                GetFirewallState_nodeParam = node.GetFirewallState_select;
                GetFirewallState_nodeParamType = node.GetFirewallState_selectType;
                if (GetFirewallState_nodeParamType === 'str') {
                    GetFirewallState_parameters.select = GetFirewallState_nodeParam || '';
                } else {
                    GetFirewallState_parameters.select = RED.util.getMessageProperty(msg, GetFirewallState_nodeParam);
                }
                GetFirewallState_parameters.select = !!GetFirewallState_parameters.select ? GetFirewallState_parameters.select : msg.payload;
                
                GetFirewallState_nodeParam = node.GetFirewallState_expand;
                GetFirewallState_nodeParamType = node.GetFirewallState_expandType;
                if (GetFirewallState_nodeParamType === 'str') {
                    GetFirewallState_parameters.expand = GetFirewallState_nodeParam || '';
                } else {
                    GetFirewallState_parameters.expand = RED.util.getMessageProperty(msg, GetFirewallState_nodeParam);
                }
                GetFirewallState_parameters.expand = !!GetFirewallState_parameters.expand ? GetFirewallState_parameters.expand : msg.payload;
                                result = client.GetFirewallState(GetFirewallState_parameters);
            }
            if (!errorFlag && node.method === 'GetLastResult') {
                var GetLastResult_parameters = [];
                var GetLastResult_nodeParam;
                var GetLastResult_nodeParamType;
                result = client.GetLastResult(GetLastResult_parameters);
            }
            if (!errorFlag && node.method === 'StartCheck') {
                var StartCheck_parameters = [];
                var StartCheck_nodeParam;
                var StartCheck_nodeParamType;
                result = client.StartCheck(StartCheck_parameters);
            }
            if (!errorFlag && node.method === 'StopCheck') {
                var StopCheck_parameters = [];
                var StopCheck_nodeParam;
                var StopCheck_nodeParamType;
                result = client.StopCheck(StopCheck_parameters);
            }
            if (!errorFlag && node.method === 'GetFirmwareState') {
                var GetFirmwareState_parameters = [];
                var GetFirmwareState_nodeParam;
                var GetFirmwareState_nodeParamType;

                GetFirmwareState_nodeParam = node.GetFirmwareState_select;
                GetFirmwareState_nodeParamType = node.GetFirmwareState_selectType;
                if (GetFirmwareState_nodeParamType === 'str') {
                    GetFirmwareState_parameters.select = GetFirmwareState_nodeParam || '';
                } else {
                    GetFirmwareState_parameters.select = RED.util.getMessageProperty(msg, GetFirmwareState_nodeParam);
                }
                GetFirmwareState_parameters.select = !!GetFirmwareState_parameters.select ? GetFirmwareState_parameters.select : msg.payload;
                
                GetFirmwareState_nodeParam = node.GetFirmwareState_expand;
                GetFirmwareState_nodeParamType = node.GetFirmwareState_expandType;
                if (GetFirmwareState_nodeParamType === 'str') {
                    GetFirmwareState_parameters.expand = GetFirmwareState_nodeParam || '';
                } else {
                    GetFirmwareState_parameters.expand = RED.util.getMessageProperty(msg, GetFirmwareState_nodeParam);
                }
                GetFirmwareState_parameters.expand = !!GetFirmwareState_parameters.expand ? GetFirmwareState_parameters.expand : msg.payload;
                                result = client.GetFirmwareState(GetFirmwareState_parameters);
            }
            if (!errorFlag && node.method === 'CleanUp') {
                var CleanUp_parameters = [];
                var CleanUp_nodeParam;
                var CleanUp_nodeParamType;
                result = client.CleanUp(CleanUp_parameters);
            }
            if (!errorFlag && node.method === 'ListFxs') {
                var ListFxs_parameters = [];
                var ListFxs_nodeParam;
                var ListFxs_nodeParamType;

                ListFxs_nodeParam = node.ListFxs_top;
                ListFxs_nodeParamType = node.ListFxs_topType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.top = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.top = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.top = !!ListFxs_parameters.top ? ListFxs_parameters.top : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_skip;
                ListFxs_nodeParamType = node.ListFxs_skipType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.skip = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.skip = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.skip = !!ListFxs_parameters.skip ? ListFxs_parameters.skip : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_search;
                ListFxs_nodeParamType = node.ListFxs_searchType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.search = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.search = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.search = !!ListFxs_parameters.search ? ListFxs_parameters.search : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_filter;
                ListFxs_nodeParamType = node.ListFxs_filterType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.filter = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.filter = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.filter = !!ListFxs_parameters.filter ? ListFxs_parameters.filter : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_count;
                ListFxs_nodeParamType = node.ListFxs_countType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.count = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.count = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.count = !!ListFxs_parameters.count ? ListFxs_parameters.count : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_orderby;
                ListFxs_nodeParamType = node.ListFxs_orderbyType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.orderby = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.orderby = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.orderby = !!ListFxs_parameters.orderby ? ListFxs_parameters.orderby : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_select;
                ListFxs_nodeParamType = node.ListFxs_selectType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.select = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.select = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.select = !!ListFxs_parameters.select ? ListFxs_parameters.select : msg.payload;
                
                ListFxs_nodeParam = node.ListFxs_expand;
                ListFxs_nodeParamType = node.ListFxs_expandType;
                if (ListFxs_nodeParamType === 'str') {
                    ListFxs_parameters.expand = ListFxs_nodeParam || '';
                } else {
                    ListFxs_parameters.expand = RED.util.getMessageProperty(msg, ListFxs_nodeParam);
                }
                ListFxs_parameters.expand = !!ListFxs_parameters.expand ? ListFxs_parameters.expand : msg.payload;
                                result = client.ListFxs(ListFxs_parameters);
            }
            if (!errorFlag && node.method === 'CreateFxs') {
                var CreateFxs_parameters = [];
                var CreateFxs_nodeParam;
                var CreateFxs_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateFxs_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateFxs(CreateFxs_parameters);
            }
            if (!errorFlag && node.method === 'GetFxs') {
                var GetFxs_parameters = [];
                var GetFxs_nodeParam;
                var GetFxs_nodeParamType;

                GetFxs_nodeParam = node.GetFxs_macAddress;
                GetFxs_nodeParamType = node.GetFxs_macAddressType;
                if (GetFxs_nodeParamType === 'str') {
                    GetFxs_parameters.macAddress = GetFxs_nodeParam || '';
                } else {
                    GetFxs_parameters.macAddress = RED.util.getMessageProperty(msg, GetFxs_nodeParam);
                }
                GetFxs_parameters.macAddress = !!GetFxs_parameters.macAddress ? GetFxs_parameters.macAddress : msg.payload;
                
                GetFxs_nodeParam = node.GetFxs_select;
                GetFxs_nodeParamType = node.GetFxs_selectType;
                if (GetFxs_nodeParamType === 'str') {
                    GetFxs_parameters.select = GetFxs_nodeParam || '';
                } else {
                    GetFxs_parameters.select = RED.util.getMessageProperty(msg, GetFxs_nodeParam);
                }
                GetFxs_parameters.select = !!GetFxs_parameters.select ? GetFxs_parameters.select : msg.payload;
                
                GetFxs_nodeParam = node.GetFxs_expand;
                GetFxs_nodeParamType = node.GetFxs_expandType;
                if (GetFxs_nodeParamType === 'str') {
                    GetFxs_parameters.expand = GetFxs_nodeParam || '';
                } else {
                    GetFxs_parameters.expand = RED.util.getMessageProperty(msg, GetFxs_nodeParam);
                }
                GetFxs_parameters.expand = !!GetFxs_parameters.expand ? GetFxs_parameters.expand : msg.payload;
                                result = client.GetFxs(GetFxs_parameters);
            }
            if (!errorFlag && node.method === 'UpdateFxs') {
                var UpdateFxs_parameters = [];
                var UpdateFxs_nodeParam;
                var UpdateFxs_nodeParamType;

                UpdateFxs_nodeParam = node.UpdateFxs_macAddress;
                UpdateFxs_nodeParamType = node.UpdateFxs_macAddressType;
                if (UpdateFxs_nodeParamType === 'str') {
                    UpdateFxs_parameters.macAddress = UpdateFxs_nodeParam || '';
                } else {
                    UpdateFxs_parameters.macAddress = RED.util.getMessageProperty(msg, UpdateFxs_nodeParam);
                }
                UpdateFxs_parameters.macAddress = !!UpdateFxs_parameters.macAddress ? UpdateFxs_parameters.macAddress : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateFxs_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateFxs(UpdateFxs_parameters);
            }
            if (!errorFlag && node.method === 'DeleteFxs') {
                var DeleteFxs_parameters = [];
                var DeleteFxs_nodeParam;
                var DeleteFxs_nodeParamType;

                DeleteFxs_nodeParam = node.DeleteFxs_macAddress;
                DeleteFxs_nodeParamType = node.DeleteFxs_macAddressType;
                if (DeleteFxs_nodeParamType === 'str') {
                    DeleteFxs_parameters.macAddress = DeleteFxs_nodeParam || '';
                } else {
                    DeleteFxs_parameters.macAddress = RED.util.getMessageProperty(msg, DeleteFxs_nodeParam);
                }
                DeleteFxs_parameters.macAddress = !!DeleteFxs_parameters.macAddress ? DeleteFxs_parameters.macAddress : msg.payload;
                
                DeleteFxs_nodeParam = node.DeleteFxs_ifMatch;
                DeleteFxs_nodeParamType = node.DeleteFxs_ifMatchType;
                if (DeleteFxs_nodeParamType === 'str') {
                    DeleteFxs_parameters.ifMatch = DeleteFxs_nodeParam || '';
                } else {
                    DeleteFxs_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteFxs_nodeParam);
                }
                DeleteFxs_parameters.ifMatch = !!DeleteFxs_parameters.ifMatch ? DeleteFxs_parameters.ifMatch : msg.payload;
                                result = client.DeleteFxs(DeleteFxs_parameters);
            }
            if (!errorFlag && node.method === 'ListFxsTemplate') {
                var ListFxsTemplate_parameters = [];
                var ListFxsTemplate_nodeParam;
                var ListFxsTemplate_nodeParamType;

                ListFxsTemplate_nodeParam = node.ListFxsTemplate_top;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_topType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.top = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.top = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.top = !!ListFxsTemplate_parameters.top ? ListFxsTemplate_parameters.top : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_skip;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_skipType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.skip = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.skip = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.skip = !!ListFxsTemplate_parameters.skip ? ListFxsTemplate_parameters.skip : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_search;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_searchType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.search = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.search = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.search = !!ListFxsTemplate_parameters.search ? ListFxsTemplate_parameters.search : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_filter;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_filterType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.filter = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.filter = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.filter = !!ListFxsTemplate_parameters.filter ? ListFxsTemplate_parameters.filter : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_count;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_countType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.count = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.count = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.count = !!ListFxsTemplate_parameters.count ? ListFxsTemplate_parameters.count : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_orderby;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_orderbyType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.orderby = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.orderby = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.orderby = !!ListFxsTemplate_parameters.orderby ? ListFxsTemplate_parameters.orderby : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_select;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_selectType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.select = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.select = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.select = !!ListFxsTemplate_parameters.select ? ListFxsTemplate_parameters.select : msg.payload;
                
                ListFxsTemplate_nodeParam = node.ListFxsTemplate_expand;
                ListFxsTemplate_nodeParamType = node.ListFxsTemplate_expandType;
                if (ListFxsTemplate_nodeParamType === 'str') {
                    ListFxsTemplate_parameters.expand = ListFxsTemplate_nodeParam || '';
                } else {
                    ListFxsTemplate_parameters.expand = RED.util.getMessageProperty(msg, ListFxsTemplate_nodeParam);
                }
                ListFxsTemplate_parameters.expand = !!ListFxsTemplate_parameters.expand ? ListFxsTemplate_parameters.expand : msg.payload;
                                result = client.ListFxsTemplate(ListFxsTemplate_parameters);
            }
            if (!errorFlag && node.method === 'CreateFxsTemplate') {
                var CreateFxsTemplate_parameters = [];
                var CreateFxsTemplate_nodeParam;
                var CreateFxsTemplate_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateFxsTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateFxsTemplate(CreateFxsTemplate_parameters);
            }
            if (!errorFlag && node.method === 'GetFxsTemplate') {
                var GetFxsTemplate_parameters = [];
                var GetFxsTemplate_nodeParam;
                var GetFxsTemplate_nodeParamType;

                GetFxsTemplate_nodeParam = node.GetFxsTemplate_id;
                GetFxsTemplate_nodeParamType = node.GetFxsTemplate_idType;
                if (GetFxsTemplate_nodeParamType === 'str') {
                    GetFxsTemplate_parameters.id = GetFxsTemplate_nodeParam || '';
                } else {
                    GetFxsTemplate_parameters.id = RED.util.getMessageProperty(msg, GetFxsTemplate_nodeParam);
                }
                GetFxsTemplate_parameters.id = !!GetFxsTemplate_parameters.id ? GetFxsTemplate_parameters.id : msg.payload;
                
                GetFxsTemplate_nodeParam = node.GetFxsTemplate_select;
                GetFxsTemplate_nodeParamType = node.GetFxsTemplate_selectType;
                if (GetFxsTemplate_nodeParamType === 'str') {
                    GetFxsTemplate_parameters.select = GetFxsTemplate_nodeParam || '';
                } else {
                    GetFxsTemplate_parameters.select = RED.util.getMessageProperty(msg, GetFxsTemplate_nodeParam);
                }
                GetFxsTemplate_parameters.select = !!GetFxsTemplate_parameters.select ? GetFxsTemplate_parameters.select : msg.payload;
                
                GetFxsTemplate_nodeParam = node.GetFxsTemplate_expand;
                GetFxsTemplate_nodeParamType = node.GetFxsTemplate_expandType;
                if (GetFxsTemplate_nodeParamType === 'str') {
                    GetFxsTemplate_parameters.expand = GetFxsTemplate_nodeParam || '';
                } else {
                    GetFxsTemplate_parameters.expand = RED.util.getMessageProperty(msg, GetFxsTemplate_nodeParam);
                }
                GetFxsTemplate_parameters.expand = !!GetFxsTemplate_parameters.expand ? GetFxsTemplate_parameters.expand : msg.payload;
                                result = client.GetFxsTemplate(GetFxsTemplate_parameters);
            }
            if (!errorFlag && node.method === 'UpdateFxsTemplate') {
                var UpdateFxsTemplate_parameters = [];
                var UpdateFxsTemplate_nodeParam;
                var UpdateFxsTemplate_nodeParamType;

                UpdateFxsTemplate_nodeParam = node.UpdateFxsTemplate_id;
                UpdateFxsTemplate_nodeParamType = node.UpdateFxsTemplate_idType;
                if (UpdateFxsTemplate_nodeParamType === 'str') {
                    UpdateFxsTemplate_parameters.id = UpdateFxsTemplate_nodeParam || '';
                } else {
                    UpdateFxsTemplate_parameters.id = RED.util.getMessageProperty(msg, UpdateFxsTemplate_nodeParam);
                }
                UpdateFxsTemplate_parameters.id = !!UpdateFxsTemplate_parameters.id ? UpdateFxsTemplate_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateFxsTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateFxsTemplate(UpdateFxsTemplate_parameters);
            }
            if (!errorFlag && node.method === 'DeleteFxsTemplate') {
                var DeleteFxsTemplate_parameters = [];
                var DeleteFxsTemplate_nodeParam;
                var DeleteFxsTemplate_nodeParamType;

                DeleteFxsTemplate_nodeParam = node.DeleteFxsTemplate_id;
                DeleteFxsTemplate_nodeParamType = node.DeleteFxsTemplate_idType;
                if (DeleteFxsTemplate_nodeParamType === 'str') {
                    DeleteFxsTemplate_parameters.id = DeleteFxsTemplate_nodeParam || '';
                } else {
                    DeleteFxsTemplate_parameters.id = RED.util.getMessageProperty(msg, DeleteFxsTemplate_nodeParam);
                }
                DeleteFxsTemplate_parameters.id = !!DeleteFxsTemplate_parameters.id ? DeleteFxsTemplate_parameters.id : msg.payload;
                
                DeleteFxsTemplate_nodeParam = node.DeleteFxsTemplate_ifMatch;
                DeleteFxsTemplate_nodeParamType = node.DeleteFxsTemplate_ifMatchType;
                if (DeleteFxsTemplate_nodeParamType === 'str') {
                    DeleteFxsTemplate_parameters.ifMatch = DeleteFxsTemplate_nodeParam || '';
                } else {
                    DeleteFxsTemplate_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteFxsTemplate_nodeParam);
                }
                DeleteFxsTemplate_parameters.ifMatch = !!DeleteFxsTemplate_parameters.ifMatch ? DeleteFxsTemplate_parameters.ifMatch : msg.payload;
                                result = client.DeleteFxsTemplate(DeleteFxsTemplate_parameters);
            }
            if (!errorFlag && node.method === 'GetGeneralSettingsForApps') {
                var GetGeneralSettingsForApps_parameters = [];
                var GetGeneralSettingsForApps_nodeParam;
                var GetGeneralSettingsForApps_nodeParamType;

                GetGeneralSettingsForApps_nodeParam = node.GetGeneralSettingsForApps_select;
                GetGeneralSettingsForApps_nodeParamType = node.GetGeneralSettingsForApps_selectType;
                if (GetGeneralSettingsForApps_nodeParamType === 'str') {
                    GetGeneralSettingsForApps_parameters.select = GetGeneralSettingsForApps_nodeParam || '';
                } else {
                    GetGeneralSettingsForApps_parameters.select = RED.util.getMessageProperty(msg, GetGeneralSettingsForApps_nodeParam);
                }
                GetGeneralSettingsForApps_parameters.select = !!GetGeneralSettingsForApps_parameters.select ? GetGeneralSettingsForApps_parameters.select : msg.payload;
                
                GetGeneralSettingsForApps_nodeParam = node.GetGeneralSettingsForApps_expand;
                GetGeneralSettingsForApps_nodeParamType = node.GetGeneralSettingsForApps_expandType;
                if (GetGeneralSettingsForApps_nodeParamType === 'str') {
                    GetGeneralSettingsForApps_parameters.expand = GetGeneralSettingsForApps_nodeParam || '';
                } else {
                    GetGeneralSettingsForApps_parameters.expand = RED.util.getMessageProperty(msg, GetGeneralSettingsForApps_nodeParam);
                }
                GetGeneralSettingsForApps_parameters.expand = !!GetGeneralSettingsForApps_parameters.expand ? GetGeneralSettingsForApps_parameters.expand : msg.payload;
                                result = client.GetGeneralSettingsForApps(GetGeneralSettingsForApps_parameters);
            }
            if (!errorFlag && node.method === 'UpdateGeneralSettingsForApps') {
                var UpdateGeneralSettingsForApps_parameters = [];
                var UpdateGeneralSettingsForApps_nodeParam;
                var UpdateGeneralSettingsForApps_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateGeneralSettingsForApps_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateGeneralSettingsForApps(UpdateGeneralSettingsForApps_parameters);
            }
            if (!errorFlag && node.method === 'GetGeneralSettingsForPbx') {
                var GetGeneralSettingsForPbx_parameters = [];
                var GetGeneralSettingsForPbx_nodeParam;
                var GetGeneralSettingsForPbx_nodeParamType;

                GetGeneralSettingsForPbx_nodeParam = node.GetGeneralSettingsForPbx_select;
                GetGeneralSettingsForPbx_nodeParamType = node.GetGeneralSettingsForPbx_selectType;
                if (GetGeneralSettingsForPbx_nodeParamType === 'str') {
                    GetGeneralSettingsForPbx_parameters.select = GetGeneralSettingsForPbx_nodeParam || '';
                } else {
                    GetGeneralSettingsForPbx_parameters.select = RED.util.getMessageProperty(msg, GetGeneralSettingsForPbx_nodeParam);
                }
                GetGeneralSettingsForPbx_parameters.select = !!GetGeneralSettingsForPbx_parameters.select ? GetGeneralSettingsForPbx_parameters.select : msg.payload;
                
                GetGeneralSettingsForPbx_nodeParam = node.GetGeneralSettingsForPbx_expand;
                GetGeneralSettingsForPbx_nodeParamType = node.GetGeneralSettingsForPbx_expandType;
                if (GetGeneralSettingsForPbx_nodeParamType === 'str') {
                    GetGeneralSettingsForPbx_parameters.expand = GetGeneralSettingsForPbx_nodeParam || '';
                } else {
                    GetGeneralSettingsForPbx_parameters.expand = RED.util.getMessageProperty(msg, GetGeneralSettingsForPbx_nodeParam);
                }
                GetGeneralSettingsForPbx_parameters.expand = !!GetGeneralSettingsForPbx_parameters.expand ? GetGeneralSettingsForPbx_parameters.expand : msg.payload;
                                result = client.GetGeneralSettingsForPbx(GetGeneralSettingsForPbx_parameters);
            }
            if (!errorFlag && node.method === 'UpdateGeneralSettingsForPbx') {
                var UpdateGeneralSettingsForPbx_parameters = [];
                var UpdateGeneralSettingsForPbx_nodeParam;
                var UpdateGeneralSettingsForPbx_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateGeneralSettingsForPbx_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateGeneralSettingsForPbx(UpdateGeneralSettingsForPbx_parameters);
            }
            if (!errorFlag && node.method === 'GetGoogleSettings') {
                var GetGoogleSettings_parameters = [];
                var GetGoogleSettings_nodeParam;
                var GetGoogleSettings_nodeParamType;

                GetGoogleSettings_nodeParam = node.GetGoogleSettings_select;
                GetGoogleSettings_nodeParamType = node.GetGoogleSettings_selectType;
                if (GetGoogleSettings_nodeParamType === 'str') {
                    GetGoogleSettings_parameters.select = GetGoogleSettings_nodeParam || '';
                } else {
                    GetGoogleSettings_parameters.select = RED.util.getMessageProperty(msg, GetGoogleSettings_nodeParam);
                }
                GetGoogleSettings_parameters.select = !!GetGoogleSettings_parameters.select ? GetGoogleSettings_parameters.select : msg.payload;
                
                GetGoogleSettings_nodeParam = node.GetGoogleSettings_expand;
                GetGoogleSettings_nodeParamType = node.GetGoogleSettings_expandType;
                if (GetGoogleSettings_nodeParamType === 'str') {
                    GetGoogleSettings_parameters.expand = GetGoogleSettings_nodeParam || '';
                } else {
                    GetGoogleSettings_parameters.expand = RED.util.getMessageProperty(msg, GetGoogleSettings_nodeParam);
                }
                GetGoogleSettings_parameters.expand = !!GetGoogleSettings_parameters.expand ? GetGoogleSettings_parameters.expand : msg.payload;
                                result = client.GetGoogleSettings(GetGoogleSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateGoogleSettings') {
                var UpdateGoogleSettings_parameters = [];
                var UpdateGoogleSettings_nodeParam;
                var UpdateGoogleSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateGoogleSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateGoogleSettings(UpdateGoogleSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetGroup') {
                var GetGroup_parameters = [];
                var GetGroup_nodeParam;
                var GetGroup_nodeParamType;

                GetGroup_nodeParam = node.GetGroup_id;
                GetGroup_nodeParamType = node.GetGroup_idType;
                if (GetGroup_nodeParamType === 'str') {
                    GetGroup_parameters.id = GetGroup_nodeParam || '';
                } else {
                    GetGroup_parameters.id = RED.util.getMessageProperty(msg, GetGroup_nodeParam);
                }
                GetGroup_parameters.id = !!GetGroup_parameters.id ? GetGroup_parameters.id : msg.payload;
                
                GetGroup_nodeParam = node.GetGroup_select;
                GetGroup_nodeParamType = node.GetGroup_selectType;
                if (GetGroup_nodeParamType === 'str') {
                    GetGroup_parameters.select = GetGroup_nodeParam || '';
                } else {
                    GetGroup_parameters.select = RED.util.getMessageProperty(msg, GetGroup_nodeParam);
                }
                GetGroup_parameters.select = !!GetGroup_parameters.select ? GetGroup_parameters.select : msg.payload;
                
                GetGroup_nodeParam = node.GetGroup_expand;
                GetGroup_nodeParamType = node.GetGroup_expandType;
                if (GetGroup_nodeParamType === 'str') {
                    GetGroup_parameters.expand = GetGroup_nodeParam || '';
                } else {
                    GetGroup_parameters.expand = RED.util.getMessageProperty(msg, GetGroup_nodeParam);
                }
                GetGroup_parameters.expand = !!GetGroup_parameters.expand ? GetGroup_parameters.expand : msg.payload;
                                result = client.GetGroup(GetGroup_parameters);
            }
            if (!errorFlag && node.method === 'UpdateGroup') {
                var UpdateGroup_parameters = [];
                var UpdateGroup_nodeParam;
                var UpdateGroup_nodeParamType;

                UpdateGroup_nodeParam = node.UpdateGroup_id;
                UpdateGroup_nodeParamType = node.UpdateGroup_idType;
                if (UpdateGroup_nodeParamType === 'str') {
                    UpdateGroup_parameters.id = UpdateGroup_nodeParam || '';
                } else {
                    UpdateGroup_parameters.id = RED.util.getMessageProperty(msg, UpdateGroup_nodeParam);
                }
                UpdateGroup_parameters.id = !!UpdateGroup_parameters.id ? UpdateGroup_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateGroup_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateGroup(UpdateGroup_parameters);
            }
            if (!errorFlag && node.method === 'DeleteGroup') {
                var DeleteGroup_parameters = [];
                var DeleteGroup_nodeParam;
                var DeleteGroup_nodeParamType;

                DeleteGroup_nodeParam = node.DeleteGroup_id;
                DeleteGroup_nodeParamType = node.DeleteGroup_idType;
                if (DeleteGroup_nodeParamType === 'str') {
                    DeleteGroup_parameters.id = DeleteGroup_nodeParam || '';
                } else {
                    DeleteGroup_parameters.id = RED.util.getMessageProperty(msg, DeleteGroup_nodeParam);
                }
                DeleteGroup_parameters.id = !!DeleteGroup_parameters.id ? DeleteGroup_parameters.id : msg.payload;
                
                DeleteGroup_nodeParam = node.DeleteGroup_ifMatch;
                DeleteGroup_nodeParamType = node.DeleteGroup_ifMatchType;
                if (DeleteGroup_nodeParamType === 'str') {
                    DeleteGroup_parameters.ifMatch = DeleteGroup_nodeParam || '';
                } else {
                    DeleteGroup_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteGroup_nodeParam);
                }
                DeleteGroup_parameters.ifMatch = !!DeleteGroup_parameters.ifMatch ? DeleteGroup_parameters.ifMatch : msg.payload;
                                result = client.DeleteGroup(DeleteGroup_parameters);
            }
            if (!errorFlag && node.method === 'ListGroup') {
                var ListGroup_parameters = [];
                var ListGroup_nodeParam;
                var ListGroup_nodeParamType;

                ListGroup_nodeParam = node.ListGroup_top;
                ListGroup_nodeParamType = node.ListGroup_topType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.top = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.top = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.top = !!ListGroup_parameters.top ? ListGroup_parameters.top : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_skip;
                ListGroup_nodeParamType = node.ListGroup_skipType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.skip = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.skip = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.skip = !!ListGroup_parameters.skip ? ListGroup_parameters.skip : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_search;
                ListGroup_nodeParamType = node.ListGroup_searchType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.search = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.search = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.search = !!ListGroup_parameters.search ? ListGroup_parameters.search : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_filter;
                ListGroup_nodeParamType = node.ListGroup_filterType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.filter = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.filter = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.filter = !!ListGroup_parameters.filter ? ListGroup_parameters.filter : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_count;
                ListGroup_nodeParamType = node.ListGroup_countType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.count = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.count = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.count = !!ListGroup_parameters.count ? ListGroup_parameters.count : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_orderby;
                ListGroup_nodeParamType = node.ListGroup_orderbyType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.orderby = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.orderby = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.orderby = !!ListGroup_parameters.orderby ? ListGroup_parameters.orderby : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_select;
                ListGroup_nodeParamType = node.ListGroup_selectType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.select = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.select = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.select = !!ListGroup_parameters.select ? ListGroup_parameters.select : msg.payload;
                
                ListGroup_nodeParam = node.ListGroup_expand;
                ListGroup_nodeParamType = node.ListGroup_expandType;
                if (ListGroup_nodeParamType === 'str') {
                    ListGroup_parameters.expand = ListGroup_nodeParam || '';
                } else {
                    ListGroup_parameters.expand = RED.util.getMessageProperty(msg, ListGroup_nodeParam);
                }
                ListGroup_parameters.expand = !!ListGroup_parameters.expand ? ListGroup_parameters.expand : msg.payload;
                                result = client.ListGroup(ListGroup_parameters);
            }
            if (!errorFlag && node.method === 'CreateGroup') {
                var CreateGroup_parameters = [];
                var CreateGroup_nodeParam;
                var CreateGroup_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateGroup_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateGroup(CreateGroup_parameters);
            }
            if (!errorFlag && node.method === 'GetRestrictions') {
                var GetRestrictions_parameters = [];
                var GetRestrictions_nodeParam;
                var GetRestrictions_nodeParamType;

                GetRestrictions_nodeParam = node.GetRestrictions_id;
                GetRestrictions_nodeParamType = node.GetRestrictions_idType;
                if (GetRestrictions_nodeParamType === 'str') {
                    GetRestrictions_parameters.id = GetRestrictions_nodeParam || '';
                } else {
                    GetRestrictions_parameters.id = RED.util.getMessageProperty(msg, GetRestrictions_nodeParam);
                }
                GetRestrictions_parameters.id = !!GetRestrictions_parameters.id ? GetRestrictions_parameters.id : msg.payload;
                                result = client.GetRestrictions(GetRestrictions_parameters);
            }
            if (!errorFlag && node.method === 'DeleteCompanyByNumber') {
                var DeleteCompanyByNumber_parameters = [];
                var DeleteCompanyByNumber_nodeParam;
                var DeleteCompanyByNumber_nodeParamType;

                if (typeof msg.payload === 'object') {
                    DeleteCompanyByNumber_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.DeleteCompanyByNumber(DeleteCompanyByNumber_parameters);
            }
            if (!errorFlag && node.method === 'DeleteCompanyById') {
                var DeleteCompanyById_parameters = [];
                var DeleteCompanyById_nodeParam;
                var DeleteCompanyById_nodeParamType;

                if (typeof msg.payload === 'object') {
                    DeleteCompanyById_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.DeleteCompanyById(DeleteCompanyById_parameters);
            }
            if (!errorFlag && node.method === 'ListMembers') {
                var ListMembers_parameters = [];
                var ListMembers_nodeParam;
                var ListMembers_nodeParamType;

                ListMembers_nodeParam = node.ListMembers_id;
                ListMembers_nodeParamType = node.ListMembers_idType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.id = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.id = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.id = !!ListMembers_parameters.id ? ListMembers_parameters.id : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_top;
                ListMembers_nodeParamType = node.ListMembers_topType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.top = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.top = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.top = !!ListMembers_parameters.top ? ListMembers_parameters.top : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_skip;
                ListMembers_nodeParamType = node.ListMembers_skipType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.skip = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.skip = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.skip = !!ListMembers_parameters.skip ? ListMembers_parameters.skip : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_search;
                ListMembers_nodeParamType = node.ListMembers_searchType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.search = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.search = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.search = !!ListMembers_parameters.search ? ListMembers_parameters.search : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_filter;
                ListMembers_nodeParamType = node.ListMembers_filterType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.filter = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.filter = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.filter = !!ListMembers_parameters.filter ? ListMembers_parameters.filter : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_count;
                ListMembers_nodeParamType = node.ListMembers_countType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.count = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.count = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.count = !!ListMembers_parameters.count ? ListMembers_parameters.count : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_orderby;
                ListMembers_nodeParamType = node.ListMembers_orderbyType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.orderby = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.orderby = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.orderby = !!ListMembers_parameters.orderby ? ListMembers_parameters.orderby : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_select;
                ListMembers_nodeParamType = node.ListMembers_selectType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.select = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.select = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.select = !!ListMembers_parameters.select ? ListMembers_parameters.select : msg.payload;
                
                ListMembers_nodeParam = node.ListMembers_expand;
                ListMembers_nodeParamType = node.ListMembers_expandType;
                if (ListMembers_nodeParamType === 'str') {
                    ListMembers_parameters.expand = ListMembers_nodeParam || '';
                } else {
                    ListMembers_parameters.expand = RED.util.getMessageProperty(msg, ListMembers_nodeParam);
                }
                ListMembers_parameters.expand = !!ListMembers_parameters.expand ? ListMembers_parameters.expand : msg.payload;
                                result = client.ListMembers(ListMembers_parameters);
            }
            if (!errorFlag && node.method === 'ListRights') {
                var ListRights_parameters = [];
                var ListRights_nodeParam;
                var ListRights_nodeParamType;

                ListRights_nodeParam = node.ListRights_id;
                ListRights_nodeParamType = node.ListRights_idType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.id = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.id = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.id = !!ListRights_parameters.id ? ListRights_parameters.id : msg.payload;
                
                ListRights_nodeParam = node.ListRights_top;
                ListRights_nodeParamType = node.ListRights_topType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.top = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.top = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.top = !!ListRights_parameters.top ? ListRights_parameters.top : msg.payload;
                
                ListRights_nodeParam = node.ListRights_skip;
                ListRights_nodeParamType = node.ListRights_skipType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.skip = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.skip = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.skip = !!ListRights_parameters.skip ? ListRights_parameters.skip : msg.payload;
                
                ListRights_nodeParam = node.ListRights_search;
                ListRights_nodeParamType = node.ListRights_searchType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.search = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.search = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.search = !!ListRights_parameters.search ? ListRights_parameters.search : msg.payload;
                
                ListRights_nodeParam = node.ListRights_filter;
                ListRights_nodeParamType = node.ListRights_filterType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.filter = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.filter = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.filter = !!ListRights_parameters.filter ? ListRights_parameters.filter : msg.payload;
                
                ListRights_nodeParam = node.ListRights_count;
                ListRights_nodeParamType = node.ListRights_countType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.count = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.count = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.count = !!ListRights_parameters.count ? ListRights_parameters.count : msg.payload;
                
                ListRights_nodeParam = node.ListRights_orderby;
                ListRights_nodeParamType = node.ListRights_orderbyType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.orderby = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.orderby = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.orderby = !!ListRights_parameters.orderby ? ListRights_parameters.orderby : msg.payload;
                
                ListRights_nodeParam = node.ListRights_select;
                ListRights_nodeParamType = node.ListRights_selectType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.select = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.select = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.select = !!ListRights_parameters.select ? ListRights_parameters.select : msg.payload;
                
                ListRights_nodeParam = node.ListRights_expand;
                ListRights_nodeParamType = node.ListRights_expandType;
                if (ListRights_nodeParamType === 'str') {
                    ListRights_parameters.expand = ListRights_nodeParam || '';
                } else {
                    ListRights_parameters.expand = RED.util.getMessageProperty(msg, ListRights_nodeParam);
                }
                ListRights_parameters.expand = !!ListRights_parameters.expand ? ListRights_parameters.expand : msg.payload;
                                result = client.ListRights(ListRights_parameters);
            }
            if (!errorFlag && node.method === 'ReplaceGroupLicenseKey') {
                var ReplaceGroupLicenseKey_parameters = [];
                var ReplaceGroupLicenseKey_nodeParam;
                var ReplaceGroupLicenseKey_nodeParamType;

                if (typeof msg.payload === 'object') {
                    ReplaceGroupLicenseKey_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.ReplaceGroupLicenseKey(ReplaceGroupLicenseKey_parameters);
            }
            if (!errorFlag && node.method === 'LinkGroupPartner') {
                var LinkGroupPartner_parameters = [];
                var LinkGroupPartner_nodeParam;
                var LinkGroupPartner_nodeParamType;

                if (typeof msg.payload === 'object') {
                    LinkGroupPartner_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.LinkGroupPartner(LinkGroupPartner_parameters);
            }
            if (!errorFlag && node.method === 'UnlinkGroupPartner') {
                var UnlinkGroupPartner_parameters = [];
                var UnlinkGroupPartner_nodeParam;
                var UnlinkGroupPartner_nodeParamType;
                result = client.UnlinkGroupPartner(UnlinkGroupPartner_parameters);
            }
            if (!errorFlag && node.method === 'GetHotelServices') {
                var GetHotelServices_parameters = [];
                var GetHotelServices_nodeParam;
                var GetHotelServices_nodeParamType;

                GetHotelServices_nodeParam = node.GetHotelServices_select;
                GetHotelServices_nodeParamType = node.GetHotelServices_selectType;
                if (GetHotelServices_nodeParamType === 'str') {
                    GetHotelServices_parameters.select = GetHotelServices_nodeParam || '';
                } else {
                    GetHotelServices_parameters.select = RED.util.getMessageProperty(msg, GetHotelServices_nodeParam);
                }
                GetHotelServices_parameters.select = !!GetHotelServices_parameters.select ? GetHotelServices_parameters.select : msg.payload;
                
                GetHotelServices_nodeParam = node.GetHotelServices_expand;
                GetHotelServices_nodeParamType = node.GetHotelServices_expandType;
                if (GetHotelServices_nodeParamType === 'str') {
                    GetHotelServices_parameters.expand = GetHotelServices_nodeParam || '';
                } else {
                    GetHotelServices_parameters.expand = RED.util.getMessageProperty(msg, GetHotelServices_nodeParam);
                }
                GetHotelServices_parameters.expand = !!GetHotelServices_parameters.expand ? GetHotelServices_parameters.expand : msg.payload;
                                result = client.GetHotelServices(GetHotelServices_parameters);
            }
            if (!errorFlag && node.method === 'UpdateHotelServices') {
                var UpdateHotelServices_parameters = [];
                var UpdateHotelServices_nodeParam;
                var UpdateHotelServices_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateHotelServices_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateHotelServices(UpdateHotelServices_parameters);
            }
            if (!errorFlag && node.method === 'ListInboundRule') {
                var ListInboundRule_parameters = [];
                var ListInboundRule_nodeParam;
                var ListInboundRule_nodeParamType;

                ListInboundRule_nodeParam = node.ListInboundRule_top;
                ListInboundRule_nodeParamType = node.ListInboundRule_topType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.top = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.top = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.top = !!ListInboundRule_parameters.top ? ListInboundRule_parameters.top : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_skip;
                ListInboundRule_nodeParamType = node.ListInboundRule_skipType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.skip = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.skip = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.skip = !!ListInboundRule_parameters.skip ? ListInboundRule_parameters.skip : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_search;
                ListInboundRule_nodeParamType = node.ListInboundRule_searchType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.search = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.search = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.search = !!ListInboundRule_parameters.search ? ListInboundRule_parameters.search : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_filter;
                ListInboundRule_nodeParamType = node.ListInboundRule_filterType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.filter = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.filter = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.filter = !!ListInboundRule_parameters.filter ? ListInboundRule_parameters.filter : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_count;
                ListInboundRule_nodeParamType = node.ListInboundRule_countType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.count = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.count = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.count = !!ListInboundRule_parameters.count ? ListInboundRule_parameters.count : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_orderby;
                ListInboundRule_nodeParamType = node.ListInboundRule_orderbyType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.orderby = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.orderby = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.orderby = !!ListInboundRule_parameters.orderby ? ListInboundRule_parameters.orderby : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_select;
                ListInboundRule_nodeParamType = node.ListInboundRule_selectType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.select = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.select = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.select = !!ListInboundRule_parameters.select ? ListInboundRule_parameters.select : msg.payload;
                
                ListInboundRule_nodeParam = node.ListInboundRule_expand;
                ListInboundRule_nodeParamType = node.ListInboundRule_expandType;
                if (ListInboundRule_nodeParamType === 'str') {
                    ListInboundRule_parameters.expand = ListInboundRule_nodeParam || '';
                } else {
                    ListInboundRule_parameters.expand = RED.util.getMessageProperty(msg, ListInboundRule_nodeParam);
                }
                ListInboundRule_parameters.expand = !!ListInboundRule_parameters.expand ? ListInboundRule_parameters.expand : msg.payload;
                                result = client.ListInboundRule(ListInboundRule_parameters);
            }
            if (!errorFlag && node.method === 'CreateInboundRule') {
                var CreateInboundRule_parameters = [];
                var CreateInboundRule_nodeParam;
                var CreateInboundRule_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateInboundRule_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateInboundRule(CreateInboundRule_parameters);
            }
            if (!errorFlag && node.method === 'GetInboundRule') {
                var GetInboundRule_parameters = [];
                var GetInboundRule_nodeParam;
                var GetInboundRule_nodeParamType;

                GetInboundRule_nodeParam = node.GetInboundRule_id;
                GetInboundRule_nodeParamType = node.GetInboundRule_idType;
                if (GetInboundRule_nodeParamType === 'str') {
                    GetInboundRule_parameters.id = GetInboundRule_nodeParam || '';
                } else {
                    GetInboundRule_parameters.id = RED.util.getMessageProperty(msg, GetInboundRule_nodeParam);
                }
                GetInboundRule_parameters.id = !!GetInboundRule_parameters.id ? GetInboundRule_parameters.id : msg.payload;
                
                GetInboundRule_nodeParam = node.GetInboundRule_select;
                GetInboundRule_nodeParamType = node.GetInboundRule_selectType;
                if (GetInboundRule_nodeParamType === 'str') {
                    GetInboundRule_parameters.select = GetInboundRule_nodeParam || '';
                } else {
                    GetInboundRule_parameters.select = RED.util.getMessageProperty(msg, GetInboundRule_nodeParam);
                }
                GetInboundRule_parameters.select = !!GetInboundRule_parameters.select ? GetInboundRule_parameters.select : msg.payload;
                
                GetInboundRule_nodeParam = node.GetInboundRule_expand;
                GetInboundRule_nodeParamType = node.GetInboundRule_expandType;
                if (GetInboundRule_nodeParamType === 'str') {
                    GetInboundRule_parameters.expand = GetInboundRule_nodeParam || '';
                } else {
                    GetInboundRule_parameters.expand = RED.util.getMessageProperty(msg, GetInboundRule_nodeParam);
                }
                GetInboundRule_parameters.expand = !!GetInboundRule_parameters.expand ? GetInboundRule_parameters.expand : msg.payload;
                                result = client.GetInboundRule(GetInboundRule_parameters);
            }
            if (!errorFlag && node.method === 'UpdateInboundRule') {
                var UpdateInboundRule_parameters = [];
                var UpdateInboundRule_nodeParam;
                var UpdateInboundRule_nodeParamType;

                UpdateInboundRule_nodeParam = node.UpdateInboundRule_id;
                UpdateInboundRule_nodeParamType = node.UpdateInboundRule_idType;
                if (UpdateInboundRule_nodeParamType === 'str') {
                    UpdateInboundRule_parameters.id = UpdateInboundRule_nodeParam || '';
                } else {
                    UpdateInboundRule_parameters.id = RED.util.getMessageProperty(msg, UpdateInboundRule_nodeParam);
                }
                UpdateInboundRule_parameters.id = !!UpdateInboundRule_parameters.id ? UpdateInboundRule_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateInboundRule_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateInboundRule(UpdateInboundRule_parameters);
            }
            if (!errorFlag && node.method === 'DeleteInboundRule') {
                var DeleteInboundRule_parameters = [];
                var DeleteInboundRule_nodeParam;
                var DeleteInboundRule_nodeParamType;

                DeleteInboundRule_nodeParam = node.DeleteInboundRule_id;
                DeleteInboundRule_nodeParamType = node.DeleteInboundRule_idType;
                if (DeleteInboundRule_nodeParamType === 'str') {
                    DeleteInboundRule_parameters.id = DeleteInboundRule_nodeParam || '';
                } else {
                    DeleteInboundRule_parameters.id = RED.util.getMessageProperty(msg, DeleteInboundRule_nodeParam);
                }
                DeleteInboundRule_parameters.id = !!DeleteInboundRule_parameters.id ? DeleteInboundRule_parameters.id : msg.payload;
                
                DeleteInboundRule_nodeParam = node.DeleteInboundRule_ifMatch;
                DeleteInboundRule_nodeParamType = node.DeleteInboundRule_ifMatchType;
                if (DeleteInboundRule_nodeParamType === 'str') {
                    DeleteInboundRule_parameters.ifMatch = DeleteInboundRule_nodeParam || '';
                } else {
                    DeleteInboundRule_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteInboundRule_nodeParam);
                }
                DeleteInboundRule_parameters.ifMatch = !!DeleteInboundRule_parameters.ifMatch ? DeleteInboundRule_parameters.ifMatch : msg.payload;
                                result = client.DeleteInboundRule(DeleteInboundRule_parameters);
            }
            if (!errorFlag && node.method === 'BulkInboundRulesDelete') {
                var BulkInboundRulesDelete_parameters = [];
                var BulkInboundRulesDelete_nodeParam;
                var BulkInboundRulesDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkInboundRulesDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkInboundRulesDelete(BulkInboundRulesDelete_parameters);
            }
            if (!errorFlag && node.method === 'GetLicenseInfo') {
                var GetLicenseInfo_parameters = [];
                var GetLicenseInfo_nodeParam;
                var GetLicenseInfo_nodeParamType;

                GetLicenseInfo_nodeParam = node.GetLicenseInfo_select;
                GetLicenseInfo_nodeParamType = node.GetLicenseInfo_selectType;
                if (GetLicenseInfo_nodeParamType === 'str') {
                    GetLicenseInfo_parameters.select = GetLicenseInfo_nodeParam || '';
                } else {
                    GetLicenseInfo_parameters.select = RED.util.getMessageProperty(msg, GetLicenseInfo_nodeParam);
                }
                GetLicenseInfo_parameters.select = !!GetLicenseInfo_parameters.select ? GetLicenseInfo_parameters.select : msg.payload;
                
                GetLicenseInfo_nodeParam = node.GetLicenseInfo_expand;
                GetLicenseInfo_nodeParamType = node.GetLicenseInfo_expandType;
                if (GetLicenseInfo_nodeParamType === 'str') {
                    GetLicenseInfo_parameters.expand = GetLicenseInfo_nodeParam || '';
                } else {
                    GetLicenseInfo_parameters.expand = RED.util.getMessageProperty(msg, GetLicenseInfo_nodeParam);
                }
                GetLicenseInfo_parameters.expand = !!GetLicenseInfo_parameters.expand ? GetLicenseInfo_parameters.expand : msg.payload;
                                result = client.GetLicenseInfo(GetLicenseInfo_parameters);
            }
            if (!errorFlag && node.method === 'ReplaceLicenseKey') {
                var ReplaceLicenseKey_parameters = [];
                var ReplaceLicenseKey_nodeParam;
                var ReplaceLicenseKey_nodeParamType;

                if (typeof msg.payload === 'object') {
                    ReplaceLicenseKey_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.ReplaceLicenseKey(ReplaceLicenseKey_parameters);
            }
            if (!errorFlag && node.method === 'EditLicenseInfo') {
                var EditLicenseInfo_parameters = [];
                var EditLicenseInfo_nodeParam;
                var EditLicenseInfo_nodeParamType;

                if (typeof msg.payload === 'object') {
                    EditLicenseInfo_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.EditLicenseInfo(EditLicenseInfo_parameters);
            }
            if (!errorFlag && node.method === 'RefreshLicenseStatus') {
                var RefreshLicenseStatus_parameters = [];
                var RefreshLicenseStatus_nodeParam;
                var RefreshLicenseStatus_nodeParamType;
                result = client.RefreshLicenseStatus(RefreshLicenseStatus_parameters);
            }
            if (!errorFlag && node.method === 'GetLicenseStatus') {
                var GetLicenseStatus_parameters = [];
                var GetLicenseStatus_nodeParam;
                var GetLicenseStatus_nodeParamType;

                GetLicenseStatus_nodeParam = node.GetLicenseStatus_select;
                GetLicenseStatus_nodeParamType = node.GetLicenseStatus_selectType;
                if (GetLicenseStatus_nodeParamType === 'str') {
                    GetLicenseStatus_parameters.select = GetLicenseStatus_nodeParam || '';
                } else {
                    GetLicenseStatus_parameters.select = RED.util.getMessageProperty(msg, GetLicenseStatus_nodeParam);
                }
                GetLicenseStatus_parameters.select = !!GetLicenseStatus_parameters.select ? GetLicenseStatus_parameters.select : msg.payload;
                
                GetLicenseStatus_nodeParam = node.GetLicenseStatus_expand;
                GetLicenseStatus_nodeParamType = node.GetLicenseStatus_expandType;
                if (GetLicenseStatus_nodeParamType === 'str') {
                    GetLicenseStatus_parameters.expand = GetLicenseStatus_nodeParam || '';
                } else {
                    GetLicenseStatus_parameters.expand = RED.util.getMessageProperty(msg, GetLicenseStatus_nodeParam);
                }
                GetLicenseStatus_parameters.expand = !!GetLicenseStatus_parameters.expand ? GetLicenseStatus_parameters.expand : msg.payload;
                                result = client.GetLicenseStatus(GetLicenseStatus_parameters);
            }
            if (!errorFlag && node.method === 'UnlinkPartner') {
                var UnlinkPartner_parameters = [];
                var UnlinkPartner_nodeParam;
                var UnlinkPartner_nodeParamType;
                result = client.UnlinkPartner(UnlinkPartner_parameters);
            }
            if (!errorFlag && node.method === 'LinkPartner') {
                var LinkPartner_parameters = [];
                var LinkPartner_nodeParam;
                var LinkPartner_nodeParamType;

                if (typeof msg.payload === 'object') {
                    LinkPartner_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.LinkPartner(LinkPartner_parameters);
            }
            if (!errorFlag && node.method === 'PartnerInfo') {
                var PartnerInfo_parameters = [];
                var PartnerInfo_nodeParam;
                var PartnerInfo_nodeParamType;

                PartnerInfo_nodeParam = node.PartnerInfo_resellerId;
                PartnerInfo_nodeParamType = node.PartnerInfo_resellerIdType;
                if (PartnerInfo_nodeParamType === 'str') {
                    PartnerInfo_parameters.resellerId = PartnerInfo_nodeParam || '';
                } else {
                    PartnerInfo_parameters.resellerId = RED.util.getMessageProperty(msg, PartnerInfo_nodeParam);
                }
                PartnerInfo_parameters.resellerId = !!PartnerInfo_parameters.resellerId ? PartnerInfo_parameters.resellerId : msg.payload;
                                result = client.PartnerInfo(PartnerInfo_parameters);
            }
            if (!errorFlag && node.method === 'GetLoggingSettings') {
                var GetLoggingSettings_parameters = [];
                var GetLoggingSettings_nodeParam;
                var GetLoggingSettings_nodeParamType;

                GetLoggingSettings_nodeParam = node.GetLoggingSettings_select;
                GetLoggingSettings_nodeParamType = node.GetLoggingSettings_selectType;
                if (GetLoggingSettings_nodeParamType === 'str') {
                    GetLoggingSettings_parameters.select = GetLoggingSettings_nodeParam || '';
                } else {
                    GetLoggingSettings_parameters.select = RED.util.getMessageProperty(msg, GetLoggingSettings_nodeParam);
                }
                GetLoggingSettings_parameters.select = !!GetLoggingSettings_parameters.select ? GetLoggingSettings_parameters.select : msg.payload;
                
                GetLoggingSettings_nodeParam = node.GetLoggingSettings_expand;
                GetLoggingSettings_nodeParamType = node.GetLoggingSettings_expandType;
                if (GetLoggingSettings_nodeParamType === 'str') {
                    GetLoggingSettings_parameters.expand = GetLoggingSettings_nodeParam || '';
                } else {
                    GetLoggingSettings_parameters.expand = RED.util.getMessageProperty(msg, GetLoggingSettings_nodeParam);
                }
                GetLoggingSettings_parameters.expand = !!GetLoggingSettings_parameters.expand ? GetLoggingSettings_parameters.expand : msg.payload;
                                result = client.GetLoggingSettings(GetLoggingSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateLoggingSettings') {
                var UpdateLoggingSettings_parameters = [];
                var UpdateLoggingSettings_nodeParam;
                var UpdateLoggingSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateLoggingSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateLoggingSettings(UpdateLoggingSettings_parameters);
            }
            if (!errorFlag && node.method === 'TestSubscription') {
                var TestSubscription_parameters = [];
                var TestSubscription_nodeParam;
                var TestSubscription_nodeParamType;
                result = client.TestSubscription(TestSubscription_parameters);
            }
            if (!errorFlag && node.method === 'GetMicrosoft365Integration') {
                var GetMicrosoft365Integration_parameters = [];
                var GetMicrosoft365Integration_nodeParam;
                var GetMicrosoft365Integration_nodeParamType;

                GetMicrosoft365Integration_nodeParam = node.GetMicrosoft365Integration_select;
                GetMicrosoft365Integration_nodeParamType = node.GetMicrosoft365Integration_selectType;
                if (GetMicrosoft365Integration_nodeParamType === 'str') {
                    GetMicrosoft365Integration_parameters.select = GetMicrosoft365Integration_nodeParam || '';
                } else {
                    GetMicrosoft365Integration_parameters.select = RED.util.getMessageProperty(msg, GetMicrosoft365Integration_nodeParam);
                }
                GetMicrosoft365Integration_parameters.select = !!GetMicrosoft365Integration_parameters.select ? GetMicrosoft365Integration_parameters.select : msg.payload;
                
                GetMicrosoft365Integration_nodeParam = node.GetMicrosoft365Integration_expand;
                GetMicrosoft365Integration_nodeParamType = node.GetMicrosoft365Integration_expandType;
                if (GetMicrosoft365Integration_nodeParamType === 'str') {
                    GetMicrosoft365Integration_parameters.expand = GetMicrosoft365Integration_nodeParam || '';
                } else {
                    GetMicrosoft365Integration_parameters.expand = RED.util.getMessageProperty(msg, GetMicrosoft365Integration_nodeParam);
                }
                GetMicrosoft365Integration_parameters.expand = !!GetMicrosoft365Integration_parameters.expand ? GetMicrosoft365Integration_parameters.expand : msg.payload;
                                result = client.GetMicrosoft365Integration(GetMicrosoft365Integration_parameters);
            }
            if (!errorFlag && node.method === 'UpdateMicrosoft365Integration') {
                var UpdateMicrosoft365Integration_parameters = [];
                var UpdateMicrosoft365Integration_nodeParam;
                var UpdateMicrosoft365Integration_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateMicrosoft365Integration_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateMicrosoft365Integration(UpdateMicrosoft365Integration_parameters);
            }
            if (!errorFlag && node.method === 'AuthorizePresence') {
                var AuthorizePresence_parameters = [];
                var AuthorizePresence_nodeParam;
                var AuthorizePresence_nodeParamType;

                if (typeof msg.payload === 'object') {
                    AuthorizePresence_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.AuthorizePresence(AuthorizePresence_parameters);
            }
            if (!errorFlag && node.method === 'TestPresence') {
                var TestPresence_parameters = [];
                var TestPresence_nodeParam;
                var TestPresence_nodeParamType;
                result = client.TestPresence(TestPresence_parameters);
            }
            if (!errorFlag && node.method === 'DeauthorizePresence') {
                var DeauthorizePresence_parameters = [];
                var DeauthorizePresence_nodeParam;
                var DeauthorizePresence_nodeParamType;
                result = client.DeauthorizePresence(DeauthorizePresence_parameters);
            }
            if (!errorFlag && node.method === 'GetMicrosoftAccessToken') {
                var GetMicrosoftAccessToken_parameters = [];
                var GetMicrosoftAccessToken_nodeParam;
                var GetMicrosoftAccessToken_nodeParamType;
                result = client.GetMicrosoftAccessToken(GetMicrosoftAccessToken_parameters);
            }
            if (!errorFlag && node.method === 'GetMicrosoft365Directory') {
                var GetMicrosoft365Directory_parameters = [];
                var GetMicrosoft365Directory_nodeParam;
                var GetMicrosoft365Directory_nodeParamType;
                result = client.GetMicrosoft365Directory(GetMicrosoft365Directory_parameters);
            }
            if (!errorFlag && node.method === 'GetUsers') {
                var GetUsers_parameters = [];
                var GetUsers_nodeParam;
                var GetUsers_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GetUsers_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GetUsers(GetUsers_parameters);
            }
            if (!errorFlag && node.method === 'GetUsersByPrincipalNames') {
                var GetUsersByPrincipalNames_parameters = [];
                var GetUsersByPrincipalNames_nodeParam;
                var GetUsersByPrincipalNames_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GetUsersByPrincipalNames_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GetUsersByPrincipalNames(GetUsersByPrincipalNames_parameters);
            }
            if (!errorFlag && node.method === 'GetMicrosoft365TeamsIntegration') {
                var GetMicrosoft365TeamsIntegration_parameters = [];
                var GetMicrosoft365TeamsIntegration_nodeParam;
                var GetMicrosoft365TeamsIntegration_nodeParamType;

                GetMicrosoft365TeamsIntegration_nodeParam = node.GetMicrosoft365TeamsIntegration_select;
                GetMicrosoft365TeamsIntegration_nodeParamType = node.GetMicrosoft365TeamsIntegration_selectType;
                if (GetMicrosoft365TeamsIntegration_nodeParamType === 'str') {
                    GetMicrosoft365TeamsIntegration_parameters.select = GetMicrosoft365TeamsIntegration_nodeParam || '';
                } else {
                    GetMicrosoft365TeamsIntegration_parameters.select = RED.util.getMessageProperty(msg, GetMicrosoft365TeamsIntegration_nodeParam);
                }
                GetMicrosoft365TeamsIntegration_parameters.select = !!GetMicrosoft365TeamsIntegration_parameters.select ? GetMicrosoft365TeamsIntegration_parameters.select : msg.payload;
                
                GetMicrosoft365TeamsIntegration_nodeParam = node.GetMicrosoft365TeamsIntegration_expand;
                GetMicrosoft365TeamsIntegration_nodeParamType = node.GetMicrosoft365TeamsIntegration_expandType;
                if (GetMicrosoft365TeamsIntegration_nodeParamType === 'str') {
                    GetMicrosoft365TeamsIntegration_parameters.expand = GetMicrosoft365TeamsIntegration_nodeParam || '';
                } else {
                    GetMicrosoft365TeamsIntegration_parameters.expand = RED.util.getMessageProperty(msg, GetMicrosoft365TeamsIntegration_nodeParam);
                }
                GetMicrosoft365TeamsIntegration_parameters.expand = !!GetMicrosoft365TeamsIntegration_parameters.expand ? GetMicrosoft365TeamsIntegration_parameters.expand : msg.payload;
                                result = client.GetMicrosoft365TeamsIntegration(GetMicrosoft365TeamsIntegration_parameters);
            }
            if (!errorFlag && node.method === 'UpdateMicrosoft365TeamsIntegration') {
                var UpdateMicrosoft365TeamsIntegration_parameters = [];
                var UpdateMicrosoft365TeamsIntegration_nodeParam;
                var UpdateMicrosoft365TeamsIntegration_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateMicrosoft365TeamsIntegration_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateMicrosoft365TeamsIntegration(UpdateMicrosoft365TeamsIntegration_parameters);
            }
            if (!errorFlag && node.method === 'CheckFqdnRecord') {
                var CheckFqdnRecord_parameters = [];
                var CheckFqdnRecord_nodeParam;
                var CheckFqdnRecord_nodeParamType;

                CheckFqdnRecord_nodeParam = node.CheckFqdnRecord_fqdn;
                CheckFqdnRecord_nodeParamType = node.CheckFqdnRecord_fqdnType;
                if (CheckFqdnRecord_nodeParamType === 'str') {
                    CheckFqdnRecord_parameters.fqdn = CheckFqdnRecord_nodeParam || '';
                } else {
                    CheckFqdnRecord_parameters.fqdn = RED.util.getMessageProperty(msg, CheckFqdnRecord_nodeParam);
                }
                CheckFqdnRecord_parameters.fqdn = !!CheckFqdnRecord_parameters.fqdn ? CheckFqdnRecord_parameters.fqdn : msg.payload;
                                result = client.CheckFqdnRecord(CheckFqdnRecord_parameters);
            }
            if (!errorFlag && node.method === 'GetDialPlanScript') {
                var GetDialPlanScript_parameters = [];
                var GetDialPlanScript_nodeParam;
                var GetDialPlanScript_nodeParamType;
                result = client.GetDialPlanScript(GetDialPlanScript_parameters);
            }
            if (!errorFlag && node.method === 'GetMapUsersScript') {
                var GetMapUsersScript_parameters = [];
                var GetMapUsersScript_nodeParam;
                var GetMapUsersScript_nodeParamType;
                result = client.GetMapUsersScript(GetMapUsersScript_parameters);
            }
            if (!errorFlag && node.method === 'CheckMapUsersScript') {
                var CheckMapUsersScript_parameters = [];
                var CheckMapUsersScript_nodeParam;
                var CheckMapUsersScript_nodeParamType;
                result = client.CheckMapUsersScript(CheckMapUsersScript_parameters);
            }
            if (!errorFlag && node.method === 'GetMusicOnHoldSettings') {
                var GetMusicOnHoldSettings_parameters = [];
                var GetMusicOnHoldSettings_nodeParam;
                var GetMusicOnHoldSettings_nodeParamType;

                GetMusicOnHoldSettings_nodeParam = node.GetMusicOnHoldSettings_select;
                GetMusicOnHoldSettings_nodeParamType = node.GetMusicOnHoldSettings_selectType;
                if (GetMusicOnHoldSettings_nodeParamType === 'str') {
                    GetMusicOnHoldSettings_parameters.select = GetMusicOnHoldSettings_nodeParam || '';
                } else {
                    GetMusicOnHoldSettings_parameters.select = RED.util.getMessageProperty(msg, GetMusicOnHoldSettings_nodeParam);
                }
                GetMusicOnHoldSettings_parameters.select = !!GetMusicOnHoldSettings_parameters.select ? GetMusicOnHoldSettings_parameters.select : msg.payload;
                
                GetMusicOnHoldSettings_nodeParam = node.GetMusicOnHoldSettings_expand;
                GetMusicOnHoldSettings_nodeParamType = node.GetMusicOnHoldSettings_expandType;
                if (GetMusicOnHoldSettings_nodeParamType === 'str') {
                    GetMusicOnHoldSettings_parameters.expand = GetMusicOnHoldSettings_nodeParam || '';
                } else {
                    GetMusicOnHoldSettings_parameters.expand = RED.util.getMessageProperty(msg, GetMusicOnHoldSettings_nodeParam);
                }
                GetMusicOnHoldSettings_parameters.expand = !!GetMusicOnHoldSettings_parameters.expand ? GetMusicOnHoldSettings_parameters.expand : msg.payload;
                                result = client.GetMusicOnHoldSettings(GetMusicOnHoldSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateMusicOnHoldSettings') {
                var UpdateMusicOnHoldSettings_parameters = [];
                var UpdateMusicOnHoldSettings_nodeParam;
                var UpdateMusicOnHoldSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateMusicOnHoldSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateMusicOnHoldSettings(UpdateMusicOnHoldSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetMyGroup') {
                var GetMyGroup_parameters = [];
                var GetMyGroup_nodeParam;
                var GetMyGroup_nodeParamType;

                GetMyGroup_nodeParam = node.GetMyGroup_select;
                GetMyGroup_nodeParamType = node.GetMyGroup_selectType;
                if (GetMyGroup_nodeParamType === 'str') {
                    GetMyGroup_parameters.select = GetMyGroup_nodeParam || '';
                } else {
                    GetMyGroup_parameters.select = RED.util.getMessageProperty(msg, GetMyGroup_nodeParam);
                }
                GetMyGroup_parameters.select = !!GetMyGroup_parameters.select ? GetMyGroup_parameters.select : msg.payload;
                
                GetMyGroup_nodeParam = node.GetMyGroup_expand;
                GetMyGroup_nodeParamType = node.GetMyGroup_expandType;
                if (GetMyGroup_nodeParamType === 'str') {
                    GetMyGroup_parameters.expand = GetMyGroup_nodeParam || '';
                } else {
                    GetMyGroup_parameters.expand = RED.util.getMessageProperty(msg, GetMyGroup_nodeParam);
                }
                GetMyGroup_parameters.expand = !!GetMyGroup_parameters.expand ? GetMyGroup_parameters.expand : msg.payload;
                                result = client.GetMyGroup(GetMyGroup_parameters);
            }
            if (!errorFlag && node.method === 'UpdateMyGroup') {
                var UpdateMyGroup_parameters = [];
                var UpdateMyGroup_nodeParam;
                var UpdateMyGroup_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateMyGroup_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateMyGroup(UpdateMyGroup_parameters);
            }
            if (!errorFlag && node.method === 'ListMyGroupMembers') {
                var ListMyGroupMembers_parameters = [];
                var ListMyGroupMembers_nodeParam;
                var ListMyGroupMembers_nodeParamType;

                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_top;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_topType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.top = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.top = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.top = !!ListMyGroupMembers_parameters.top ? ListMyGroupMembers_parameters.top : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_skip;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_skipType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.skip = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.skip = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.skip = !!ListMyGroupMembers_parameters.skip ? ListMyGroupMembers_parameters.skip : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_search;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_searchType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.search = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.search = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.search = !!ListMyGroupMembers_parameters.search ? ListMyGroupMembers_parameters.search : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_filter;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_filterType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.filter = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.filter = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.filter = !!ListMyGroupMembers_parameters.filter ? ListMyGroupMembers_parameters.filter : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_count;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_countType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.count = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.count = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.count = !!ListMyGroupMembers_parameters.count ? ListMyGroupMembers_parameters.count : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_orderby;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_orderbyType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.orderby = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.orderby = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.orderby = !!ListMyGroupMembers_parameters.orderby ? ListMyGroupMembers_parameters.orderby : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_select;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_selectType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.select = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.select = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.select = !!ListMyGroupMembers_parameters.select ? ListMyGroupMembers_parameters.select : msg.payload;
                
                ListMyGroupMembers_nodeParam = node.ListMyGroupMembers_expand;
                ListMyGroupMembers_nodeParamType = node.ListMyGroupMembers_expandType;
                if (ListMyGroupMembers_nodeParamType === 'str') {
                    ListMyGroupMembers_parameters.expand = ListMyGroupMembers_nodeParam || '';
                } else {
                    ListMyGroupMembers_parameters.expand = RED.util.getMessageProperty(msg, ListMyGroupMembers_nodeParam);
                }
                ListMyGroupMembers_parameters.expand = !!ListMyGroupMembers_parameters.expand ? ListMyGroupMembers_parameters.expand : msg.payload;
                                result = client.ListMyGroupMembers(ListMyGroupMembers_parameters);
            }
            if (!errorFlag && node.method === 'ListMyGroupRights') {
                var ListMyGroupRights_parameters = [];
                var ListMyGroupRights_nodeParam;
                var ListMyGroupRights_nodeParamType;

                ListMyGroupRights_nodeParam = node.ListMyGroupRights_top;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_topType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.top = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.top = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.top = !!ListMyGroupRights_parameters.top ? ListMyGroupRights_parameters.top : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_skip;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_skipType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.skip = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.skip = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.skip = !!ListMyGroupRights_parameters.skip ? ListMyGroupRights_parameters.skip : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_search;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_searchType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.search = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.search = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.search = !!ListMyGroupRights_parameters.search ? ListMyGroupRights_parameters.search : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_filter;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_filterType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.filter = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.filter = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.filter = !!ListMyGroupRights_parameters.filter ? ListMyGroupRights_parameters.filter : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_count;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_countType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.count = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.count = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.count = !!ListMyGroupRights_parameters.count ? ListMyGroupRights_parameters.count : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_orderby;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_orderbyType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.orderby = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.orderby = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.orderby = !!ListMyGroupRights_parameters.orderby ? ListMyGroupRights_parameters.orderby : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_select;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_selectType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.select = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.select = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.select = !!ListMyGroupRights_parameters.select ? ListMyGroupRights_parameters.select : msg.payload;
                
                ListMyGroupRights_nodeParam = node.ListMyGroupRights_expand;
                ListMyGroupRights_nodeParamType = node.ListMyGroupRights_expandType;
                if (ListMyGroupRights_nodeParamType === 'str') {
                    ListMyGroupRights_parameters.expand = ListMyGroupRights_nodeParam || '';
                } else {
                    ListMyGroupRights_parameters.expand = RED.util.getMessageProperty(msg, ListMyGroupRights_nodeParam);
                }
                ListMyGroupRights_parameters.expand = !!ListMyGroupRights_parameters.expand ? ListMyGroupRights_parameters.expand : msg.payload;
                                result = client.ListMyGroupRights(ListMyGroupRights_parameters);
            }
            if (!errorFlag && node.method === 'GetMyGroupRestrictions') {
                var GetMyGroupRestrictions_parameters = [];
                var GetMyGroupRestrictions_nodeParam;
                var GetMyGroupRestrictions_nodeParamType;
                result = client.GetMyGroupRestrictions(GetMyGroupRestrictions_parameters);
            }
            if (!errorFlag && node.method === 'ReplaceMyGroupLicenseKey') {
                var ReplaceMyGroupLicenseKey_parameters = [];
                var ReplaceMyGroupLicenseKey_nodeParam;
                var ReplaceMyGroupLicenseKey_nodeParamType;

                if (typeof msg.payload === 'object') {
                    ReplaceMyGroupLicenseKey_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.ReplaceMyGroupLicenseKey(ReplaceMyGroupLicenseKey_parameters);
            }
            if (!errorFlag && node.method === 'GetMyGroupPartnerInfo') {
                var GetMyGroupPartnerInfo_parameters = [];
                var GetMyGroupPartnerInfo_nodeParam;
                var GetMyGroupPartnerInfo_nodeParamType;

                GetMyGroupPartnerInfo_nodeParam = node.GetMyGroupPartnerInfo_resellerId;
                GetMyGroupPartnerInfo_nodeParamType = node.GetMyGroupPartnerInfo_resellerIdType;
                if (GetMyGroupPartnerInfo_nodeParamType === 'str') {
                    GetMyGroupPartnerInfo_parameters.resellerId = GetMyGroupPartnerInfo_nodeParam || '';
                } else {
                    GetMyGroupPartnerInfo_parameters.resellerId = RED.util.getMessageProperty(msg, GetMyGroupPartnerInfo_nodeParam);
                }
                GetMyGroupPartnerInfo_parameters.resellerId = !!GetMyGroupPartnerInfo_parameters.resellerId ? GetMyGroupPartnerInfo_parameters.resellerId : msg.payload;
                                result = client.GetMyGroupPartnerInfo(GetMyGroupPartnerInfo_parameters);
            }
            if (!errorFlag && node.method === 'UnlinkMyGroupPartner') {
                var UnlinkMyGroupPartner_parameters = [];
                var UnlinkMyGroupPartner_nodeParam;
                var UnlinkMyGroupPartner_nodeParamType;
                result = client.UnlinkMyGroupPartner(UnlinkMyGroupPartner_parameters);
            }
            if (!errorFlag && node.method === 'LinkMyGroupPartner') {
                var LinkMyGroupPartner_parameters = [];
                var LinkMyGroupPartner_nodeParam;
                var LinkMyGroupPartner_nodeParamType;

                if (typeof msg.payload === 'object') {
                    LinkMyGroupPartner_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.LinkMyGroupPartner(LinkMyGroupPartner_parameters);
            }
            if (!errorFlag && node.method === 'ListRefreshToken') {
                var ListRefreshToken_parameters = [];
                var ListRefreshToken_nodeParam;
                var ListRefreshToken_nodeParamType;

                ListRefreshToken_nodeParam = node.ListRefreshToken_top;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_topType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.top = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.top = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.top = !!ListRefreshToken_parameters.top ? ListRefreshToken_parameters.top : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_skip;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_skipType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.skip = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.skip = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.skip = !!ListRefreshToken_parameters.skip ? ListRefreshToken_parameters.skip : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_search;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_searchType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.search = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.search = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.search = !!ListRefreshToken_parameters.search ? ListRefreshToken_parameters.search : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_filter;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_filterType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.filter = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.filter = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.filter = !!ListRefreshToken_parameters.filter ? ListRefreshToken_parameters.filter : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_count;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_countType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.count = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.count = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.count = !!ListRefreshToken_parameters.count ? ListRefreshToken_parameters.count : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_orderby;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_orderbyType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.orderby = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.orderby = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.orderby = !!ListRefreshToken_parameters.orderby ? ListRefreshToken_parameters.orderby : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_select;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_selectType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.select = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.select = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.select = !!ListRefreshToken_parameters.select ? ListRefreshToken_parameters.select : msg.payload;
                
                ListRefreshToken_nodeParam = node.ListRefreshToken_expand;
                ListRefreshToken_nodeParamType = node.ListRefreshToken_expandType;
                if (ListRefreshToken_nodeParamType === 'str') {
                    ListRefreshToken_parameters.expand = ListRefreshToken_nodeParam || '';
                } else {
                    ListRefreshToken_parameters.expand = RED.util.getMessageProperty(msg, ListRefreshToken_nodeParam);
                }
                ListRefreshToken_parameters.expand = !!ListRefreshToken_parameters.expand ? ListRefreshToken_parameters.expand : msg.payload;
                                result = client.ListRefreshToken(ListRefreshToken_parameters);
            }
            if (!errorFlag && node.method === 'RevokeToken') {
                var RevokeToken_parameters = [];
                var RevokeToken_nodeParam;
                var RevokeToken_nodeParamType;

                RevokeToken_nodeParam = node.RevokeToken_id;
                RevokeToken_nodeParamType = node.RevokeToken_idType;
                if (RevokeToken_nodeParamType === 'str') {
                    RevokeToken_parameters.id = RevokeToken_nodeParam || '';
                } else {
                    RevokeToken_parameters.id = RED.util.getMessageProperty(msg, RevokeToken_nodeParam);
                }
                RevokeToken_parameters.id = !!RevokeToken_parameters.id ? RevokeToken_parameters.id : msg.payload;
                                result = client.RevokeToken(RevokeToken_parameters);
            }
            if (!errorFlag && node.method === 'GetMyUser') {
                var GetMyUser_parameters = [];
                var GetMyUser_nodeParam;
                var GetMyUser_nodeParamType;

                GetMyUser_nodeParam = node.GetMyUser_select;
                GetMyUser_nodeParamType = node.GetMyUser_selectType;
                if (GetMyUser_nodeParamType === 'str') {
                    GetMyUser_parameters.select = GetMyUser_nodeParam || '';
                } else {
                    GetMyUser_parameters.select = RED.util.getMessageProperty(msg, GetMyUser_nodeParam);
                }
                GetMyUser_parameters.select = !!GetMyUser_parameters.select ? GetMyUser_parameters.select : msg.payload;
                
                GetMyUser_nodeParam = node.GetMyUser_expand;
                GetMyUser_nodeParamType = node.GetMyUser_expandType;
                if (GetMyUser_nodeParamType === 'str') {
                    GetMyUser_parameters.expand = GetMyUser_nodeParam || '';
                } else {
                    GetMyUser_parameters.expand = RED.util.getMessageProperty(msg, GetMyUser_nodeParam);
                }
                GetMyUser_parameters.expand = !!GetMyUser_parameters.expand ? GetMyUser_parameters.expand : msg.payload;
                                result = client.GetMyUser(GetMyUser_parameters);
            }
            if (!errorFlag && node.method === 'UpdateMyUser') {
                var UpdateMyUser_parameters = [];
                var UpdateMyUser_nodeParam;
                var UpdateMyUser_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateMyUser_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateMyUser(UpdateMyUser_parameters);
            }
            if (!errorFlag && node.method === 'ListMyUserGroups') {
                var ListMyUserGroups_parameters = [];
                var ListMyUserGroups_nodeParam;
                var ListMyUserGroups_nodeParamType;

                ListMyUserGroups_nodeParam = node.ListMyUserGroups_top;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_topType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.top = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.top = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.top = !!ListMyUserGroups_parameters.top ? ListMyUserGroups_parameters.top : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_skip;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_skipType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.skip = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.skip = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.skip = !!ListMyUserGroups_parameters.skip ? ListMyUserGroups_parameters.skip : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_search;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_searchType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.search = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.search = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.search = !!ListMyUserGroups_parameters.search ? ListMyUserGroups_parameters.search : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_filter;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_filterType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.filter = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.filter = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.filter = !!ListMyUserGroups_parameters.filter ? ListMyUserGroups_parameters.filter : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_count;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_countType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.count = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.count = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.count = !!ListMyUserGroups_parameters.count ? ListMyUserGroups_parameters.count : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_orderby;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_orderbyType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.orderby = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.orderby = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.orderby = !!ListMyUserGroups_parameters.orderby ? ListMyUserGroups_parameters.orderby : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_select;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_selectType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.select = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.select = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.select = !!ListMyUserGroups_parameters.select ? ListMyUserGroups_parameters.select : msg.payload;
                
                ListMyUserGroups_nodeParam = node.ListMyUserGroups_expand;
                ListMyUserGroups_nodeParamType = node.ListMyUserGroups_expandType;
                if (ListMyUserGroups_nodeParamType === 'str') {
                    ListMyUserGroups_parameters.expand = ListMyUserGroups_nodeParam || '';
                } else {
                    ListMyUserGroups_parameters.expand = RED.util.getMessageProperty(msg, ListMyUserGroups_nodeParam);
                }
                ListMyUserGroups_parameters.expand = !!ListMyUserGroups_parameters.expand ? ListMyUserGroups_parameters.expand : msg.payload;
                                result = client.ListMyUserGroups(ListMyUserGroups_parameters);
            }
            if (!errorFlag && node.method === 'ListMyUserForwardingProfiles') {
                var ListMyUserForwardingProfiles_parameters = [];
                var ListMyUserForwardingProfiles_nodeParam;
                var ListMyUserForwardingProfiles_nodeParamType;

                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_top;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_topType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.top = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.top = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.top = !!ListMyUserForwardingProfiles_parameters.top ? ListMyUserForwardingProfiles_parameters.top : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_skip;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_skipType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.skip = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.skip = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.skip = !!ListMyUserForwardingProfiles_parameters.skip ? ListMyUserForwardingProfiles_parameters.skip : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_search;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_searchType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.search = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.search = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.search = !!ListMyUserForwardingProfiles_parameters.search ? ListMyUserForwardingProfiles_parameters.search : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_filter;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_filterType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.filter = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.filter = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.filter = !!ListMyUserForwardingProfiles_parameters.filter ? ListMyUserForwardingProfiles_parameters.filter : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_count;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_countType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.count = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.count = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.count = !!ListMyUserForwardingProfiles_parameters.count ? ListMyUserForwardingProfiles_parameters.count : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_orderby;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_orderbyType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.orderby = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.orderby = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.orderby = !!ListMyUserForwardingProfiles_parameters.orderby ? ListMyUserForwardingProfiles_parameters.orderby : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_select;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_selectType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.select = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.select = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.select = !!ListMyUserForwardingProfiles_parameters.select ? ListMyUserForwardingProfiles_parameters.select : msg.payload;
                
                ListMyUserForwardingProfiles_nodeParam = node.ListMyUserForwardingProfiles_expand;
                ListMyUserForwardingProfiles_nodeParamType = node.ListMyUserForwardingProfiles_expandType;
                if (ListMyUserForwardingProfiles_nodeParamType === 'str') {
                    ListMyUserForwardingProfiles_parameters.expand = ListMyUserForwardingProfiles_nodeParam || '';
                } else {
                    ListMyUserForwardingProfiles_parameters.expand = RED.util.getMessageProperty(msg, ListMyUserForwardingProfiles_nodeParam);
                }
                ListMyUserForwardingProfiles_parameters.expand = !!ListMyUserForwardingProfiles_parameters.expand ? ListMyUserForwardingProfiles_parameters.expand : msg.payload;
                                result = client.ListMyUserForwardingProfiles(ListMyUserForwardingProfiles_parameters);
            }
            if (!errorFlag && node.method === 'ListMyUserGreetings') {
                var ListMyUserGreetings_parameters = [];
                var ListMyUserGreetings_nodeParam;
                var ListMyUserGreetings_nodeParamType;

                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_top;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_topType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.top = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.top = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.top = !!ListMyUserGreetings_parameters.top ? ListMyUserGreetings_parameters.top : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_skip;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_skipType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.skip = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.skip = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.skip = !!ListMyUserGreetings_parameters.skip ? ListMyUserGreetings_parameters.skip : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_search;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_searchType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.search = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.search = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.search = !!ListMyUserGreetings_parameters.search ? ListMyUserGreetings_parameters.search : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_filter;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_filterType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.filter = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.filter = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.filter = !!ListMyUserGreetings_parameters.filter ? ListMyUserGreetings_parameters.filter : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_count;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_countType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.count = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.count = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.count = !!ListMyUserGreetings_parameters.count ? ListMyUserGreetings_parameters.count : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_orderby;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_orderbyType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.orderby = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.orderby = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.orderby = !!ListMyUserGreetings_parameters.orderby ? ListMyUserGreetings_parameters.orderby : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_select;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_selectType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.select = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.select = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.select = !!ListMyUserGreetings_parameters.select ? ListMyUserGreetings_parameters.select : msg.payload;
                
                ListMyUserGreetings_nodeParam = node.ListMyUserGreetings_expand;
                ListMyUserGreetings_nodeParamType = node.ListMyUserGreetings_expandType;
                if (ListMyUserGreetings_nodeParamType === 'str') {
                    ListMyUserGreetings_parameters.expand = ListMyUserGreetings_nodeParam || '';
                } else {
                    ListMyUserGreetings_parameters.expand = RED.util.getMessageProperty(msg, ListMyUserGreetings_nodeParam);
                }
                ListMyUserGreetings_parameters.expand = !!ListMyUserGreetings_parameters.expand ? ListMyUserGreetings_parameters.expand : msg.payload;
                                result = client.ListMyUserGreetings(ListMyUserGreetings_parameters);
            }
            if (!errorFlag && node.method === 'MyUserGenerateProvLink') {
                var MyUserGenerateProvLink_parameters = [];
                var MyUserGenerateProvLink_nodeParam;
                var MyUserGenerateProvLink_nodeParamType;
                result = client.MyUserGenerateProvLink(MyUserGenerateProvLink_parameters);
            }
            if (!errorFlag && node.method === 'ListNetworkInterface') {
                var ListNetworkInterface_parameters = [];
                var ListNetworkInterface_nodeParam;
                var ListNetworkInterface_nodeParamType;

                ListNetworkInterface_nodeParam = node.ListNetworkInterface_top;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_topType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.top = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.top = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.top = !!ListNetworkInterface_parameters.top ? ListNetworkInterface_parameters.top : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_skip;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_skipType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.skip = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.skip = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.skip = !!ListNetworkInterface_parameters.skip ? ListNetworkInterface_parameters.skip : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_search;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_searchType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.search = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.search = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.search = !!ListNetworkInterface_parameters.search ? ListNetworkInterface_parameters.search : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_filter;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_filterType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.filter = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.filter = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.filter = !!ListNetworkInterface_parameters.filter ? ListNetworkInterface_parameters.filter : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_count;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_countType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.count = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.count = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.count = !!ListNetworkInterface_parameters.count ? ListNetworkInterface_parameters.count : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_orderby;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_orderbyType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.orderby = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.orderby = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.orderby = !!ListNetworkInterface_parameters.orderby ? ListNetworkInterface_parameters.orderby : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_select;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_selectType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.select = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.select = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.select = !!ListNetworkInterface_parameters.select ? ListNetworkInterface_parameters.select : msg.payload;
                
                ListNetworkInterface_nodeParam = node.ListNetworkInterface_expand;
                ListNetworkInterface_nodeParamType = node.ListNetworkInterface_expandType;
                if (ListNetworkInterface_nodeParamType === 'str') {
                    ListNetworkInterface_parameters.expand = ListNetworkInterface_nodeParam || '';
                } else {
                    ListNetworkInterface_parameters.expand = RED.util.getMessageProperty(msg, ListNetworkInterface_nodeParam);
                }
                ListNetworkInterface_parameters.expand = !!ListNetworkInterface_parameters.expand ? ListNetworkInterface_parameters.expand : msg.payload;
                                result = client.ListNetworkInterface(ListNetworkInterface_parameters);
            }
            if (!errorFlag && node.method === 'GetNetworkSettings') {
                var GetNetworkSettings_parameters = [];
                var GetNetworkSettings_nodeParam;
                var GetNetworkSettings_nodeParamType;

                GetNetworkSettings_nodeParam = node.GetNetworkSettings_select;
                GetNetworkSettings_nodeParamType = node.GetNetworkSettings_selectType;
                if (GetNetworkSettings_nodeParamType === 'str') {
                    GetNetworkSettings_parameters.select = GetNetworkSettings_nodeParam || '';
                } else {
                    GetNetworkSettings_parameters.select = RED.util.getMessageProperty(msg, GetNetworkSettings_nodeParam);
                }
                GetNetworkSettings_parameters.select = !!GetNetworkSettings_parameters.select ? GetNetworkSettings_parameters.select : msg.payload;
                
                GetNetworkSettings_nodeParam = node.GetNetworkSettings_expand;
                GetNetworkSettings_nodeParamType = node.GetNetworkSettings_expandType;
                if (GetNetworkSettings_nodeParamType === 'str') {
                    GetNetworkSettings_parameters.expand = GetNetworkSettings_nodeParam || '';
                } else {
                    GetNetworkSettings_parameters.expand = RED.util.getMessageProperty(msg, GetNetworkSettings_nodeParam);
                }
                GetNetworkSettings_parameters.expand = !!GetNetworkSettings_parameters.expand ? GetNetworkSettings_parameters.expand : msg.payload;
                                result = client.GetNetworkSettings(GetNetworkSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateNetworkSettings') {
                var UpdateNetworkSettings_parameters = [];
                var UpdateNetworkSettings_nodeParam;
                var UpdateNetworkSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateNetworkSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateNetworkSettings(UpdateNetworkSettings_parameters);
            }
            if (!errorFlag && node.method === 'GetIfaces') {
                var GetIfaces_parameters = [];
                var GetIfaces_nodeParam;
                var GetIfaces_nodeParamType;

                GetIfaces_nodeParam = node.GetIfaces_top;
                GetIfaces_nodeParamType = node.GetIfaces_topType;
                if (GetIfaces_nodeParamType === 'str') {
                    GetIfaces_parameters.top = GetIfaces_nodeParam || '';
                } else {
                    GetIfaces_parameters.top = RED.util.getMessageProperty(msg, GetIfaces_nodeParam);
                }
                GetIfaces_parameters.top = !!GetIfaces_parameters.top ? GetIfaces_parameters.top : msg.payload;
                
                GetIfaces_nodeParam = node.GetIfaces_skip;
                GetIfaces_nodeParamType = node.GetIfaces_skipType;
                if (GetIfaces_nodeParamType === 'str') {
                    GetIfaces_parameters.skip = GetIfaces_nodeParam || '';
                } else {
                    GetIfaces_parameters.skip = RED.util.getMessageProperty(msg, GetIfaces_nodeParam);
                }
                GetIfaces_parameters.skip = !!GetIfaces_parameters.skip ? GetIfaces_parameters.skip : msg.payload;
                
                GetIfaces_nodeParam = node.GetIfaces_search;
                GetIfaces_nodeParamType = node.GetIfaces_searchType;
                if (GetIfaces_nodeParamType === 'str') {
                    GetIfaces_parameters.search = GetIfaces_nodeParam || '';
                } else {
                    GetIfaces_parameters.search = RED.util.getMessageProperty(msg, GetIfaces_nodeParam);
                }
                GetIfaces_parameters.search = !!GetIfaces_parameters.search ? GetIfaces_parameters.search : msg.payload;
                
                GetIfaces_nodeParam = node.GetIfaces_filter;
                GetIfaces_nodeParamType = node.GetIfaces_filterType;
                if (GetIfaces_nodeParamType === 'str') {
                    GetIfaces_parameters.filter = GetIfaces_nodeParam || '';
                } else {
                    GetIfaces_parameters.filter = RED.util.getMessageProperty(msg, GetIfaces_nodeParam);
                }
                GetIfaces_parameters.filter = !!GetIfaces_parameters.filter ? GetIfaces_parameters.filter : msg.payload;
                
                GetIfaces_nodeParam = node.GetIfaces_count;
                GetIfaces_nodeParamType = node.GetIfaces_countType;
                if (GetIfaces_nodeParamType === 'str') {
                    GetIfaces_parameters.count = GetIfaces_nodeParam || '';
                } else {
                    GetIfaces_parameters.count = RED.util.getMessageProperty(msg, GetIfaces_nodeParam);
                }
                GetIfaces_parameters.count = !!GetIfaces_parameters.count ? GetIfaces_parameters.count : msg.payload;
                                result = client.GetIfaces(GetIfaces_parameters);
            }
            if (!errorFlag && node.method === 'GetNotificationSettings') {
                var GetNotificationSettings_parameters = [];
                var GetNotificationSettings_nodeParam;
                var GetNotificationSettings_nodeParamType;

                GetNotificationSettings_nodeParam = node.GetNotificationSettings_select;
                GetNotificationSettings_nodeParamType = node.GetNotificationSettings_selectType;
                if (GetNotificationSettings_nodeParamType === 'str') {
                    GetNotificationSettings_parameters.select = GetNotificationSettings_nodeParam || '';
                } else {
                    GetNotificationSettings_parameters.select = RED.util.getMessageProperty(msg, GetNotificationSettings_nodeParam);
                }
                GetNotificationSettings_parameters.select = !!GetNotificationSettings_parameters.select ? GetNotificationSettings_parameters.select : msg.payload;
                
                GetNotificationSettings_nodeParam = node.GetNotificationSettings_expand;
                GetNotificationSettings_nodeParamType = node.GetNotificationSettings_expandType;
                if (GetNotificationSettings_nodeParamType === 'str') {
                    GetNotificationSettings_parameters.expand = GetNotificationSettings_nodeParam || '';
                } else {
                    GetNotificationSettings_parameters.expand = RED.util.getMessageProperty(msg, GetNotificationSettings_nodeParam);
                }
                GetNotificationSettings_parameters.expand = !!GetNotificationSettings_parameters.expand ? GetNotificationSettings_parameters.expand : msg.payload;
                                result = client.GetNotificationSettings(GetNotificationSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateNotificationSettings') {
                var UpdateNotificationSettings_parameters = [];
                var UpdateNotificationSettings_nodeParam;
                var UpdateNotificationSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateNotificationSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateNotificationSettings(UpdateNotificationSettings_parameters);
            }
            if (!errorFlag && node.method === 'TestEmail') {
                var TestEmail_parameters = [];
                var TestEmail_nodeParam;
                var TestEmail_nodeParamType;

                if (typeof msg.payload === 'object') {
                    TestEmail_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.TestEmail(TestEmail_parameters);
            }
            if (!errorFlag && node.method === 'GetOfficeHours') {
                var GetOfficeHours_parameters = [];
                var GetOfficeHours_nodeParam;
                var GetOfficeHours_nodeParamType;

                GetOfficeHours_nodeParam = node.GetOfficeHours_select;
                GetOfficeHours_nodeParamType = node.GetOfficeHours_selectType;
                if (GetOfficeHours_nodeParamType === 'str') {
                    GetOfficeHours_parameters.select = GetOfficeHours_nodeParam || '';
                } else {
                    GetOfficeHours_parameters.select = RED.util.getMessageProperty(msg, GetOfficeHours_nodeParam);
                }
                GetOfficeHours_parameters.select = !!GetOfficeHours_parameters.select ? GetOfficeHours_parameters.select : msg.payload;
                
                GetOfficeHours_nodeParam = node.GetOfficeHours_expand;
                GetOfficeHours_nodeParamType = node.GetOfficeHours_expandType;
                if (GetOfficeHours_nodeParamType === 'str') {
                    GetOfficeHours_parameters.expand = GetOfficeHours_nodeParam || '';
                } else {
                    GetOfficeHours_parameters.expand = RED.util.getMessageProperty(msg, GetOfficeHours_nodeParam);
                }
                GetOfficeHours_parameters.expand = !!GetOfficeHours_parameters.expand ? GetOfficeHours_parameters.expand : msg.payload;
                                result = client.GetOfficeHours(GetOfficeHours_parameters);
            }
            if (!errorFlag && node.method === 'UpdateOfficeHours') {
                var UpdateOfficeHours_parameters = [];
                var UpdateOfficeHours_nodeParam;
                var UpdateOfficeHours_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateOfficeHours_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateOfficeHours(UpdateOfficeHours_parameters);
            }
            if (!errorFlag && node.method === 'GetOutboundRule') {
                var GetOutboundRule_parameters = [];
                var GetOutboundRule_nodeParam;
                var GetOutboundRule_nodeParamType;

                GetOutboundRule_nodeParam = node.GetOutboundRule_id;
                GetOutboundRule_nodeParamType = node.GetOutboundRule_idType;
                if (GetOutboundRule_nodeParamType === 'str') {
                    GetOutboundRule_parameters.id = GetOutboundRule_nodeParam || '';
                } else {
                    GetOutboundRule_parameters.id = RED.util.getMessageProperty(msg, GetOutboundRule_nodeParam);
                }
                GetOutboundRule_parameters.id = !!GetOutboundRule_parameters.id ? GetOutboundRule_parameters.id : msg.payload;
                
                GetOutboundRule_nodeParam = node.GetOutboundRule_select;
                GetOutboundRule_nodeParamType = node.GetOutboundRule_selectType;
                if (GetOutboundRule_nodeParamType === 'str') {
                    GetOutboundRule_parameters.select = GetOutboundRule_nodeParam || '';
                } else {
                    GetOutboundRule_parameters.select = RED.util.getMessageProperty(msg, GetOutboundRule_nodeParam);
                }
                GetOutboundRule_parameters.select = !!GetOutboundRule_parameters.select ? GetOutboundRule_parameters.select : msg.payload;
                
                GetOutboundRule_nodeParam = node.GetOutboundRule_expand;
                GetOutboundRule_nodeParamType = node.GetOutboundRule_expandType;
                if (GetOutboundRule_nodeParamType === 'str') {
                    GetOutboundRule_parameters.expand = GetOutboundRule_nodeParam || '';
                } else {
                    GetOutboundRule_parameters.expand = RED.util.getMessageProperty(msg, GetOutboundRule_nodeParam);
                }
                GetOutboundRule_parameters.expand = !!GetOutboundRule_parameters.expand ? GetOutboundRule_parameters.expand : msg.payload;
                                result = client.GetOutboundRule(GetOutboundRule_parameters);
            }
            if (!errorFlag && node.method === 'UpdateOutboundRule') {
                var UpdateOutboundRule_parameters = [];
                var UpdateOutboundRule_nodeParam;
                var UpdateOutboundRule_nodeParamType;

                UpdateOutboundRule_nodeParam = node.UpdateOutboundRule_id;
                UpdateOutboundRule_nodeParamType = node.UpdateOutboundRule_idType;
                if (UpdateOutboundRule_nodeParamType === 'str') {
                    UpdateOutboundRule_parameters.id = UpdateOutboundRule_nodeParam || '';
                } else {
                    UpdateOutboundRule_parameters.id = RED.util.getMessageProperty(msg, UpdateOutboundRule_nodeParam);
                }
                UpdateOutboundRule_parameters.id = !!UpdateOutboundRule_parameters.id ? UpdateOutboundRule_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateOutboundRule_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateOutboundRule(UpdateOutboundRule_parameters);
            }
            if (!errorFlag && node.method === 'DeleteOutboundRule') {
                var DeleteOutboundRule_parameters = [];
                var DeleteOutboundRule_nodeParam;
                var DeleteOutboundRule_nodeParamType;

                DeleteOutboundRule_nodeParam = node.DeleteOutboundRule_id;
                DeleteOutboundRule_nodeParamType = node.DeleteOutboundRule_idType;
                if (DeleteOutboundRule_nodeParamType === 'str') {
                    DeleteOutboundRule_parameters.id = DeleteOutboundRule_nodeParam || '';
                } else {
                    DeleteOutboundRule_parameters.id = RED.util.getMessageProperty(msg, DeleteOutboundRule_nodeParam);
                }
                DeleteOutboundRule_parameters.id = !!DeleteOutboundRule_parameters.id ? DeleteOutboundRule_parameters.id : msg.payload;
                
                DeleteOutboundRule_nodeParam = node.DeleteOutboundRule_ifMatch;
                DeleteOutboundRule_nodeParamType = node.DeleteOutboundRule_ifMatchType;
                if (DeleteOutboundRule_nodeParamType === 'str') {
                    DeleteOutboundRule_parameters.ifMatch = DeleteOutboundRule_nodeParam || '';
                } else {
                    DeleteOutboundRule_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteOutboundRule_nodeParam);
                }
                DeleteOutboundRule_parameters.ifMatch = !!DeleteOutboundRule_parameters.ifMatch ? DeleteOutboundRule_parameters.ifMatch : msg.payload;
                                result = client.DeleteOutboundRule(DeleteOutboundRule_parameters);
            }
            if (!errorFlag && node.method === 'ListOutboundRule') {
                var ListOutboundRule_parameters = [];
                var ListOutboundRule_nodeParam;
                var ListOutboundRule_nodeParamType;

                ListOutboundRule_nodeParam = node.ListOutboundRule_top;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_topType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.top = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.top = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.top = !!ListOutboundRule_parameters.top ? ListOutboundRule_parameters.top : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_skip;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_skipType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.skip = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.skip = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.skip = !!ListOutboundRule_parameters.skip ? ListOutboundRule_parameters.skip : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_search;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_searchType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.search = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.search = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.search = !!ListOutboundRule_parameters.search ? ListOutboundRule_parameters.search : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_filter;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_filterType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.filter = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.filter = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.filter = !!ListOutboundRule_parameters.filter ? ListOutboundRule_parameters.filter : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_count;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_countType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.count = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.count = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.count = !!ListOutboundRule_parameters.count ? ListOutboundRule_parameters.count : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_orderby;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_orderbyType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.orderby = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.orderby = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.orderby = !!ListOutboundRule_parameters.orderby ? ListOutboundRule_parameters.orderby : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_select;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_selectType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.select = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.select = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.select = !!ListOutboundRule_parameters.select ? ListOutboundRule_parameters.select : msg.payload;
                
                ListOutboundRule_nodeParam = node.ListOutboundRule_expand;
                ListOutboundRule_nodeParamType = node.ListOutboundRule_expandType;
                if (ListOutboundRule_nodeParamType === 'str') {
                    ListOutboundRule_parameters.expand = ListOutboundRule_nodeParam || '';
                } else {
                    ListOutboundRule_parameters.expand = RED.util.getMessageProperty(msg, ListOutboundRule_nodeParam);
                }
                ListOutboundRule_parameters.expand = !!ListOutboundRule_parameters.expand ? ListOutboundRule_parameters.expand : msg.payload;
                                result = client.ListOutboundRule(ListOutboundRule_parameters);
            }
            if (!errorFlag && node.method === 'CreateOutboundRule') {
                var CreateOutboundRule_parameters = [];
                var CreateOutboundRule_nodeParam;
                var CreateOutboundRule_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateOutboundRule_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateOutboundRule(CreateOutboundRule_parameters);
            }
            if (!errorFlag && node.method === 'GetEmergencyOutboundRules') {
                var GetEmergencyOutboundRules_parameters = [];
                var GetEmergencyOutboundRules_nodeParam;
                var GetEmergencyOutboundRules_nodeParamType;

                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_top;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_topType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.top = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.top = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.top = !!GetEmergencyOutboundRules_parameters.top ? GetEmergencyOutboundRules_parameters.top : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_skip;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_skipType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.skip = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.skip = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.skip = !!GetEmergencyOutboundRules_parameters.skip ? GetEmergencyOutboundRules_parameters.skip : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_search;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_searchType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.search = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.search = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.search = !!GetEmergencyOutboundRules_parameters.search ? GetEmergencyOutboundRules_parameters.search : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_filter;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_filterType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.filter = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.filter = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.filter = !!GetEmergencyOutboundRules_parameters.filter ? GetEmergencyOutboundRules_parameters.filter : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_count;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_countType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.count = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.count = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.count = !!GetEmergencyOutboundRules_parameters.count ? GetEmergencyOutboundRules_parameters.count : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_select;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_selectType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.select = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.select = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.select = !!GetEmergencyOutboundRules_parameters.select ? GetEmergencyOutboundRules_parameters.select : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_orderby;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_orderbyType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.orderby = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.orderby = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.orderby = !!GetEmergencyOutboundRules_parameters.orderby ? GetEmergencyOutboundRules_parameters.orderby : msg.payload;
                
                GetEmergencyOutboundRules_nodeParam = node.GetEmergencyOutboundRules_expand;
                GetEmergencyOutboundRules_nodeParamType = node.GetEmergencyOutboundRules_expandType;
                if (GetEmergencyOutboundRules_nodeParamType === 'str') {
                    GetEmergencyOutboundRules_parameters.expand = GetEmergencyOutboundRules_nodeParam || '';
                } else {
                    GetEmergencyOutboundRules_parameters.expand = RED.util.getMessageProperty(msg, GetEmergencyOutboundRules_nodeParam);
                }
                GetEmergencyOutboundRules_parameters.expand = !!GetEmergencyOutboundRules_parameters.expand ? GetEmergencyOutboundRules_parameters.expand : msg.payload;
                                result = client.GetEmergencyOutboundRules(GetEmergencyOutboundRules_parameters);
            }
            if (!errorFlag && node.method === 'Purge') {
                var Purge_parameters = [];
                var Purge_nodeParam;
                var Purge_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Purge_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Purge(Purge_parameters);
            }
            if (!errorFlag && node.method === 'MoveUpDown') {
                var MoveUpDown_parameters = [];
                var MoveUpDown_nodeParam;
                var MoveUpDown_nodeParamType;

                if (typeof msg.payload === 'object') {
                    MoveUpDown_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.MoveUpDown(MoveUpDown_parameters);
            }
            if (!errorFlag && node.method === 'GetParameterByName') {
                var GetParameterByName_parameters = [];
                var GetParameterByName_nodeParam;
                var GetParameterByName_nodeParamType;

                GetParameterByName_nodeParam = node.GetParameterByName_name;
                GetParameterByName_nodeParamType = node.GetParameterByName_nameType;
                if (GetParameterByName_nodeParamType === 'str') {
                    GetParameterByName_parameters.name = GetParameterByName_nodeParam || '';
                } else {
                    GetParameterByName_parameters.name = RED.util.getMessageProperty(msg, GetParameterByName_nodeParam);
                }
                GetParameterByName_parameters.name = !!GetParameterByName_parameters.name ? GetParameterByName_parameters.name : msg.payload;
                                result = client.GetParameterByName(GetParameterByName_parameters);
            }
            if (!errorFlag && node.method === 'ListParameter') {
                var ListParameter_parameters = [];
                var ListParameter_nodeParam;
                var ListParameter_nodeParamType;

                ListParameter_nodeParam = node.ListParameter_top;
                ListParameter_nodeParamType = node.ListParameter_topType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.top = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.top = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.top = !!ListParameter_parameters.top ? ListParameter_parameters.top : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_skip;
                ListParameter_nodeParamType = node.ListParameter_skipType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.skip = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.skip = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.skip = !!ListParameter_parameters.skip ? ListParameter_parameters.skip : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_search;
                ListParameter_nodeParamType = node.ListParameter_searchType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.search = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.search = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.search = !!ListParameter_parameters.search ? ListParameter_parameters.search : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_filter;
                ListParameter_nodeParamType = node.ListParameter_filterType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.filter = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.filter = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.filter = !!ListParameter_parameters.filter ? ListParameter_parameters.filter : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_count;
                ListParameter_nodeParamType = node.ListParameter_countType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.count = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.count = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.count = !!ListParameter_parameters.count ? ListParameter_parameters.count : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_orderby;
                ListParameter_nodeParamType = node.ListParameter_orderbyType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.orderby = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.orderby = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.orderby = !!ListParameter_parameters.orderby ? ListParameter_parameters.orderby : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_select;
                ListParameter_nodeParamType = node.ListParameter_selectType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.select = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.select = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.select = !!ListParameter_parameters.select ? ListParameter_parameters.select : msg.payload;
                
                ListParameter_nodeParam = node.ListParameter_expand;
                ListParameter_nodeParamType = node.ListParameter_expandType;
                if (ListParameter_nodeParamType === 'str') {
                    ListParameter_parameters.expand = ListParameter_nodeParam || '';
                } else {
                    ListParameter_parameters.expand = RED.util.getMessageProperty(msg, ListParameter_nodeParam);
                }
                ListParameter_parameters.expand = !!ListParameter_parameters.expand ? ListParameter_parameters.expand : msg.payload;
                                result = client.ListParameter(ListParameter_parameters);
            }
            if (!errorFlag && node.method === 'CreateParameter') {
                var CreateParameter_parameters = [];
                var CreateParameter_nodeParam;
                var CreateParameter_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateParameter_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateParameter(CreateParameter_parameters);
            }
            if (!errorFlag && node.method === 'GetParameter') {
                var GetParameter_parameters = [];
                var GetParameter_nodeParam;
                var GetParameter_nodeParamType;

                GetParameter_nodeParam = node.GetParameter_id;
                GetParameter_nodeParamType = node.GetParameter_idType;
                if (GetParameter_nodeParamType === 'str') {
                    GetParameter_parameters.id = GetParameter_nodeParam || '';
                } else {
                    GetParameter_parameters.id = RED.util.getMessageProperty(msg, GetParameter_nodeParam);
                }
                GetParameter_parameters.id = !!GetParameter_parameters.id ? GetParameter_parameters.id : msg.payload;
                
                GetParameter_nodeParam = node.GetParameter_select;
                GetParameter_nodeParamType = node.GetParameter_selectType;
                if (GetParameter_nodeParamType === 'str') {
                    GetParameter_parameters.select = GetParameter_nodeParam || '';
                } else {
                    GetParameter_parameters.select = RED.util.getMessageProperty(msg, GetParameter_nodeParam);
                }
                GetParameter_parameters.select = !!GetParameter_parameters.select ? GetParameter_parameters.select : msg.payload;
                
                GetParameter_nodeParam = node.GetParameter_expand;
                GetParameter_nodeParamType = node.GetParameter_expandType;
                if (GetParameter_nodeParamType === 'str') {
                    GetParameter_parameters.expand = GetParameter_nodeParam || '';
                } else {
                    GetParameter_parameters.expand = RED.util.getMessageProperty(msg, GetParameter_nodeParam);
                }
                GetParameter_parameters.expand = !!GetParameter_parameters.expand ? GetParameter_parameters.expand : msg.payload;
                                result = client.GetParameter(GetParameter_parameters);
            }
            if (!errorFlag && node.method === 'UpdateParameter') {
                var UpdateParameter_parameters = [];
                var UpdateParameter_nodeParam;
                var UpdateParameter_nodeParamType;

                UpdateParameter_nodeParam = node.UpdateParameter_id;
                UpdateParameter_nodeParamType = node.UpdateParameter_idType;
                if (UpdateParameter_nodeParamType === 'str') {
                    UpdateParameter_parameters.id = UpdateParameter_nodeParam || '';
                } else {
                    UpdateParameter_parameters.id = RED.util.getMessageProperty(msg, UpdateParameter_nodeParam);
                }
                UpdateParameter_parameters.id = !!UpdateParameter_parameters.id ? UpdateParameter_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateParameter_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateParameter(UpdateParameter_parameters);
            }
            if (!errorFlag && node.method === 'DeleteParameter') {
                var DeleteParameter_parameters = [];
                var DeleteParameter_nodeParam;
                var DeleteParameter_nodeParamType;

                DeleteParameter_nodeParam = node.DeleteParameter_id;
                DeleteParameter_nodeParamType = node.DeleteParameter_idType;
                if (DeleteParameter_nodeParamType === 'str') {
                    DeleteParameter_parameters.id = DeleteParameter_nodeParam || '';
                } else {
                    DeleteParameter_parameters.id = RED.util.getMessageProperty(msg, DeleteParameter_nodeParam);
                }
                DeleteParameter_parameters.id = !!DeleteParameter_parameters.id ? DeleteParameter_parameters.id : msg.payload;
                
                DeleteParameter_nodeParam = node.DeleteParameter_ifMatch;
                DeleteParameter_nodeParamType = node.DeleteParameter_ifMatchType;
                if (DeleteParameter_nodeParamType === 'str') {
                    DeleteParameter_parameters.ifMatch = DeleteParameter_nodeParam || '';
                } else {
                    DeleteParameter_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteParameter_nodeParam);
                }
                DeleteParameter_parameters.ifMatch = !!DeleteParameter_parameters.ifMatch ? DeleteParameter_parameters.ifMatch : msg.payload;
                                result = client.DeleteParameter(DeleteParameter_parameters);
            }
            if (!errorFlag && node.method === 'ListParkingGroups') {
                var ListParkingGroups_parameters = [];
                var ListParkingGroups_nodeParam;
                var ListParkingGroups_nodeParamType;

                ListParkingGroups_nodeParam = node.ListParkingGroups_id;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_idType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.id = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.id = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.id = !!ListParkingGroups_parameters.id ? ListParkingGroups_parameters.id : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_top;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_topType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.top = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.top = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.top = !!ListParkingGroups_parameters.top ? ListParkingGroups_parameters.top : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_skip;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_skipType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.skip = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.skip = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.skip = !!ListParkingGroups_parameters.skip ? ListParkingGroups_parameters.skip : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_search;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_searchType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.search = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.search = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.search = !!ListParkingGroups_parameters.search ? ListParkingGroups_parameters.search : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_filter;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_filterType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.filter = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.filter = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.filter = !!ListParkingGroups_parameters.filter ? ListParkingGroups_parameters.filter : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_count;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_countType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.count = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.count = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.count = !!ListParkingGroups_parameters.count ? ListParkingGroups_parameters.count : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_orderby;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_orderbyType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.orderby = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.orderby = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.orderby = !!ListParkingGroups_parameters.orderby ? ListParkingGroups_parameters.orderby : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_select;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_selectType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.select = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.select = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.select = !!ListParkingGroups_parameters.select ? ListParkingGroups_parameters.select : msg.payload;
                
                ListParkingGroups_nodeParam = node.ListParkingGroups_expand;
                ListParkingGroups_nodeParamType = node.ListParkingGroups_expandType;
                if (ListParkingGroups_nodeParamType === 'str') {
                    ListParkingGroups_parameters.expand = ListParkingGroups_nodeParam || '';
                } else {
                    ListParkingGroups_parameters.expand = RED.util.getMessageProperty(msg, ListParkingGroups_nodeParam);
                }
                ListParkingGroups_parameters.expand = !!ListParkingGroups_parameters.expand ? ListParkingGroups_parameters.expand : msg.payload;
                                result = client.ListParkingGroups(ListParkingGroups_parameters);
            }
            if (!errorFlag && node.method === 'GetByNumber') {
                var GetByNumber_parameters = [];
                var GetByNumber_nodeParam;
                var GetByNumber_nodeParamType;

                GetByNumber_nodeParam = node.GetByNumber_number;
                GetByNumber_nodeParamType = node.GetByNumber_numberType;
                if (GetByNumber_nodeParamType === 'str') {
                    GetByNumber_parameters.number = GetByNumber_nodeParam || '';
                } else {
                    GetByNumber_parameters.number = RED.util.getMessageProperty(msg, GetByNumber_nodeParam);
                }
                GetByNumber_parameters.number = !!GetByNumber_parameters.number ? GetByNumber_parameters.number : msg.payload;
                                result = client.GetByNumber(GetByNumber_parameters);
            }
            if (!errorFlag && node.method === 'ListParking') {
                var ListParking_parameters = [];
                var ListParking_nodeParam;
                var ListParking_nodeParamType;

                ListParking_nodeParam = node.ListParking_top;
                ListParking_nodeParamType = node.ListParking_topType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.top = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.top = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.top = !!ListParking_parameters.top ? ListParking_parameters.top : msg.payload;
                
                ListParking_nodeParam = node.ListParking_skip;
                ListParking_nodeParamType = node.ListParking_skipType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.skip = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.skip = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.skip = !!ListParking_parameters.skip ? ListParking_parameters.skip : msg.payload;
                
                ListParking_nodeParam = node.ListParking_search;
                ListParking_nodeParamType = node.ListParking_searchType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.search = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.search = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.search = !!ListParking_parameters.search ? ListParking_parameters.search : msg.payload;
                
                ListParking_nodeParam = node.ListParking_filter;
                ListParking_nodeParamType = node.ListParking_filterType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.filter = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.filter = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.filter = !!ListParking_parameters.filter ? ListParking_parameters.filter : msg.payload;
                
                ListParking_nodeParam = node.ListParking_count;
                ListParking_nodeParamType = node.ListParking_countType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.count = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.count = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.count = !!ListParking_parameters.count ? ListParking_parameters.count : msg.payload;
                
                ListParking_nodeParam = node.ListParking_orderby;
                ListParking_nodeParamType = node.ListParking_orderbyType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.orderby = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.orderby = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.orderby = !!ListParking_parameters.orderby ? ListParking_parameters.orderby : msg.payload;
                
                ListParking_nodeParam = node.ListParking_select;
                ListParking_nodeParamType = node.ListParking_selectType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.select = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.select = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.select = !!ListParking_parameters.select ? ListParking_parameters.select : msg.payload;
                
                ListParking_nodeParam = node.ListParking_expand;
                ListParking_nodeParamType = node.ListParking_expandType;
                if (ListParking_nodeParamType === 'str') {
                    ListParking_parameters.expand = ListParking_nodeParam || '';
                } else {
                    ListParking_parameters.expand = RED.util.getMessageProperty(msg, ListParking_nodeParam);
                }
                ListParking_parameters.expand = !!ListParking_parameters.expand ? ListParking_parameters.expand : msg.payload;
                                result = client.ListParking(ListParking_parameters);
            }
            if (!errorFlag && node.method === 'CreateParking') {
                var CreateParking_parameters = [];
                var CreateParking_nodeParam;
                var CreateParking_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateParking_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateParking(CreateParking_parameters);
            }
            if (!errorFlag && node.method === 'GetParking') {
                var GetParking_parameters = [];
                var GetParking_nodeParam;
                var GetParking_nodeParamType;

                GetParking_nodeParam = node.GetParking_id;
                GetParking_nodeParamType = node.GetParking_idType;
                if (GetParking_nodeParamType === 'str') {
                    GetParking_parameters.id = GetParking_nodeParam || '';
                } else {
                    GetParking_parameters.id = RED.util.getMessageProperty(msg, GetParking_nodeParam);
                }
                GetParking_parameters.id = !!GetParking_parameters.id ? GetParking_parameters.id : msg.payload;
                
                GetParking_nodeParam = node.GetParking_select;
                GetParking_nodeParamType = node.GetParking_selectType;
                if (GetParking_nodeParamType === 'str') {
                    GetParking_parameters.select = GetParking_nodeParam || '';
                } else {
                    GetParking_parameters.select = RED.util.getMessageProperty(msg, GetParking_nodeParam);
                }
                GetParking_parameters.select = !!GetParking_parameters.select ? GetParking_parameters.select : msg.payload;
                
                GetParking_nodeParam = node.GetParking_expand;
                GetParking_nodeParamType = node.GetParking_expandType;
                if (GetParking_nodeParamType === 'str') {
                    GetParking_parameters.expand = GetParking_nodeParam || '';
                } else {
                    GetParking_parameters.expand = RED.util.getMessageProperty(msg, GetParking_nodeParam);
                }
                GetParking_parameters.expand = !!GetParking_parameters.expand ? GetParking_parameters.expand : msg.payload;
                                result = client.GetParking(GetParking_parameters);
            }
            if (!errorFlag && node.method === 'UpdateParking') {
                var UpdateParking_parameters = [];
                var UpdateParking_nodeParam;
                var UpdateParking_nodeParamType;

                UpdateParking_nodeParam = node.UpdateParking_id;
                UpdateParking_nodeParamType = node.UpdateParking_idType;
                if (UpdateParking_nodeParamType === 'str') {
                    UpdateParking_parameters.id = UpdateParking_nodeParam || '';
                } else {
                    UpdateParking_parameters.id = RED.util.getMessageProperty(msg, UpdateParking_nodeParam);
                }
                UpdateParking_parameters.id = !!UpdateParking_parameters.id ? UpdateParking_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateParking_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateParking(UpdateParking_parameters);
            }
            if (!errorFlag && node.method === 'DeleteParking') {
                var DeleteParking_parameters = [];
                var DeleteParking_nodeParam;
                var DeleteParking_nodeParamType;

                DeleteParking_nodeParam = node.DeleteParking_id;
                DeleteParking_nodeParamType = node.DeleteParking_idType;
                if (DeleteParking_nodeParamType === 'str') {
                    DeleteParking_parameters.id = DeleteParking_nodeParam || '';
                } else {
                    DeleteParking_parameters.id = RED.util.getMessageProperty(msg, DeleteParking_nodeParam);
                }
                DeleteParking_parameters.id = !!DeleteParking_parameters.id ? DeleteParking_parameters.id : msg.payload;
                
                DeleteParking_nodeParam = node.DeleteParking_ifMatch;
                DeleteParking_nodeParamType = node.DeleteParking_ifMatchType;
                if (DeleteParking_nodeParamType === 'str') {
                    DeleteParking_parameters.ifMatch = DeleteParking_nodeParam || '';
                } else {
                    DeleteParking_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteParking_nodeParam);
                }
                DeleteParking_parameters.ifMatch = !!DeleteParking_parameters.ifMatch ? DeleteParking_parameters.ifMatch : msg.payload;
                                result = client.DeleteParking(DeleteParking_parameters);
            }
            if (!errorFlag && node.method === 'ListPeer') {
                var ListPeer_parameters = [];
                var ListPeer_nodeParam;
                var ListPeer_nodeParamType;

                ListPeer_nodeParam = node.ListPeer_top;
                ListPeer_nodeParamType = node.ListPeer_topType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.top = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.top = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.top = !!ListPeer_parameters.top ? ListPeer_parameters.top : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_skip;
                ListPeer_nodeParamType = node.ListPeer_skipType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.skip = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.skip = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.skip = !!ListPeer_parameters.skip ? ListPeer_parameters.skip : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_search;
                ListPeer_nodeParamType = node.ListPeer_searchType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.search = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.search = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.search = !!ListPeer_parameters.search ? ListPeer_parameters.search : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_filter;
                ListPeer_nodeParamType = node.ListPeer_filterType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.filter = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.filter = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.filter = !!ListPeer_parameters.filter ? ListPeer_parameters.filter : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_count;
                ListPeer_nodeParamType = node.ListPeer_countType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.count = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.count = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.count = !!ListPeer_parameters.count ? ListPeer_parameters.count : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_orderby;
                ListPeer_nodeParamType = node.ListPeer_orderbyType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.orderby = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.orderby = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.orderby = !!ListPeer_parameters.orderby ? ListPeer_parameters.orderby : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_select;
                ListPeer_nodeParamType = node.ListPeer_selectType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.select = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.select = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.select = !!ListPeer_parameters.select ? ListPeer_parameters.select : msg.payload;
                
                ListPeer_nodeParam = node.ListPeer_expand;
                ListPeer_nodeParamType = node.ListPeer_expandType;
                if (ListPeer_nodeParamType === 'str') {
                    ListPeer_parameters.expand = ListPeer_nodeParam || '';
                } else {
                    ListPeer_parameters.expand = RED.util.getMessageProperty(msg, ListPeer_nodeParam);
                }
                ListPeer_parameters.expand = !!ListPeer_parameters.expand ? ListPeer_parameters.expand : msg.payload;
                                result = client.ListPeer(ListPeer_parameters);
            }
            if (!errorFlag && node.method === 'GetPeerByNumber') {
                var GetPeerByNumber_parameters = [];
                var GetPeerByNumber_nodeParam;
                var GetPeerByNumber_nodeParamType;

                GetPeerByNumber_nodeParam = node.GetPeerByNumber_number;
                GetPeerByNumber_nodeParamType = node.GetPeerByNumber_numberType;
                if (GetPeerByNumber_nodeParamType === 'str') {
                    GetPeerByNumber_parameters.number = GetPeerByNumber_nodeParam || '';
                } else {
                    GetPeerByNumber_parameters.number = RED.util.getMessageProperty(msg, GetPeerByNumber_nodeParam);
                }
                GetPeerByNumber_parameters.number = !!GetPeerByNumber_parameters.number ? GetPeerByNumber_parameters.number : msg.payload;
                                result = client.GetPeerByNumber(GetPeerByNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetReportPeers') {
                var GetReportPeers_parameters = [];
                var GetReportPeers_nodeParam;
                var GetReportPeers_nodeParamType;

                GetReportPeers_nodeParam = node.GetReportPeers_top;
                GetReportPeers_nodeParamType = node.GetReportPeers_topType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.top = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.top = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.top = !!GetReportPeers_parameters.top ? GetReportPeers_parameters.top : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_skip;
                GetReportPeers_nodeParamType = node.GetReportPeers_skipType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.skip = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.skip = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.skip = !!GetReportPeers_parameters.skip ? GetReportPeers_parameters.skip : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_search;
                GetReportPeers_nodeParamType = node.GetReportPeers_searchType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.search = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.search = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.search = !!GetReportPeers_parameters.search ? GetReportPeers_parameters.search : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_filter;
                GetReportPeers_nodeParamType = node.GetReportPeers_filterType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.filter = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.filter = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.filter = !!GetReportPeers_parameters.filter ? GetReportPeers_parameters.filter : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_count;
                GetReportPeers_nodeParamType = node.GetReportPeers_countType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.count = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.count = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.count = !!GetReportPeers_parameters.count ? GetReportPeers_parameters.count : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_select;
                GetReportPeers_nodeParamType = node.GetReportPeers_selectType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.select = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.select = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.select = !!GetReportPeers_parameters.select ? GetReportPeers_parameters.select : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_orderby;
                GetReportPeers_nodeParamType = node.GetReportPeers_orderbyType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.orderby = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.orderby = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.orderby = !!GetReportPeers_parameters.orderby ? GetReportPeers_parameters.orderby : msg.payload;
                
                GetReportPeers_nodeParam = node.GetReportPeers_expand;
                GetReportPeers_nodeParamType = node.GetReportPeers_expandType;
                if (GetReportPeers_nodeParamType === 'str') {
                    GetReportPeers_parameters.expand = GetReportPeers_nodeParam || '';
                } else {
                    GetReportPeers_parameters.expand = RED.util.getMessageProperty(msg, GetReportPeers_nodeParam);
                }
                GetReportPeers_parameters.expand = !!GetReportPeers_parameters.expand ? GetReportPeers_parameters.expand : msg.payload;
                                result = client.GetReportPeers(GetReportPeers_parameters);
            }
            if (!errorFlag && node.method === 'GetPhoneBookSettings') {
                var GetPhoneBookSettings_parameters = [];
                var GetPhoneBookSettings_nodeParam;
                var GetPhoneBookSettings_nodeParamType;

                GetPhoneBookSettings_nodeParam = node.GetPhoneBookSettings_select;
                GetPhoneBookSettings_nodeParamType = node.GetPhoneBookSettings_selectType;
                if (GetPhoneBookSettings_nodeParamType === 'str') {
                    GetPhoneBookSettings_parameters.select = GetPhoneBookSettings_nodeParam || '';
                } else {
                    GetPhoneBookSettings_parameters.select = RED.util.getMessageProperty(msg, GetPhoneBookSettings_nodeParam);
                }
                GetPhoneBookSettings_parameters.select = !!GetPhoneBookSettings_parameters.select ? GetPhoneBookSettings_parameters.select : msg.payload;
                
                GetPhoneBookSettings_nodeParam = node.GetPhoneBookSettings_expand;
                GetPhoneBookSettings_nodeParamType = node.GetPhoneBookSettings_expandType;
                if (GetPhoneBookSettings_nodeParamType === 'str') {
                    GetPhoneBookSettings_parameters.expand = GetPhoneBookSettings_nodeParam || '';
                } else {
                    GetPhoneBookSettings_parameters.expand = RED.util.getMessageProperty(msg, GetPhoneBookSettings_nodeParam);
                }
                GetPhoneBookSettings_parameters.expand = !!GetPhoneBookSettings_parameters.expand ? GetPhoneBookSettings_parameters.expand : msg.payload;
                                result = client.GetPhoneBookSettings(GetPhoneBookSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdatePhoneBookSettings') {
                var UpdatePhoneBookSettings_parameters = [];
                var UpdatePhoneBookSettings_nodeParam;
                var UpdatePhoneBookSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdatePhoneBookSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdatePhoneBookSettings(UpdatePhoneBookSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListPhoneLogo') {
                var ListPhoneLogo_parameters = [];
                var ListPhoneLogo_nodeParam;
                var ListPhoneLogo_nodeParamType;

                ListPhoneLogo_nodeParam = node.ListPhoneLogo_top;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_topType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.top = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.top = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.top = !!ListPhoneLogo_parameters.top ? ListPhoneLogo_parameters.top : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_skip;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_skipType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.skip = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.skip = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.skip = !!ListPhoneLogo_parameters.skip ? ListPhoneLogo_parameters.skip : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_search;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_searchType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.search = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.search = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.search = !!ListPhoneLogo_parameters.search ? ListPhoneLogo_parameters.search : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_filter;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_filterType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.filter = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.filter = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.filter = !!ListPhoneLogo_parameters.filter ? ListPhoneLogo_parameters.filter : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_count;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_countType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.count = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.count = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.count = !!ListPhoneLogo_parameters.count ? ListPhoneLogo_parameters.count : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_orderby;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_orderbyType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.orderby = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.orderby = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.orderby = !!ListPhoneLogo_parameters.orderby ? ListPhoneLogo_parameters.orderby : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_select;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_selectType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.select = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.select = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.select = !!ListPhoneLogo_parameters.select ? ListPhoneLogo_parameters.select : msg.payload;
                
                ListPhoneLogo_nodeParam = node.ListPhoneLogo_expand;
                ListPhoneLogo_nodeParamType = node.ListPhoneLogo_expandType;
                if (ListPhoneLogo_nodeParamType === 'str') {
                    ListPhoneLogo_parameters.expand = ListPhoneLogo_nodeParam || '';
                } else {
                    ListPhoneLogo_parameters.expand = RED.util.getMessageProperty(msg, ListPhoneLogo_nodeParam);
                }
                ListPhoneLogo_parameters.expand = !!ListPhoneLogo_parameters.expand ? ListPhoneLogo_parameters.expand : msg.payload;
                                result = client.ListPhoneLogo(ListPhoneLogo_parameters);
            }
            if (!errorFlag && node.method === 'DeletePhoneLogo') {
                var DeletePhoneLogo_parameters = [];
                var DeletePhoneLogo_nodeParam;
                var DeletePhoneLogo_nodeParamType;

                DeletePhoneLogo_nodeParam = node.DeletePhoneLogo_filename;
                DeletePhoneLogo_nodeParamType = node.DeletePhoneLogo_filenameType;
                if (DeletePhoneLogo_nodeParamType === 'str') {
                    DeletePhoneLogo_parameters.filename = DeletePhoneLogo_nodeParam || '';
                } else {
                    DeletePhoneLogo_parameters.filename = RED.util.getMessageProperty(msg, DeletePhoneLogo_nodeParam);
                }
                DeletePhoneLogo_parameters.filename = !!DeletePhoneLogo_parameters.filename ? DeletePhoneLogo_parameters.filename : msg.payload;
                
                DeletePhoneLogo_nodeParam = node.DeletePhoneLogo_ifMatch;
                DeletePhoneLogo_nodeParamType = node.DeletePhoneLogo_ifMatchType;
                if (DeletePhoneLogo_nodeParamType === 'str') {
                    DeletePhoneLogo_parameters.ifMatch = DeletePhoneLogo_nodeParam || '';
                } else {
                    DeletePhoneLogo_parameters.ifMatch = RED.util.getMessageProperty(msg, DeletePhoneLogo_nodeParam);
                }
                DeletePhoneLogo_parameters.ifMatch = !!DeletePhoneLogo_parameters.ifMatch ? DeletePhoneLogo_parameters.ifMatch : msg.payload;
                                result = client.DeletePhoneLogo(DeletePhoneLogo_parameters);
            }
            if (!errorFlag && node.method === 'GetPhonesSettings') {
                var GetPhonesSettings_parameters = [];
                var GetPhonesSettings_nodeParam;
                var GetPhonesSettings_nodeParamType;

                GetPhonesSettings_nodeParam = node.GetPhonesSettings_select;
                GetPhonesSettings_nodeParamType = node.GetPhonesSettings_selectType;
                if (GetPhonesSettings_nodeParamType === 'str') {
                    GetPhonesSettings_parameters.select = GetPhonesSettings_nodeParam || '';
                } else {
                    GetPhonesSettings_parameters.select = RED.util.getMessageProperty(msg, GetPhonesSettings_nodeParam);
                }
                GetPhonesSettings_parameters.select = !!GetPhonesSettings_parameters.select ? GetPhonesSettings_parameters.select : msg.payload;
                
                GetPhonesSettings_nodeParam = node.GetPhonesSettings_expand;
                GetPhonesSettings_nodeParamType = node.GetPhonesSettings_expandType;
                if (GetPhonesSettings_nodeParamType === 'str') {
                    GetPhonesSettings_parameters.expand = GetPhonesSettings_nodeParam || '';
                } else {
                    GetPhonesSettings_parameters.expand = RED.util.getMessageProperty(msg, GetPhonesSettings_nodeParam);
                }
                GetPhonesSettings_parameters.expand = !!GetPhonesSettings_parameters.expand ? GetPhonesSettings_parameters.expand : msg.payload;
                                result = client.GetPhonesSettings(GetPhonesSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdatePhonesSettings') {
                var UpdatePhonesSettings_parameters = [];
                var UpdatePhonesSettings_nodeParam;
                var UpdatePhonesSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdatePhonesSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdatePhonesSettings(UpdatePhonesSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListPhoneTemplate') {
                var ListPhoneTemplate_parameters = [];
                var ListPhoneTemplate_nodeParam;
                var ListPhoneTemplate_nodeParamType;

                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_top;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_topType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.top = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.top = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.top = !!ListPhoneTemplate_parameters.top ? ListPhoneTemplate_parameters.top : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_skip;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_skipType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.skip = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.skip = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.skip = !!ListPhoneTemplate_parameters.skip ? ListPhoneTemplate_parameters.skip : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_search;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_searchType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.search = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.search = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.search = !!ListPhoneTemplate_parameters.search ? ListPhoneTemplate_parameters.search : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_filter;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_filterType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.filter = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.filter = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.filter = !!ListPhoneTemplate_parameters.filter ? ListPhoneTemplate_parameters.filter : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_count;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_countType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.count = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.count = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.count = !!ListPhoneTemplate_parameters.count ? ListPhoneTemplate_parameters.count : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_orderby;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_orderbyType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.orderby = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.orderby = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.orderby = !!ListPhoneTemplate_parameters.orderby ? ListPhoneTemplate_parameters.orderby : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_select;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_selectType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.select = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.select = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.select = !!ListPhoneTemplate_parameters.select ? ListPhoneTemplate_parameters.select : msg.payload;
                
                ListPhoneTemplate_nodeParam = node.ListPhoneTemplate_expand;
                ListPhoneTemplate_nodeParamType = node.ListPhoneTemplate_expandType;
                if (ListPhoneTemplate_nodeParamType === 'str') {
                    ListPhoneTemplate_parameters.expand = ListPhoneTemplate_nodeParam || '';
                } else {
                    ListPhoneTemplate_parameters.expand = RED.util.getMessageProperty(msg, ListPhoneTemplate_nodeParam);
                }
                ListPhoneTemplate_parameters.expand = !!ListPhoneTemplate_parameters.expand ? ListPhoneTemplate_parameters.expand : msg.payload;
                                result = client.ListPhoneTemplate(ListPhoneTemplate_parameters);
            }
            if (!errorFlag && node.method === 'CreatePhoneTemplate') {
                var CreatePhoneTemplate_parameters = [];
                var CreatePhoneTemplate_nodeParam;
                var CreatePhoneTemplate_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreatePhoneTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreatePhoneTemplate(CreatePhoneTemplate_parameters);
            }
            if (!errorFlag && node.method === 'GetPhoneTemplate') {
                var GetPhoneTemplate_parameters = [];
                var GetPhoneTemplate_nodeParam;
                var GetPhoneTemplate_nodeParamType;

                GetPhoneTemplate_nodeParam = node.GetPhoneTemplate_id;
                GetPhoneTemplate_nodeParamType = node.GetPhoneTemplate_idType;
                if (GetPhoneTemplate_nodeParamType === 'str') {
                    GetPhoneTemplate_parameters.id = GetPhoneTemplate_nodeParam || '';
                } else {
                    GetPhoneTemplate_parameters.id = RED.util.getMessageProperty(msg, GetPhoneTemplate_nodeParam);
                }
                GetPhoneTemplate_parameters.id = !!GetPhoneTemplate_parameters.id ? GetPhoneTemplate_parameters.id : msg.payload;
                
                GetPhoneTemplate_nodeParam = node.GetPhoneTemplate_select;
                GetPhoneTemplate_nodeParamType = node.GetPhoneTemplate_selectType;
                if (GetPhoneTemplate_nodeParamType === 'str') {
                    GetPhoneTemplate_parameters.select = GetPhoneTemplate_nodeParam || '';
                } else {
                    GetPhoneTemplate_parameters.select = RED.util.getMessageProperty(msg, GetPhoneTemplate_nodeParam);
                }
                GetPhoneTemplate_parameters.select = !!GetPhoneTemplate_parameters.select ? GetPhoneTemplate_parameters.select : msg.payload;
                
                GetPhoneTemplate_nodeParam = node.GetPhoneTemplate_expand;
                GetPhoneTemplate_nodeParamType = node.GetPhoneTemplate_expandType;
                if (GetPhoneTemplate_nodeParamType === 'str') {
                    GetPhoneTemplate_parameters.expand = GetPhoneTemplate_nodeParam || '';
                } else {
                    GetPhoneTemplate_parameters.expand = RED.util.getMessageProperty(msg, GetPhoneTemplate_nodeParam);
                }
                GetPhoneTemplate_parameters.expand = !!GetPhoneTemplate_parameters.expand ? GetPhoneTemplate_parameters.expand : msg.payload;
                                result = client.GetPhoneTemplate(GetPhoneTemplate_parameters);
            }
            if (!errorFlag && node.method === 'UpdatePhoneTemplate') {
                var UpdatePhoneTemplate_parameters = [];
                var UpdatePhoneTemplate_nodeParam;
                var UpdatePhoneTemplate_nodeParamType;

                UpdatePhoneTemplate_nodeParam = node.UpdatePhoneTemplate_id;
                UpdatePhoneTemplate_nodeParamType = node.UpdatePhoneTemplate_idType;
                if (UpdatePhoneTemplate_nodeParamType === 'str') {
                    UpdatePhoneTemplate_parameters.id = UpdatePhoneTemplate_nodeParam || '';
                } else {
                    UpdatePhoneTemplate_parameters.id = RED.util.getMessageProperty(msg, UpdatePhoneTemplate_nodeParam);
                }
                UpdatePhoneTemplate_parameters.id = !!UpdatePhoneTemplate_parameters.id ? UpdatePhoneTemplate_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdatePhoneTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdatePhoneTemplate(UpdatePhoneTemplate_parameters);
            }
            if (!errorFlag && node.method === 'DeletePhoneTemplate') {
                var DeletePhoneTemplate_parameters = [];
                var DeletePhoneTemplate_nodeParam;
                var DeletePhoneTemplate_nodeParamType;

                DeletePhoneTemplate_nodeParam = node.DeletePhoneTemplate_id;
                DeletePhoneTemplate_nodeParamType = node.DeletePhoneTemplate_idType;
                if (DeletePhoneTemplate_nodeParamType === 'str') {
                    DeletePhoneTemplate_parameters.id = DeletePhoneTemplate_nodeParam || '';
                } else {
                    DeletePhoneTemplate_parameters.id = RED.util.getMessageProperty(msg, DeletePhoneTemplate_nodeParam);
                }
                DeletePhoneTemplate_parameters.id = !!DeletePhoneTemplate_parameters.id ? DeletePhoneTemplate_parameters.id : msg.payload;
                
                DeletePhoneTemplate_nodeParam = node.DeletePhoneTemplate_ifMatch;
                DeletePhoneTemplate_nodeParamType = node.DeletePhoneTemplate_ifMatchType;
                if (DeletePhoneTemplate_nodeParamType === 'str') {
                    DeletePhoneTemplate_parameters.ifMatch = DeletePhoneTemplate_nodeParam || '';
                } else {
                    DeletePhoneTemplate_parameters.ifMatch = RED.util.getMessageProperty(msg, DeletePhoneTemplate_nodeParam);
                }
                DeletePhoneTemplate_parameters.ifMatch = !!DeletePhoneTemplate_parameters.ifMatch ? DeletePhoneTemplate_parameters.ifMatch : msg.payload;
                                result = client.DeletePhoneTemplate(DeletePhoneTemplate_parameters);
            }
            if (!errorFlag && node.method === 'ListPlaylist') {
                var ListPlaylist_parameters = [];
                var ListPlaylist_nodeParam;
                var ListPlaylist_nodeParamType;

                ListPlaylist_nodeParam = node.ListPlaylist_top;
                ListPlaylist_nodeParamType = node.ListPlaylist_topType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.top = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.top = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.top = !!ListPlaylist_parameters.top ? ListPlaylist_parameters.top : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_skip;
                ListPlaylist_nodeParamType = node.ListPlaylist_skipType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.skip = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.skip = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.skip = !!ListPlaylist_parameters.skip ? ListPlaylist_parameters.skip : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_search;
                ListPlaylist_nodeParamType = node.ListPlaylist_searchType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.search = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.search = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.search = !!ListPlaylist_parameters.search ? ListPlaylist_parameters.search : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_filter;
                ListPlaylist_nodeParamType = node.ListPlaylist_filterType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.filter = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.filter = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.filter = !!ListPlaylist_parameters.filter ? ListPlaylist_parameters.filter : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_count;
                ListPlaylist_nodeParamType = node.ListPlaylist_countType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.count = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.count = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.count = !!ListPlaylist_parameters.count ? ListPlaylist_parameters.count : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_orderby;
                ListPlaylist_nodeParamType = node.ListPlaylist_orderbyType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.orderby = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.orderby = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.orderby = !!ListPlaylist_parameters.orderby ? ListPlaylist_parameters.orderby : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_select;
                ListPlaylist_nodeParamType = node.ListPlaylist_selectType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.select = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.select = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.select = !!ListPlaylist_parameters.select ? ListPlaylist_parameters.select : msg.payload;
                
                ListPlaylist_nodeParam = node.ListPlaylist_expand;
                ListPlaylist_nodeParamType = node.ListPlaylist_expandType;
                if (ListPlaylist_nodeParamType === 'str') {
                    ListPlaylist_parameters.expand = ListPlaylist_nodeParam || '';
                } else {
                    ListPlaylist_parameters.expand = RED.util.getMessageProperty(msg, ListPlaylist_nodeParam);
                }
                ListPlaylist_parameters.expand = !!ListPlaylist_parameters.expand ? ListPlaylist_parameters.expand : msg.payload;
                                result = client.ListPlaylist(ListPlaylist_parameters);
            }
            if (!errorFlag && node.method === 'CreatePlaylist') {
                var CreatePlaylist_parameters = [];
                var CreatePlaylist_nodeParam;
                var CreatePlaylist_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreatePlaylist_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreatePlaylist(CreatePlaylist_parameters);
            }
            if (!errorFlag && node.method === 'GetPlaylist') {
                var GetPlaylist_parameters = [];
                var GetPlaylist_nodeParam;
                var GetPlaylist_nodeParamType;

                GetPlaylist_nodeParam = node.GetPlaylist_name;
                GetPlaylist_nodeParamType = node.GetPlaylist_nameType;
                if (GetPlaylist_nodeParamType === 'str') {
                    GetPlaylist_parameters.name = GetPlaylist_nodeParam || '';
                } else {
                    GetPlaylist_parameters.name = RED.util.getMessageProperty(msg, GetPlaylist_nodeParam);
                }
                GetPlaylist_parameters.name = !!GetPlaylist_parameters.name ? GetPlaylist_parameters.name : msg.payload;
                
                GetPlaylist_nodeParam = node.GetPlaylist_select;
                GetPlaylist_nodeParamType = node.GetPlaylist_selectType;
                if (GetPlaylist_nodeParamType === 'str') {
                    GetPlaylist_parameters.select = GetPlaylist_nodeParam || '';
                } else {
                    GetPlaylist_parameters.select = RED.util.getMessageProperty(msg, GetPlaylist_nodeParam);
                }
                GetPlaylist_parameters.select = !!GetPlaylist_parameters.select ? GetPlaylist_parameters.select : msg.payload;
                
                GetPlaylist_nodeParam = node.GetPlaylist_expand;
                GetPlaylist_nodeParamType = node.GetPlaylist_expandType;
                if (GetPlaylist_nodeParamType === 'str') {
                    GetPlaylist_parameters.expand = GetPlaylist_nodeParam || '';
                } else {
                    GetPlaylist_parameters.expand = RED.util.getMessageProperty(msg, GetPlaylist_nodeParam);
                }
                GetPlaylist_parameters.expand = !!GetPlaylist_parameters.expand ? GetPlaylist_parameters.expand : msg.payload;
                                result = client.GetPlaylist(GetPlaylist_parameters);
            }
            if (!errorFlag && node.method === 'UpdatePlaylist') {
                var UpdatePlaylist_parameters = [];
                var UpdatePlaylist_nodeParam;
                var UpdatePlaylist_nodeParamType;

                UpdatePlaylist_nodeParam = node.UpdatePlaylist_name;
                UpdatePlaylist_nodeParamType = node.UpdatePlaylist_nameType;
                if (UpdatePlaylist_nodeParamType === 'str') {
                    UpdatePlaylist_parameters.name = UpdatePlaylist_nodeParam || '';
                } else {
                    UpdatePlaylist_parameters.name = RED.util.getMessageProperty(msg, UpdatePlaylist_nodeParam);
                }
                UpdatePlaylist_parameters.name = !!UpdatePlaylist_parameters.name ? UpdatePlaylist_parameters.name : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdatePlaylist_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdatePlaylist(UpdatePlaylist_parameters);
            }
            if (!errorFlag && node.method === 'DeletePlaylist') {
                var DeletePlaylist_parameters = [];
                var DeletePlaylist_nodeParam;
                var DeletePlaylist_nodeParamType;

                DeletePlaylist_nodeParam = node.DeletePlaylist_name;
                DeletePlaylist_nodeParamType = node.DeletePlaylist_nameType;
                if (DeletePlaylist_nodeParamType === 'str') {
                    DeletePlaylist_parameters.name = DeletePlaylist_nodeParam || '';
                } else {
                    DeletePlaylist_parameters.name = RED.util.getMessageProperty(msg, DeletePlaylist_nodeParam);
                }
                DeletePlaylist_parameters.name = !!DeletePlaylist_parameters.name ? DeletePlaylist_parameters.name : msg.payload;
                
                DeletePlaylist_nodeParam = node.DeletePlaylist_ifMatch;
                DeletePlaylist_nodeParamType = node.DeletePlaylist_ifMatchType;
                if (DeletePlaylist_nodeParamType === 'str') {
                    DeletePlaylist_parameters.ifMatch = DeletePlaylist_nodeParam || '';
                } else {
                    DeletePlaylist_parameters.ifMatch = RED.util.getMessageProperty(msg, DeletePlaylist_nodeParam);
                }
                DeletePlaylist_parameters.ifMatch = !!DeletePlaylist_parameters.ifMatch ? DeletePlaylist_parameters.ifMatch : msg.payload;
                                result = client.DeletePlaylist(DeletePlaylist_parameters);
            }
            if (!errorFlag && node.method === 'DeletePlaylistFile') {
                var DeletePlaylistFile_parameters = [];
                var DeletePlaylistFile_nodeParam;
                var DeletePlaylistFile_nodeParamType;

                if (typeof msg.payload === 'object') {
                    DeletePlaylistFile_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.DeletePlaylistFile(DeletePlaylistFile_parameters);
            }
            if (!errorFlag && node.method === 'DownloadPlaylistFile') {
                var DownloadPlaylistFile_parameters = [];
                var DownloadPlaylistFile_nodeParam;
                var DownloadPlaylistFile_nodeParamType;

                DownloadPlaylistFile_nodeParam = node.DownloadPlaylistFile_playlistKey;
                DownloadPlaylistFile_nodeParamType = node.DownloadPlaylistFile_playlistKeyType;
                if (DownloadPlaylistFile_nodeParamType === 'str') {
                    DownloadPlaylistFile_parameters.playlistKey = DownloadPlaylistFile_nodeParam || '';
                } else {
                    DownloadPlaylistFile_parameters.playlistKey = RED.util.getMessageProperty(msg, DownloadPlaylistFile_nodeParam);
                }
                DownloadPlaylistFile_parameters.playlistKey = !!DownloadPlaylistFile_parameters.playlistKey ? DownloadPlaylistFile_parameters.playlistKey : msg.payload;
                
                DownloadPlaylistFile_nodeParam = node.DownloadPlaylistFile_fileName;
                DownloadPlaylistFile_nodeParamType = node.DownloadPlaylistFile_fileNameType;
                if (DownloadPlaylistFile_nodeParamType === 'str') {
                    DownloadPlaylistFile_parameters.fileName = DownloadPlaylistFile_nodeParam || '';
                } else {
                    DownloadPlaylistFile_parameters.fileName = RED.util.getMessageProperty(msg, DownloadPlaylistFile_nodeParam);
                }
                DownloadPlaylistFile_parameters.fileName = !!DownloadPlaylistFile_parameters.fileName ? DownloadPlaylistFile_parameters.fileName : msg.payload;
                                result = client.DownloadPlaylistFile(DownloadPlaylistFile_parameters);
            }
            if (!errorFlag && node.method === 'ListPromptSet') {
                var ListPromptSet_parameters = [];
                var ListPromptSet_nodeParam;
                var ListPromptSet_nodeParamType;

                ListPromptSet_nodeParam = node.ListPromptSet_top;
                ListPromptSet_nodeParamType = node.ListPromptSet_topType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.top = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.top = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.top = !!ListPromptSet_parameters.top ? ListPromptSet_parameters.top : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_skip;
                ListPromptSet_nodeParamType = node.ListPromptSet_skipType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.skip = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.skip = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.skip = !!ListPromptSet_parameters.skip ? ListPromptSet_parameters.skip : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_search;
                ListPromptSet_nodeParamType = node.ListPromptSet_searchType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.search = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.search = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.search = !!ListPromptSet_parameters.search ? ListPromptSet_parameters.search : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_filter;
                ListPromptSet_nodeParamType = node.ListPromptSet_filterType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.filter = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.filter = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.filter = !!ListPromptSet_parameters.filter ? ListPromptSet_parameters.filter : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_count;
                ListPromptSet_nodeParamType = node.ListPromptSet_countType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.count = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.count = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.count = !!ListPromptSet_parameters.count ? ListPromptSet_parameters.count : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_orderby;
                ListPromptSet_nodeParamType = node.ListPromptSet_orderbyType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.orderby = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.orderby = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.orderby = !!ListPromptSet_parameters.orderby ? ListPromptSet_parameters.orderby : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_select;
                ListPromptSet_nodeParamType = node.ListPromptSet_selectType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.select = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.select = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.select = !!ListPromptSet_parameters.select ? ListPromptSet_parameters.select : msg.payload;
                
                ListPromptSet_nodeParam = node.ListPromptSet_expand;
                ListPromptSet_nodeParamType = node.ListPromptSet_expandType;
                if (ListPromptSet_nodeParamType === 'str') {
                    ListPromptSet_parameters.expand = ListPromptSet_nodeParam || '';
                } else {
                    ListPromptSet_parameters.expand = RED.util.getMessageProperty(msg, ListPromptSet_nodeParam);
                }
                ListPromptSet_parameters.expand = !!ListPromptSet_parameters.expand ? ListPromptSet_parameters.expand : msg.payload;
                                result = client.ListPromptSet(ListPromptSet_parameters);
            }
            if (!errorFlag && node.method === 'GetPromptSet') {
                var GetPromptSet_parameters = [];
                var GetPromptSet_nodeParam;
                var GetPromptSet_nodeParamType;

                GetPromptSet_nodeParam = node.GetPromptSet_id;
                GetPromptSet_nodeParamType = node.GetPromptSet_idType;
                if (GetPromptSet_nodeParamType === 'str') {
                    GetPromptSet_parameters.id = GetPromptSet_nodeParam || '';
                } else {
                    GetPromptSet_parameters.id = RED.util.getMessageProperty(msg, GetPromptSet_nodeParam);
                }
                GetPromptSet_parameters.id = !!GetPromptSet_parameters.id ? GetPromptSet_parameters.id : msg.payload;
                
                GetPromptSet_nodeParam = node.GetPromptSet_select;
                GetPromptSet_nodeParamType = node.GetPromptSet_selectType;
                if (GetPromptSet_nodeParamType === 'str') {
                    GetPromptSet_parameters.select = GetPromptSet_nodeParam || '';
                } else {
                    GetPromptSet_parameters.select = RED.util.getMessageProperty(msg, GetPromptSet_nodeParam);
                }
                GetPromptSet_parameters.select = !!GetPromptSet_parameters.select ? GetPromptSet_parameters.select : msg.payload;
                
                GetPromptSet_nodeParam = node.GetPromptSet_expand;
                GetPromptSet_nodeParamType = node.GetPromptSet_expandType;
                if (GetPromptSet_nodeParamType === 'str') {
                    GetPromptSet_parameters.expand = GetPromptSet_nodeParam || '';
                } else {
                    GetPromptSet_parameters.expand = RED.util.getMessageProperty(msg, GetPromptSet_nodeParam);
                }
                GetPromptSet_parameters.expand = !!GetPromptSet_parameters.expand ? GetPromptSet_parameters.expand : msg.payload;
                                result = client.GetPromptSet(GetPromptSet_parameters);
            }
            if (!errorFlag && node.method === 'UpdatePromptSet') {
                var UpdatePromptSet_parameters = [];
                var UpdatePromptSet_nodeParam;
                var UpdatePromptSet_nodeParamType;

                UpdatePromptSet_nodeParam = node.UpdatePromptSet_id;
                UpdatePromptSet_nodeParamType = node.UpdatePromptSet_idType;
                if (UpdatePromptSet_nodeParamType === 'str') {
                    UpdatePromptSet_parameters.id = UpdatePromptSet_nodeParam || '';
                } else {
                    UpdatePromptSet_parameters.id = RED.util.getMessageProperty(msg, UpdatePromptSet_nodeParam);
                }
                UpdatePromptSet_parameters.id = !!UpdatePromptSet_parameters.id ? UpdatePromptSet_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdatePromptSet_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdatePromptSet(UpdatePromptSet_parameters);
            }
            if (!errorFlag && node.method === 'DeletePromptSet') {
                var DeletePromptSet_parameters = [];
                var DeletePromptSet_nodeParam;
                var DeletePromptSet_nodeParamType;

                DeletePromptSet_nodeParam = node.DeletePromptSet_id;
                DeletePromptSet_nodeParamType = node.DeletePromptSet_idType;
                if (DeletePromptSet_nodeParamType === 'str') {
                    DeletePromptSet_parameters.id = DeletePromptSet_nodeParam || '';
                } else {
                    DeletePromptSet_parameters.id = RED.util.getMessageProperty(msg, DeletePromptSet_nodeParam);
                }
                DeletePromptSet_parameters.id = !!DeletePromptSet_parameters.id ? DeletePromptSet_parameters.id : msg.payload;
                
                DeletePromptSet_nodeParam = node.DeletePromptSet_ifMatch;
                DeletePromptSet_nodeParamType = node.DeletePromptSet_ifMatchType;
                if (DeletePromptSet_nodeParamType === 'str') {
                    DeletePromptSet_parameters.ifMatch = DeletePromptSet_nodeParam || '';
                } else {
                    DeletePromptSet_parameters.ifMatch = RED.util.getMessageProperty(msg, DeletePromptSet_nodeParam);
                }
                DeletePromptSet_parameters.ifMatch = !!DeletePromptSet_parameters.ifMatch ? DeletePromptSet_parameters.ifMatch : msg.payload;
                                result = client.DeletePromptSet(DeletePromptSet_parameters);
            }
            if (!errorFlag && node.method === 'GetActive') {
                var GetActive_parameters = [];
                var GetActive_nodeParam;
                var GetActive_nodeParamType;
                result = client.GetActive(GetActive_parameters);
            }
            if (!errorFlag && node.method === 'ListPrompts') {
                var ListPrompts_parameters = [];
                var ListPrompts_nodeParam;
                var ListPrompts_nodeParamType;

                ListPrompts_nodeParam = node.ListPrompts_id;
                ListPrompts_nodeParamType = node.ListPrompts_idType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.id = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.id = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.id = !!ListPrompts_parameters.id ? ListPrompts_parameters.id : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_top;
                ListPrompts_nodeParamType = node.ListPrompts_topType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.top = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.top = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.top = !!ListPrompts_parameters.top ? ListPrompts_parameters.top : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_skip;
                ListPrompts_nodeParamType = node.ListPrompts_skipType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.skip = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.skip = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.skip = !!ListPrompts_parameters.skip ? ListPrompts_parameters.skip : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_search;
                ListPrompts_nodeParamType = node.ListPrompts_searchType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.search = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.search = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.search = !!ListPrompts_parameters.search ? ListPrompts_parameters.search : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_filter;
                ListPrompts_nodeParamType = node.ListPrompts_filterType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.filter = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.filter = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.filter = !!ListPrompts_parameters.filter ? ListPrompts_parameters.filter : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_count;
                ListPrompts_nodeParamType = node.ListPrompts_countType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.count = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.count = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.count = !!ListPrompts_parameters.count ? ListPrompts_parameters.count : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_orderby;
                ListPrompts_nodeParamType = node.ListPrompts_orderbyType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.orderby = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.orderby = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.orderby = !!ListPrompts_parameters.orderby ? ListPrompts_parameters.orderby : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_select;
                ListPrompts_nodeParamType = node.ListPrompts_selectType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.select = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.select = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.select = !!ListPrompts_parameters.select ? ListPrompts_parameters.select : msg.payload;
                
                ListPrompts_nodeParam = node.ListPrompts_expand;
                ListPrompts_nodeParamType = node.ListPrompts_expandType;
                if (ListPrompts_nodeParamType === 'str') {
                    ListPrompts_parameters.expand = ListPrompts_nodeParam || '';
                } else {
                    ListPrompts_parameters.expand = RED.util.getMessageProperty(msg, ListPrompts_nodeParam);
                }
                ListPrompts_parameters.expand = !!ListPrompts_parameters.expand ? ListPrompts_parameters.expand : msg.payload;
                                result = client.ListPrompts(ListPrompts_parameters);
            }
            if (!errorFlag && node.method === 'SetActive') {
                var SetActive_parameters = [];
                var SetActive_nodeParam;
                var SetActive_nodeParamType;

                SetActive_nodeParam = node.SetActive_id;
                SetActive_nodeParamType = node.SetActive_idType;
                if (SetActive_nodeParamType === 'str') {
                    SetActive_parameters.id = SetActive_nodeParam || '';
                } else {
                    SetActive_parameters.id = RED.util.getMessageProperty(msg, SetActive_nodeParam);
                }
                SetActive_parameters.id = !!SetActive_parameters.id ? SetActive_parameters.id : msg.payload;
                                result = client.SetActive(SetActive_parameters);
            }
            if (!errorFlag && node.method === 'SetAlternatePronunciation') {
                var SetAlternatePronunciation_parameters = [];
                var SetAlternatePronunciation_nodeParam;
                var SetAlternatePronunciation_nodeParamType;

                SetAlternatePronunciation_nodeParam = node.SetAlternatePronunciation_id;
                SetAlternatePronunciation_nodeParamType = node.SetAlternatePronunciation_idType;
                if (SetAlternatePronunciation_nodeParamType === 'str') {
                    SetAlternatePronunciation_parameters.id = SetAlternatePronunciation_nodeParam || '';
                } else {
                    SetAlternatePronunciation_parameters.id = RED.util.getMessageProperty(msg, SetAlternatePronunciation_nodeParam);
                }
                SetAlternatePronunciation_parameters.id = !!SetAlternatePronunciation_parameters.id ? SetAlternatePronunciation_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    SetAlternatePronunciation_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetAlternatePronunciation(SetAlternatePronunciation_parameters);
            }
            if (!errorFlag && node.method === 'Copy') {
                var Copy_parameters = [];
                var Copy_nodeParam;
                var Copy_nodeParamType;

                Copy_nodeParam = node.Copy_id;
                Copy_nodeParamType = node.Copy_idType;
                if (Copy_nodeParamType === 'str') {
                    Copy_parameters.id = Copy_nodeParam || '';
                } else {
                    Copy_parameters.id = RED.util.getMessageProperty(msg, Copy_nodeParam);
                }
                Copy_parameters.id = !!Copy_parameters.id ? Copy_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    Copy_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Copy(Copy_parameters);
            }
            if (!errorFlag && node.method === 'PlayPrompt') {
                var PlayPrompt_parameters = [];
                var PlayPrompt_nodeParam;
                var PlayPrompt_nodeParamType;

                PlayPrompt_nodeParam = node.PlayPrompt_id;
                PlayPrompt_nodeParamType = node.PlayPrompt_idType;
                if (PlayPrompt_nodeParamType === 'str') {
                    PlayPrompt_parameters.id = PlayPrompt_nodeParam || '';
                } else {
                    PlayPrompt_parameters.id = RED.util.getMessageProperty(msg, PlayPrompt_nodeParam);
                }
                PlayPrompt_parameters.id = !!PlayPrompt_parameters.id ? PlayPrompt_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    PlayPrompt_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.PlayPrompt(PlayPrompt_parameters);
            }
            if (!errorFlag && node.method === 'RecordPrompt') {
                var RecordPrompt_parameters = [];
                var RecordPrompt_nodeParam;
                var RecordPrompt_nodeParamType;

                RecordPrompt_nodeParam = node.RecordPrompt_id;
                RecordPrompt_nodeParamType = node.RecordPrompt_idType;
                if (RecordPrompt_nodeParamType === 'str') {
                    RecordPrompt_parameters.id = RecordPrompt_nodeParam || '';
                } else {
                    RecordPrompt_parameters.id = RED.util.getMessageProperty(msg, RecordPrompt_nodeParam);
                }
                RecordPrompt_parameters.id = !!RecordPrompt_parameters.id ? RecordPrompt_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    RecordPrompt_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.RecordPrompt(RecordPrompt_parameters);
            }
            if (!errorFlag && node.method === 'PurgeCalls') {
                var PurgeCalls_parameters = [];
                var PurgeCalls_nodeParam;
                var PurgeCalls_nodeParamType;

                if (typeof msg.payload === 'object') {
                    PurgeCalls_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.PurgeCalls(PurgeCalls_parameters);
            }
            if (!errorFlag && node.method === 'PurgeChats') {
                var PurgeChats_parameters = [];
                var PurgeChats_nodeParam;
                var PurgeChats_nodeParamType;

                if (typeof msg.payload === 'object') {
                    PurgeChats_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.PurgeChats(PurgeChats_parameters);
            }
            if (!errorFlag && node.method === 'ListAgents') {
                var ListAgents_parameters = [];
                var ListAgents_nodeParam;
                var ListAgents_nodeParamType;

                ListAgents_nodeParam = node.ListAgents_id;
                ListAgents_nodeParamType = node.ListAgents_idType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.id = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.id = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.id = !!ListAgents_parameters.id ? ListAgents_parameters.id : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_top;
                ListAgents_nodeParamType = node.ListAgents_topType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.top = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.top = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.top = !!ListAgents_parameters.top ? ListAgents_parameters.top : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_skip;
                ListAgents_nodeParamType = node.ListAgents_skipType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.skip = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.skip = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.skip = !!ListAgents_parameters.skip ? ListAgents_parameters.skip : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_search;
                ListAgents_nodeParamType = node.ListAgents_searchType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.search = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.search = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.search = !!ListAgents_parameters.search ? ListAgents_parameters.search : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_filter;
                ListAgents_nodeParamType = node.ListAgents_filterType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.filter = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.filter = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.filter = !!ListAgents_parameters.filter ? ListAgents_parameters.filter : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_count;
                ListAgents_nodeParamType = node.ListAgents_countType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.count = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.count = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.count = !!ListAgents_parameters.count ? ListAgents_parameters.count : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_orderby;
                ListAgents_nodeParamType = node.ListAgents_orderbyType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.orderby = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.orderby = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.orderby = !!ListAgents_parameters.orderby ? ListAgents_parameters.orderby : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_select;
                ListAgents_nodeParamType = node.ListAgents_selectType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.select = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.select = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.select = !!ListAgents_parameters.select ? ListAgents_parameters.select : msg.payload;
                
                ListAgents_nodeParam = node.ListAgents_expand;
                ListAgents_nodeParamType = node.ListAgents_expandType;
                if (ListAgents_nodeParamType === 'str') {
                    ListAgents_parameters.expand = ListAgents_nodeParam || '';
                } else {
                    ListAgents_parameters.expand = RED.util.getMessageProperty(msg, ListAgents_nodeParam);
                }
                ListAgents_parameters.expand = !!ListAgents_parameters.expand ? ListAgents_parameters.expand : msg.payload;
                                result = client.ListAgents(ListAgents_parameters);
            }
            if (!errorFlag && node.method === 'ListManagers') {
                var ListManagers_parameters = [];
                var ListManagers_nodeParam;
                var ListManagers_nodeParamType;

                ListManagers_nodeParam = node.ListManagers_id;
                ListManagers_nodeParamType = node.ListManagers_idType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.id = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.id = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.id = !!ListManagers_parameters.id ? ListManagers_parameters.id : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_top;
                ListManagers_nodeParamType = node.ListManagers_topType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.top = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.top = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.top = !!ListManagers_parameters.top ? ListManagers_parameters.top : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_skip;
                ListManagers_nodeParamType = node.ListManagers_skipType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.skip = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.skip = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.skip = !!ListManagers_parameters.skip ? ListManagers_parameters.skip : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_search;
                ListManagers_nodeParamType = node.ListManagers_searchType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.search = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.search = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.search = !!ListManagers_parameters.search ? ListManagers_parameters.search : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_filter;
                ListManagers_nodeParamType = node.ListManagers_filterType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.filter = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.filter = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.filter = !!ListManagers_parameters.filter ? ListManagers_parameters.filter : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_count;
                ListManagers_nodeParamType = node.ListManagers_countType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.count = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.count = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.count = !!ListManagers_parameters.count ? ListManagers_parameters.count : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_orderby;
                ListManagers_nodeParamType = node.ListManagers_orderbyType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.orderby = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.orderby = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.orderby = !!ListManagers_parameters.orderby ? ListManagers_parameters.orderby : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_select;
                ListManagers_nodeParamType = node.ListManagers_selectType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.select = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.select = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.select = !!ListManagers_parameters.select ? ListManagers_parameters.select : msg.payload;
                
                ListManagers_nodeParam = node.ListManagers_expand;
                ListManagers_nodeParamType = node.ListManagers_expandType;
                if (ListManagers_nodeParamType === 'str') {
                    ListManagers_parameters.expand = ListManagers_nodeParam || '';
                } else {
                    ListManagers_parameters.expand = RED.util.getMessageProperty(msg, ListManagers_nodeParam);
                }
                ListManagers_parameters.expand = !!ListManagers_parameters.expand ? ListManagers_parameters.expand : msg.payload;
                                result = client.ListManagers(ListManagers_parameters);
            }
            if (!errorFlag && node.method === 'ResetQueueStatistics') {
                var ResetQueueStatistics_parameters = [];
                var ResetQueueStatistics_nodeParam;
                var ResetQueueStatistics_nodeParamType;

                ResetQueueStatistics_nodeParam = node.ResetQueueStatistics_id;
                ResetQueueStatistics_nodeParamType = node.ResetQueueStatistics_idType;
                if (ResetQueueStatistics_nodeParamType === 'str') {
                    ResetQueueStatistics_parameters.id = ResetQueueStatistics_nodeParam || '';
                } else {
                    ResetQueueStatistics_parameters.id = RED.util.getMessageProperty(msg, ResetQueueStatistics_nodeParam);
                }
                ResetQueueStatistics_parameters.id = !!ResetQueueStatistics_parameters.id ? ResetQueueStatistics_parameters.id : msg.payload;
                                result = client.ResetQueueStatistics(ResetQueueStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetFirstAvailableQueueNumber') {
                var GetFirstAvailableQueueNumber_parameters = [];
                var GetFirstAvailableQueueNumber_nodeParam;
                var GetFirstAvailableQueueNumber_nodeParamType;
                result = client.GetFirstAvailableQueueNumber(GetFirstAvailableQueueNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueByNumber') {
                var GetQueueByNumber_parameters = [];
                var GetQueueByNumber_nodeParam;
                var GetQueueByNumber_nodeParamType;

                GetQueueByNumber_nodeParam = node.GetQueueByNumber_number;
                GetQueueByNumber_nodeParamType = node.GetQueueByNumber_numberType;
                if (GetQueueByNumber_nodeParamType === 'str') {
                    GetQueueByNumber_parameters.number = GetQueueByNumber_nodeParam || '';
                } else {
                    GetQueueByNumber_parameters.number = RED.util.getMessageProperty(msg, GetQueueByNumber_nodeParam);
                }
                GetQueueByNumber_parameters.number = !!GetQueueByNumber_parameters.number ? GetQueueByNumber_parameters.number : msg.payload;
                                result = client.GetQueueByNumber(GetQueueByNumber_parameters);
            }
            if (!errorFlag && node.method === 'ListQueue') {
                var ListQueue_parameters = [];
                var ListQueue_nodeParam;
                var ListQueue_nodeParamType;

                ListQueue_nodeParam = node.ListQueue_top;
                ListQueue_nodeParamType = node.ListQueue_topType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.top = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.top = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.top = !!ListQueue_parameters.top ? ListQueue_parameters.top : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_skip;
                ListQueue_nodeParamType = node.ListQueue_skipType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.skip = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.skip = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.skip = !!ListQueue_parameters.skip ? ListQueue_parameters.skip : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_search;
                ListQueue_nodeParamType = node.ListQueue_searchType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.search = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.search = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.search = !!ListQueue_parameters.search ? ListQueue_parameters.search : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_filter;
                ListQueue_nodeParamType = node.ListQueue_filterType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.filter = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.filter = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.filter = !!ListQueue_parameters.filter ? ListQueue_parameters.filter : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_count;
                ListQueue_nodeParamType = node.ListQueue_countType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.count = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.count = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.count = !!ListQueue_parameters.count ? ListQueue_parameters.count : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_orderby;
                ListQueue_nodeParamType = node.ListQueue_orderbyType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.orderby = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.orderby = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.orderby = !!ListQueue_parameters.orderby ? ListQueue_parameters.orderby : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_select;
                ListQueue_nodeParamType = node.ListQueue_selectType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.select = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.select = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.select = !!ListQueue_parameters.select ? ListQueue_parameters.select : msg.payload;
                
                ListQueue_nodeParam = node.ListQueue_expand;
                ListQueue_nodeParamType = node.ListQueue_expandType;
                if (ListQueue_nodeParamType === 'str') {
                    ListQueue_parameters.expand = ListQueue_nodeParam || '';
                } else {
                    ListQueue_parameters.expand = RED.util.getMessageProperty(msg, ListQueue_nodeParam);
                }
                ListQueue_parameters.expand = !!ListQueue_parameters.expand ? ListQueue_parameters.expand : msg.payload;
                                result = client.ListQueue(ListQueue_parameters);
            }
            if (!errorFlag && node.method === 'CreateQueue') {
                var CreateQueue_parameters = [];
                var CreateQueue_nodeParam;
                var CreateQueue_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateQueue_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateQueue(CreateQueue_parameters);
            }
            if (!errorFlag && node.method === 'GetQueue') {
                var GetQueue_parameters = [];
                var GetQueue_nodeParam;
                var GetQueue_nodeParamType;

                GetQueue_nodeParam = node.GetQueue_id;
                GetQueue_nodeParamType = node.GetQueue_idType;
                if (GetQueue_nodeParamType === 'str') {
                    GetQueue_parameters.id = GetQueue_nodeParam || '';
                } else {
                    GetQueue_parameters.id = RED.util.getMessageProperty(msg, GetQueue_nodeParam);
                }
                GetQueue_parameters.id = !!GetQueue_parameters.id ? GetQueue_parameters.id : msg.payload;
                
                GetQueue_nodeParam = node.GetQueue_select;
                GetQueue_nodeParamType = node.GetQueue_selectType;
                if (GetQueue_nodeParamType === 'str') {
                    GetQueue_parameters.select = GetQueue_nodeParam || '';
                } else {
                    GetQueue_parameters.select = RED.util.getMessageProperty(msg, GetQueue_nodeParam);
                }
                GetQueue_parameters.select = !!GetQueue_parameters.select ? GetQueue_parameters.select : msg.payload;
                
                GetQueue_nodeParam = node.GetQueue_expand;
                GetQueue_nodeParamType = node.GetQueue_expandType;
                if (GetQueue_nodeParamType === 'str') {
                    GetQueue_parameters.expand = GetQueue_nodeParam || '';
                } else {
                    GetQueue_parameters.expand = RED.util.getMessageProperty(msg, GetQueue_nodeParam);
                }
                GetQueue_parameters.expand = !!GetQueue_parameters.expand ? GetQueue_parameters.expand : msg.payload;
                                result = client.GetQueue(GetQueue_parameters);
            }
            if (!errorFlag && node.method === 'UpdateQueue') {
                var UpdateQueue_parameters = [];
                var UpdateQueue_nodeParam;
                var UpdateQueue_nodeParamType;

                UpdateQueue_nodeParam = node.UpdateQueue_id;
                UpdateQueue_nodeParamType = node.UpdateQueue_idType;
                if (UpdateQueue_nodeParamType === 'str') {
                    UpdateQueue_parameters.id = UpdateQueue_nodeParam || '';
                } else {
                    UpdateQueue_parameters.id = RED.util.getMessageProperty(msg, UpdateQueue_nodeParam);
                }
                UpdateQueue_parameters.id = !!UpdateQueue_parameters.id ? UpdateQueue_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateQueue_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateQueue(UpdateQueue_parameters);
            }
            if (!errorFlag && node.method === 'DeleteQueue') {
                var DeleteQueue_parameters = [];
                var DeleteQueue_nodeParam;
                var DeleteQueue_nodeParamType;

                DeleteQueue_nodeParam = node.DeleteQueue_id;
                DeleteQueue_nodeParamType = node.DeleteQueue_idType;
                if (DeleteQueue_nodeParamType === 'str') {
                    DeleteQueue_parameters.id = DeleteQueue_nodeParam || '';
                } else {
                    DeleteQueue_parameters.id = RED.util.getMessageProperty(msg, DeleteQueue_nodeParam);
                }
                DeleteQueue_parameters.id = !!DeleteQueue_parameters.id ? DeleteQueue_parameters.id : msg.payload;
                
                DeleteQueue_nodeParam = node.DeleteQueue_ifMatch;
                DeleteQueue_nodeParamType = node.DeleteQueue_ifMatchType;
                if (DeleteQueue_nodeParamType === 'str') {
                    DeleteQueue_parameters.ifMatch = DeleteQueue_nodeParam || '';
                } else {
                    DeleteQueue_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteQueue_nodeParam);
                }
                DeleteQueue_parameters.ifMatch = !!DeleteQueue_parameters.ifMatch ? DeleteQueue_parameters.ifMatch : msg.payload;
                                result = client.DeleteQueue(DeleteQueue_parameters);
            }
            if (!errorFlag && node.method === 'ListForwards') {
                var ListForwards_parameters = [];
                var ListForwards_nodeParam;
                var ListForwards_nodeParamType;

                ListForwards_nodeParam = node.ListForwards_id;
                ListForwards_nodeParamType = node.ListForwards_idType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.id = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.id = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.id = !!ListForwards_parameters.id ? ListForwards_parameters.id : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_top;
                ListForwards_nodeParamType = node.ListForwards_topType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.top = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.top = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.top = !!ListForwards_parameters.top ? ListForwards_parameters.top : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_skip;
                ListForwards_nodeParamType = node.ListForwards_skipType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.skip = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.skip = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.skip = !!ListForwards_parameters.skip ? ListForwards_parameters.skip : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_search;
                ListForwards_nodeParamType = node.ListForwards_searchType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.search = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.search = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.search = !!ListForwards_parameters.search ? ListForwards_parameters.search : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_filter;
                ListForwards_nodeParamType = node.ListForwards_filterType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.filter = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.filter = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.filter = !!ListForwards_parameters.filter ? ListForwards_parameters.filter : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_count;
                ListForwards_nodeParamType = node.ListForwards_countType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.count = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.count = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.count = !!ListForwards_parameters.count ? ListForwards_parameters.count : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_orderby;
                ListForwards_nodeParamType = node.ListForwards_orderbyType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.orderby = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.orderby = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.orderby = !!ListForwards_parameters.orderby ? ListForwards_parameters.orderby : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_select;
                ListForwards_nodeParamType = node.ListForwards_selectType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.select = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.select = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.select = !!ListForwards_parameters.select ? ListForwards_parameters.select : msg.payload;
                
                ListForwards_nodeParam = node.ListForwards_expand;
                ListForwards_nodeParamType = node.ListForwards_expandType;
                if (ListForwards_nodeParamType === 'str') {
                    ListForwards_parameters.expand = ListForwards_nodeParam || '';
                } else {
                    ListForwards_parameters.expand = RED.util.getMessageProperty(msg, ListForwards_nodeParam);
                }
                ListForwards_parameters.expand = !!ListForwards_parameters.expand ? ListForwards_parameters.expand : msg.payload;
                                result = client.ListForwards(ListForwards_parameters);
            }
            if (!errorFlag && node.method === 'GetFirstAvailableReceptionistNumber') {
                var GetFirstAvailableReceptionistNumber_parameters = [];
                var GetFirstAvailableReceptionistNumber_nodeParam;
                var GetFirstAvailableReceptionistNumber_nodeParamType;
                result = client.GetFirstAvailableReceptionistNumber(GetFirstAvailableReceptionistNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetReceptionistByNumber') {
                var GetReceptionistByNumber_parameters = [];
                var GetReceptionistByNumber_nodeParam;
                var GetReceptionistByNumber_nodeParamType;

                GetReceptionistByNumber_nodeParam = node.GetReceptionistByNumber_number;
                GetReceptionistByNumber_nodeParamType = node.GetReceptionistByNumber_numberType;
                if (GetReceptionistByNumber_nodeParamType === 'str') {
                    GetReceptionistByNumber_parameters.number = GetReceptionistByNumber_nodeParam || '';
                } else {
                    GetReceptionistByNumber_parameters.number = RED.util.getMessageProperty(msg, GetReceptionistByNumber_nodeParam);
                }
                GetReceptionistByNumber_parameters.number = !!GetReceptionistByNumber_parameters.number ? GetReceptionistByNumber_parameters.number : msg.payload;
                                result = client.GetReceptionistByNumber(GetReceptionistByNumber_parameters);
            }
            if (!errorFlag && node.method === 'ListReceptionist') {
                var ListReceptionist_parameters = [];
                var ListReceptionist_nodeParam;
                var ListReceptionist_nodeParamType;

                ListReceptionist_nodeParam = node.ListReceptionist_top;
                ListReceptionist_nodeParamType = node.ListReceptionist_topType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.top = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.top = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.top = !!ListReceptionist_parameters.top ? ListReceptionist_parameters.top : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_skip;
                ListReceptionist_nodeParamType = node.ListReceptionist_skipType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.skip = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.skip = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.skip = !!ListReceptionist_parameters.skip ? ListReceptionist_parameters.skip : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_search;
                ListReceptionist_nodeParamType = node.ListReceptionist_searchType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.search = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.search = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.search = !!ListReceptionist_parameters.search ? ListReceptionist_parameters.search : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_filter;
                ListReceptionist_nodeParamType = node.ListReceptionist_filterType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.filter = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.filter = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.filter = !!ListReceptionist_parameters.filter ? ListReceptionist_parameters.filter : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_count;
                ListReceptionist_nodeParamType = node.ListReceptionist_countType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.count = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.count = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.count = !!ListReceptionist_parameters.count ? ListReceptionist_parameters.count : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_orderby;
                ListReceptionist_nodeParamType = node.ListReceptionist_orderbyType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.orderby = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.orderby = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.orderby = !!ListReceptionist_parameters.orderby ? ListReceptionist_parameters.orderby : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_select;
                ListReceptionist_nodeParamType = node.ListReceptionist_selectType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.select = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.select = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.select = !!ListReceptionist_parameters.select ? ListReceptionist_parameters.select : msg.payload;
                
                ListReceptionist_nodeParam = node.ListReceptionist_expand;
                ListReceptionist_nodeParamType = node.ListReceptionist_expandType;
                if (ListReceptionist_nodeParamType === 'str') {
                    ListReceptionist_parameters.expand = ListReceptionist_nodeParam || '';
                } else {
                    ListReceptionist_parameters.expand = RED.util.getMessageProperty(msg, ListReceptionist_nodeParam);
                }
                ListReceptionist_parameters.expand = !!ListReceptionist_parameters.expand ? ListReceptionist_parameters.expand : msg.payload;
                                result = client.ListReceptionist(ListReceptionist_parameters);
            }
            if (!errorFlag && node.method === 'CreateReceptionist') {
                var CreateReceptionist_parameters = [];
                var CreateReceptionist_nodeParam;
                var CreateReceptionist_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateReceptionist_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateReceptionist(CreateReceptionist_parameters);
            }
            if (!errorFlag && node.method === 'GetReceptionist') {
                var GetReceptionist_parameters = [];
                var GetReceptionist_nodeParam;
                var GetReceptionist_nodeParamType;

                GetReceptionist_nodeParam = node.GetReceptionist_id;
                GetReceptionist_nodeParamType = node.GetReceptionist_idType;
                if (GetReceptionist_nodeParamType === 'str') {
                    GetReceptionist_parameters.id = GetReceptionist_nodeParam || '';
                } else {
                    GetReceptionist_parameters.id = RED.util.getMessageProperty(msg, GetReceptionist_nodeParam);
                }
                GetReceptionist_parameters.id = !!GetReceptionist_parameters.id ? GetReceptionist_parameters.id : msg.payload;
                
                GetReceptionist_nodeParam = node.GetReceptionist_select;
                GetReceptionist_nodeParamType = node.GetReceptionist_selectType;
                if (GetReceptionist_nodeParamType === 'str') {
                    GetReceptionist_parameters.select = GetReceptionist_nodeParam || '';
                } else {
                    GetReceptionist_parameters.select = RED.util.getMessageProperty(msg, GetReceptionist_nodeParam);
                }
                GetReceptionist_parameters.select = !!GetReceptionist_parameters.select ? GetReceptionist_parameters.select : msg.payload;
                
                GetReceptionist_nodeParam = node.GetReceptionist_expand;
                GetReceptionist_nodeParamType = node.GetReceptionist_expandType;
                if (GetReceptionist_nodeParamType === 'str') {
                    GetReceptionist_parameters.expand = GetReceptionist_nodeParam || '';
                } else {
                    GetReceptionist_parameters.expand = RED.util.getMessageProperty(msg, GetReceptionist_nodeParam);
                }
                GetReceptionist_parameters.expand = !!GetReceptionist_parameters.expand ? GetReceptionist_parameters.expand : msg.payload;
                                result = client.GetReceptionist(GetReceptionist_parameters);
            }
            if (!errorFlag && node.method === 'UpdateReceptionist') {
                var UpdateReceptionist_parameters = [];
                var UpdateReceptionist_nodeParam;
                var UpdateReceptionist_nodeParamType;

                UpdateReceptionist_nodeParam = node.UpdateReceptionist_id;
                UpdateReceptionist_nodeParamType = node.UpdateReceptionist_idType;
                if (UpdateReceptionist_nodeParamType === 'str') {
                    UpdateReceptionist_parameters.id = UpdateReceptionist_nodeParam || '';
                } else {
                    UpdateReceptionist_parameters.id = RED.util.getMessageProperty(msg, UpdateReceptionist_nodeParam);
                }
                UpdateReceptionist_parameters.id = !!UpdateReceptionist_parameters.id ? UpdateReceptionist_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateReceptionist_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateReceptionist(UpdateReceptionist_parameters);
            }
            if (!errorFlag && node.method === 'DeleteReceptionist') {
                var DeleteReceptionist_parameters = [];
                var DeleteReceptionist_nodeParam;
                var DeleteReceptionist_nodeParamType;

                DeleteReceptionist_nodeParam = node.DeleteReceptionist_id;
                DeleteReceptionist_nodeParamType = node.DeleteReceptionist_idType;
                if (DeleteReceptionist_nodeParamType === 'str') {
                    DeleteReceptionist_parameters.id = DeleteReceptionist_nodeParam || '';
                } else {
                    DeleteReceptionist_parameters.id = RED.util.getMessageProperty(msg, DeleteReceptionist_nodeParam);
                }
                DeleteReceptionist_parameters.id = !!DeleteReceptionist_parameters.id ? DeleteReceptionist_parameters.id : msg.payload;
                
                DeleteReceptionist_nodeParam = node.DeleteReceptionist_ifMatch;
                DeleteReceptionist_nodeParamType = node.DeleteReceptionist_ifMatchType;
                if (DeleteReceptionist_nodeParamType === 'str') {
                    DeleteReceptionist_parameters.ifMatch = DeleteReceptionist_nodeParam || '';
                } else {
                    DeleteReceptionist_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteReceptionist_nodeParam);
                }
                DeleteReceptionist_parameters.ifMatch = !!DeleteReceptionist_parameters.ifMatch ? DeleteReceptionist_parameters.ifMatch : msg.payload;
                                result = client.DeleteReceptionist(DeleteReceptionist_parameters);
            }
            if (!errorFlag && node.method === 'ListRecording') {
                var ListRecording_parameters = [];
                var ListRecording_nodeParam;
                var ListRecording_nodeParamType;

                ListRecording_nodeParam = node.ListRecording_top;
                ListRecording_nodeParamType = node.ListRecording_topType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.top = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.top = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.top = !!ListRecording_parameters.top ? ListRecording_parameters.top : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_skip;
                ListRecording_nodeParamType = node.ListRecording_skipType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.skip = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.skip = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.skip = !!ListRecording_parameters.skip ? ListRecording_parameters.skip : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_search;
                ListRecording_nodeParamType = node.ListRecording_searchType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.search = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.search = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.search = !!ListRecording_parameters.search ? ListRecording_parameters.search : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_filter;
                ListRecording_nodeParamType = node.ListRecording_filterType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.filter = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.filter = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.filter = !!ListRecording_parameters.filter ? ListRecording_parameters.filter : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_count;
                ListRecording_nodeParamType = node.ListRecording_countType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.count = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.count = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.count = !!ListRecording_parameters.count ? ListRecording_parameters.count : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_orderby;
                ListRecording_nodeParamType = node.ListRecording_orderbyType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.orderby = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.orderby = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.orderby = !!ListRecording_parameters.orderby ? ListRecording_parameters.orderby : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_select;
                ListRecording_nodeParamType = node.ListRecording_selectType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.select = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.select = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.select = !!ListRecording_parameters.select ? ListRecording_parameters.select : msg.payload;
                
                ListRecording_nodeParam = node.ListRecording_expand;
                ListRecording_nodeParamType = node.ListRecording_expandType;
                if (ListRecording_nodeParamType === 'str') {
                    ListRecording_parameters.expand = ListRecording_nodeParam || '';
                } else {
                    ListRecording_parameters.expand = RED.util.getMessageProperty(msg, ListRecording_nodeParam);
                }
                ListRecording_parameters.expand = !!ListRecording_parameters.expand ? ListRecording_parameters.expand : msg.payload;
                                result = client.ListRecording(ListRecording_parameters);
            }
            if (!errorFlag && node.method === 'DownloadRecording') {
                var DownloadRecording_parameters = [];
                var DownloadRecording_nodeParam;
                var DownloadRecording_nodeParamType;

                DownloadRecording_nodeParam = node.DownloadRecording_recId;
                DownloadRecording_nodeParamType = node.DownloadRecording_recIdType;
                if (DownloadRecording_nodeParamType === 'str') {
                    DownloadRecording_parameters.recId = DownloadRecording_nodeParam || '';
                } else {
                    DownloadRecording_parameters.recId = RED.util.getMessageProperty(msg, DownloadRecording_nodeParam);
                }
                DownloadRecording_parameters.recId = !!DownloadRecording_parameters.recId ? DownloadRecording_parameters.recId : msg.payload;
                                result = client.DownloadRecording(DownloadRecording_parameters);
            }
            if (!errorFlag && node.method === 'GetRecordingRepositorySettings') {
                var GetRecordingRepositorySettings_parameters = [];
                var GetRecordingRepositorySettings_nodeParam;
                var GetRecordingRepositorySettings_nodeParamType;
                result = client.GetRecordingRepositorySettings(GetRecordingRepositorySettings_parameters);
            }
            if (!errorFlag && node.method === 'SetRecordingRepositorySettings') {
                var SetRecordingRepositorySettings_parameters = [];
                var SetRecordingRepositorySettings_nodeParam;
                var SetRecordingRepositorySettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetRecordingRepositorySettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetRecordingRepositorySettings(SetRecordingRepositorySettings_parameters);
            }
            if (!errorFlag && node.method === 'GetRecordingSettings') {
                var GetRecordingSettings_parameters = [];
                var GetRecordingSettings_nodeParam;
                var GetRecordingSettings_nodeParamType;
                result = client.GetRecordingSettings(GetRecordingSettings_parameters);
            }
            if (!errorFlag && node.method === 'SetRecordingSettings') {
                var SetRecordingSettings_parameters = [];
                var SetRecordingSettings_nodeParam;
                var SetRecordingSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetRecordingSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetRecordingSettings(SetRecordingSettings_parameters);
            }
            if (!errorFlag && node.method === 'PurgeLocal') {
                var PurgeLocal_parameters = [];
                var PurgeLocal_nodeParam;
                var PurgeLocal_nodeParamType;
                result = client.PurgeLocal(PurgeLocal_parameters);
            }
            if (!errorFlag && node.method === 'PurgeArchive') {
                var PurgeArchive_parameters = [];
                var PurgeArchive_nodeParam;
                var PurgeArchive_nodeParamType;
                result = client.PurgeArchive(PurgeArchive_parameters);
            }
            if (!errorFlag && node.method === 'Archive') {
                var Archive_parameters = [];
                var Archive_nodeParam;
                var Archive_nodeParamType;
                result = client.Archive(Archive_parameters);
            }
            if (!errorFlag && node.method === 'BulkRecordingsDelete') {
                var BulkRecordingsDelete_parameters = [];
                var BulkRecordingsDelete_nodeParam;
                var BulkRecordingsDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkRecordingsDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkRecordingsDelete(BulkRecordingsDelete_parameters);
            }
            if (!errorFlag && node.method === 'BulkRecordingsArchive') {
                var BulkRecordingsArchive_parameters = [];
                var BulkRecordingsArchive_nodeParam;
                var BulkRecordingsArchive_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkRecordingsArchive_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkRecordingsArchive(BulkRecordingsArchive_parameters);
            }
            if (!errorFlag && node.method === 'GetAbandonedChatsStatisticsData') {
                var GetAbandonedChatsStatisticsData_parameters = [];
                var GetAbandonedChatsStatisticsData_nodeParam;
                var GetAbandonedChatsStatisticsData_nodeParamType;

                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_queueDnStr;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_queueDnStrType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.queueDnStr = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.queueDnStr = !!GetAbandonedChatsStatisticsData_parameters.queueDnStr ? GetAbandonedChatsStatisticsData_parameters.queueDnStr : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_startDt;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_startDtType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.startDt = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.startDt = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.startDt = !!GetAbandonedChatsStatisticsData_parameters.startDt ? GetAbandonedChatsStatisticsData_parameters.startDt : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_endDt;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_endDtType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.endDt = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.endDt = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.endDt = !!GetAbandonedChatsStatisticsData_parameters.endDt ? GetAbandonedChatsStatisticsData_parameters.endDt : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_participantType;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_participantTypeType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.participantType = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.participantType = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.participantType = !!GetAbandonedChatsStatisticsData_parameters.participantType ? GetAbandonedChatsStatisticsData_parameters.participantType : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_top;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_topType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.top = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.top = !!GetAbandonedChatsStatisticsData_parameters.top ? GetAbandonedChatsStatisticsData_parameters.top : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_skip;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_skipType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.skip = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.skip = !!GetAbandonedChatsStatisticsData_parameters.skip ? GetAbandonedChatsStatisticsData_parameters.skip : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_search;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_searchType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.search = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.search = !!GetAbandonedChatsStatisticsData_parameters.search ? GetAbandonedChatsStatisticsData_parameters.search : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_filter;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_filterType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.filter = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.filter = !!GetAbandonedChatsStatisticsData_parameters.filter ? GetAbandonedChatsStatisticsData_parameters.filter : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_count;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_countType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.count = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.count = !!GetAbandonedChatsStatisticsData_parameters.count ? GetAbandonedChatsStatisticsData_parameters.count : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_select;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_selectType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.select = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.select = !!GetAbandonedChatsStatisticsData_parameters.select ? GetAbandonedChatsStatisticsData_parameters.select : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_orderby;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_orderbyType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.orderby = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.orderby = !!GetAbandonedChatsStatisticsData_parameters.orderby ? GetAbandonedChatsStatisticsData_parameters.orderby : msg.payload;
                
                GetAbandonedChatsStatisticsData_nodeParam = node.GetAbandonedChatsStatisticsData_expand;
                GetAbandonedChatsStatisticsData_nodeParamType = node.GetAbandonedChatsStatisticsData_expandType;
                if (GetAbandonedChatsStatisticsData_nodeParamType === 'str') {
                    GetAbandonedChatsStatisticsData_parameters.expand = GetAbandonedChatsStatisticsData_nodeParam || '';
                } else {
                    GetAbandonedChatsStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetAbandonedChatsStatisticsData_nodeParam);
                }
                GetAbandonedChatsStatisticsData_parameters.expand = !!GetAbandonedChatsStatisticsData_parameters.expand ? GetAbandonedChatsStatisticsData_parameters.expand : msg.payload;
                                result = client.GetAbandonedChatsStatisticsData(GetAbandonedChatsStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadAbandonedChatsStatistics') {
                var DownloadAbandonedChatsStatistics_parameters = [];
                var DownloadAbandonedChatsStatistics_nodeParam;
                var DownloadAbandonedChatsStatistics_nodeParamType;

                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_queueDnStr;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_queueDnStrType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.queueDnStr = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.queueDnStr = !!DownloadAbandonedChatsStatistics_parameters.queueDnStr ? DownloadAbandonedChatsStatistics_parameters.queueDnStr : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_startDt;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_startDtType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.startDt = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.startDt = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.startDt = !!DownloadAbandonedChatsStatistics_parameters.startDt ? DownloadAbandonedChatsStatistics_parameters.startDt : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_endDt;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_endDtType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.endDt = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.endDt = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.endDt = !!DownloadAbandonedChatsStatistics_parameters.endDt ? DownloadAbandonedChatsStatistics_parameters.endDt : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_participantType;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_participantTypeType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.participantType = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.participantType = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.participantType = !!DownloadAbandonedChatsStatistics_parameters.participantType ? DownloadAbandonedChatsStatistics_parameters.participantType : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_clientTimeZone;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_clientTimeZoneType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.clientTimeZone = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.clientTimeZone = !!DownloadAbandonedChatsStatistics_parameters.clientTimeZone ? DownloadAbandonedChatsStatistics_parameters.clientTimeZone : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_top;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_topType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.top = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.top = !!DownloadAbandonedChatsStatistics_parameters.top ? DownloadAbandonedChatsStatistics_parameters.top : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_skip;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_skipType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.skip = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.skip = !!DownloadAbandonedChatsStatistics_parameters.skip ? DownloadAbandonedChatsStatistics_parameters.skip : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_search;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_searchType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.search = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.search = !!DownloadAbandonedChatsStatistics_parameters.search ? DownloadAbandonedChatsStatistics_parameters.search : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_filter;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_filterType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.filter = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.filter = !!DownloadAbandonedChatsStatistics_parameters.filter ? DownloadAbandonedChatsStatistics_parameters.filter : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_count;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_countType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.count = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.count = !!DownloadAbandonedChatsStatistics_parameters.count ? DownloadAbandonedChatsStatistics_parameters.count : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_select;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_selectType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.select = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.select = !!DownloadAbandonedChatsStatistics_parameters.select ? DownloadAbandonedChatsStatistics_parameters.select : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_orderby;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_orderbyType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.orderby = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.orderby = !!DownloadAbandonedChatsStatistics_parameters.orderby ? DownloadAbandonedChatsStatistics_parameters.orderby : msg.payload;
                
                DownloadAbandonedChatsStatistics_nodeParam = node.DownloadAbandonedChatsStatistics_expand;
                DownloadAbandonedChatsStatistics_nodeParamType = node.DownloadAbandonedChatsStatistics_expandType;
                if (DownloadAbandonedChatsStatistics_nodeParamType === 'str') {
                    DownloadAbandonedChatsStatistics_parameters.expand = DownloadAbandonedChatsStatistics_nodeParam || '';
                } else {
                    DownloadAbandonedChatsStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadAbandonedChatsStatistics_nodeParam);
                }
                DownloadAbandonedChatsStatistics_parameters.expand = !!DownloadAbandonedChatsStatistics_parameters.expand ? DownloadAbandonedChatsStatistics_parameters.expand : msg.payload;
                                result = client.DownloadAbandonedChatsStatistics(DownloadAbandonedChatsStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetAbandonedQueueCallsData') {
                var GetAbandonedQueueCallsData_parameters = [];
                var GetAbandonedQueueCallsData_nodeParam;
                var GetAbandonedQueueCallsData_nodeParamType;

                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_periodFrom;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_periodFromType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.periodFrom = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.periodFrom = !!GetAbandonedQueueCallsData_parameters.periodFrom ? GetAbandonedQueueCallsData_parameters.periodFrom : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_periodTo;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_periodToType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.periodTo = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.periodTo = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.periodTo = !!GetAbandonedQueueCallsData_parameters.periodTo ? GetAbandonedQueueCallsData_parameters.periodTo : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_queueDns;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_queueDnsType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.queueDns = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.queueDns = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.queueDns = !!GetAbandonedQueueCallsData_parameters.queueDns ? GetAbandonedQueueCallsData_parameters.queueDns : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_waitInterval;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_waitIntervalType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.waitInterval = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.waitInterval = !!GetAbandonedQueueCallsData_parameters.waitInterval ? GetAbandonedQueueCallsData_parameters.waitInterval : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_top;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_topType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.top = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.top = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.top = !!GetAbandonedQueueCallsData_parameters.top ? GetAbandonedQueueCallsData_parameters.top : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_skip;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_skipType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.skip = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.skip = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.skip = !!GetAbandonedQueueCallsData_parameters.skip ? GetAbandonedQueueCallsData_parameters.skip : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_search;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_searchType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.search = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.search = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.search = !!GetAbandonedQueueCallsData_parameters.search ? GetAbandonedQueueCallsData_parameters.search : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_filter;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_filterType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.filter = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.filter = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.filter = !!GetAbandonedQueueCallsData_parameters.filter ? GetAbandonedQueueCallsData_parameters.filter : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_count;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_countType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.count = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.count = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.count = !!GetAbandonedQueueCallsData_parameters.count ? GetAbandonedQueueCallsData_parameters.count : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_select;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_selectType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.select = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.select = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.select = !!GetAbandonedQueueCallsData_parameters.select ? GetAbandonedQueueCallsData_parameters.select : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_orderby;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_orderbyType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.orderby = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.orderby = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.orderby = !!GetAbandonedQueueCallsData_parameters.orderby ? GetAbandonedQueueCallsData_parameters.orderby : msg.payload;
                
                GetAbandonedQueueCallsData_nodeParam = node.GetAbandonedQueueCallsData_expand;
                GetAbandonedQueueCallsData_nodeParamType = node.GetAbandonedQueueCallsData_expandType;
                if (GetAbandonedQueueCallsData_nodeParamType === 'str') {
                    GetAbandonedQueueCallsData_parameters.expand = GetAbandonedQueueCallsData_nodeParam || '';
                } else {
                    GetAbandonedQueueCallsData_parameters.expand = RED.util.getMessageProperty(msg, GetAbandonedQueueCallsData_nodeParam);
                }
                GetAbandonedQueueCallsData_parameters.expand = !!GetAbandonedQueueCallsData_parameters.expand ? GetAbandonedQueueCallsData_parameters.expand : msg.payload;
                                result = client.GetAbandonedQueueCallsData(GetAbandonedQueueCallsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadAbandonedQueueCalls') {
                var DownloadAbandonedQueueCalls_parameters = [];
                var DownloadAbandonedQueueCalls_nodeParam;
                var DownloadAbandonedQueueCalls_nodeParamType;

                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_periodFrom;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_periodFromType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.periodFrom = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.periodFrom = !!DownloadAbandonedQueueCalls_parameters.periodFrom ? DownloadAbandonedQueueCalls_parameters.periodFrom : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_periodTo;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_periodToType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.periodTo = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.periodTo = !!DownloadAbandonedQueueCalls_parameters.periodTo ? DownloadAbandonedQueueCalls_parameters.periodTo : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_queueDns;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_queueDnsType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.queueDns = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.queueDns = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.queueDns = !!DownloadAbandonedQueueCalls_parameters.queueDns ? DownloadAbandonedQueueCalls_parameters.queueDns : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_waitInterval;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_waitIntervalType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.waitInterval = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.waitInterval = !!DownloadAbandonedQueueCalls_parameters.waitInterval ? DownloadAbandonedQueueCalls_parameters.waitInterval : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_clientTimeZone;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_clientTimeZoneType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.clientTimeZone = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.clientTimeZone = !!DownloadAbandonedQueueCalls_parameters.clientTimeZone ? DownloadAbandonedQueueCalls_parameters.clientTimeZone : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_top;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_topType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.top = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.top = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.top = !!DownloadAbandonedQueueCalls_parameters.top ? DownloadAbandonedQueueCalls_parameters.top : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_skip;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_skipType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.skip = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.skip = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.skip = !!DownloadAbandonedQueueCalls_parameters.skip ? DownloadAbandonedQueueCalls_parameters.skip : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_search;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_searchType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.search = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.search = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.search = !!DownloadAbandonedQueueCalls_parameters.search ? DownloadAbandonedQueueCalls_parameters.search : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_filter;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_filterType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.filter = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.filter = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.filter = !!DownloadAbandonedQueueCalls_parameters.filter ? DownloadAbandonedQueueCalls_parameters.filter : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_count;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_countType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.count = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.count = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.count = !!DownloadAbandonedQueueCalls_parameters.count ? DownloadAbandonedQueueCalls_parameters.count : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_select;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_selectType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.select = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.select = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.select = !!DownloadAbandonedQueueCalls_parameters.select ? DownloadAbandonedQueueCalls_parameters.select : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_orderby;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_orderbyType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.orderby = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.orderby = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.orderby = !!DownloadAbandonedQueueCalls_parameters.orderby ? DownloadAbandonedQueueCalls_parameters.orderby : msg.payload;
                
                DownloadAbandonedQueueCalls_nodeParam = node.DownloadAbandonedQueueCalls_expand;
                DownloadAbandonedQueueCalls_nodeParamType = node.DownloadAbandonedQueueCalls_expandType;
                if (DownloadAbandonedQueueCalls_nodeParamType === 'str') {
                    DownloadAbandonedQueueCalls_parameters.expand = DownloadAbandonedQueueCalls_nodeParam || '';
                } else {
                    DownloadAbandonedQueueCalls_parameters.expand = RED.util.getMessageProperty(msg, DownloadAbandonedQueueCalls_nodeParam);
                }
                DownloadAbandonedQueueCalls_parameters.expand = !!DownloadAbandonedQueueCalls_parameters.expand ? DownloadAbandonedQueueCalls_parameters.expand : msg.payload;
                                result = client.DownloadAbandonedQueueCalls(DownloadAbandonedQueueCalls_parameters);
            }
            if (!errorFlag && node.method === 'GetAgentLoginHistoryData') {
                var GetAgentLoginHistoryData_parameters = [];
                var GetAgentLoginHistoryData_nodeParam;
                var GetAgentLoginHistoryData_nodeParamType;

                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_clientTimeZone;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_clientTimeZoneType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.clientTimeZone = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.clientTimeZone = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.clientTimeZone = !!GetAgentLoginHistoryData_parameters.clientTimeZone ? GetAgentLoginHistoryData_parameters.clientTimeZone : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_startDt;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_startDtType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.startDt = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.startDt = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.startDt = !!GetAgentLoginHistoryData_parameters.startDt ? GetAgentLoginHistoryData_parameters.startDt : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_endDt;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_endDtType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.endDt = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.endDt = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.endDt = !!GetAgentLoginHistoryData_parameters.endDt ? GetAgentLoginHistoryData_parameters.endDt : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_queueDnStr;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_queueDnStrType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.queueDnStr = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.queueDnStr = !!GetAgentLoginHistoryData_parameters.queueDnStr ? GetAgentLoginHistoryData_parameters.queueDnStr : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_agentDnStr;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_agentDnStrType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.agentDnStr = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.agentDnStr = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.agentDnStr = !!GetAgentLoginHistoryData_parameters.agentDnStr ? GetAgentLoginHistoryData_parameters.agentDnStr : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_top;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_topType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.top = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.top = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.top = !!GetAgentLoginHistoryData_parameters.top ? GetAgentLoginHistoryData_parameters.top : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_skip;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_skipType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.skip = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.skip = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.skip = !!GetAgentLoginHistoryData_parameters.skip ? GetAgentLoginHistoryData_parameters.skip : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_search;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_searchType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.search = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.search = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.search = !!GetAgentLoginHistoryData_parameters.search ? GetAgentLoginHistoryData_parameters.search : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_filter;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_filterType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.filter = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.filter = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.filter = !!GetAgentLoginHistoryData_parameters.filter ? GetAgentLoginHistoryData_parameters.filter : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_count;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_countType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.count = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.count = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.count = !!GetAgentLoginHistoryData_parameters.count ? GetAgentLoginHistoryData_parameters.count : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_select;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_selectType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.select = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.select = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.select = !!GetAgentLoginHistoryData_parameters.select ? GetAgentLoginHistoryData_parameters.select : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_orderby;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_orderbyType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.orderby = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.orderby = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.orderby = !!GetAgentLoginHistoryData_parameters.orderby ? GetAgentLoginHistoryData_parameters.orderby : msg.payload;
                
                GetAgentLoginHistoryData_nodeParam = node.GetAgentLoginHistoryData_expand;
                GetAgentLoginHistoryData_nodeParamType = node.GetAgentLoginHistoryData_expandType;
                if (GetAgentLoginHistoryData_nodeParamType === 'str') {
                    GetAgentLoginHistoryData_parameters.expand = GetAgentLoginHistoryData_nodeParam || '';
                } else {
                    GetAgentLoginHistoryData_parameters.expand = RED.util.getMessageProperty(msg, GetAgentLoginHistoryData_nodeParam);
                }
                GetAgentLoginHistoryData_parameters.expand = !!GetAgentLoginHistoryData_parameters.expand ? GetAgentLoginHistoryData_parameters.expand : msg.payload;
                                result = client.GetAgentLoginHistoryData(GetAgentLoginHistoryData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadAgentLoginHistory') {
                var DownloadAgentLoginHistory_parameters = [];
                var DownloadAgentLoginHistory_nodeParam;
                var DownloadAgentLoginHistory_nodeParamType;

                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_clientTimeZone;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_clientTimeZoneType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.clientTimeZone = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.clientTimeZone = !!DownloadAgentLoginHistory_parameters.clientTimeZone ? DownloadAgentLoginHistory_parameters.clientTimeZone : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_startDt;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_startDtType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.startDt = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.startDt = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.startDt = !!DownloadAgentLoginHistory_parameters.startDt ? DownloadAgentLoginHistory_parameters.startDt : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_endDt;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_endDtType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.endDt = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.endDt = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.endDt = !!DownloadAgentLoginHistory_parameters.endDt ? DownloadAgentLoginHistory_parameters.endDt : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_queueDnStr;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_queueDnStrType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.queueDnStr = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.queueDnStr = !!DownloadAgentLoginHistory_parameters.queueDnStr ? DownloadAgentLoginHistory_parameters.queueDnStr : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_agentDnStr;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_agentDnStrType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.agentDnStr = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.agentDnStr = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.agentDnStr = !!DownloadAgentLoginHistory_parameters.agentDnStr ? DownloadAgentLoginHistory_parameters.agentDnStr : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_top;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_topType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.top = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.top = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.top = !!DownloadAgentLoginHistory_parameters.top ? DownloadAgentLoginHistory_parameters.top : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_skip;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_skipType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.skip = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.skip = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.skip = !!DownloadAgentLoginHistory_parameters.skip ? DownloadAgentLoginHistory_parameters.skip : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_search;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_searchType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.search = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.search = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.search = !!DownloadAgentLoginHistory_parameters.search ? DownloadAgentLoginHistory_parameters.search : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_filter;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_filterType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.filter = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.filter = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.filter = !!DownloadAgentLoginHistory_parameters.filter ? DownloadAgentLoginHistory_parameters.filter : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_count;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_countType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.count = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.count = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.count = !!DownloadAgentLoginHistory_parameters.count ? DownloadAgentLoginHistory_parameters.count : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_select;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_selectType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.select = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.select = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.select = !!DownloadAgentLoginHistory_parameters.select ? DownloadAgentLoginHistory_parameters.select : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_orderby;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_orderbyType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.orderby = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.orderby = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.orderby = !!DownloadAgentLoginHistory_parameters.orderby ? DownloadAgentLoginHistory_parameters.orderby : msg.payload;
                
                DownloadAgentLoginHistory_nodeParam = node.DownloadAgentLoginHistory_expand;
                DownloadAgentLoginHistory_nodeParamType = node.DownloadAgentLoginHistory_expandType;
                if (DownloadAgentLoginHistory_nodeParamType === 'str') {
                    DownloadAgentLoginHistory_parameters.expand = DownloadAgentLoginHistory_nodeParam || '';
                } else {
                    DownloadAgentLoginHistory_parameters.expand = RED.util.getMessageProperty(msg, DownloadAgentLoginHistory_nodeParam);
                }
                DownloadAgentLoginHistory_parameters.expand = !!DownloadAgentLoginHistory_parameters.expand ? DownloadAgentLoginHistory_parameters.expand : msg.payload;
                                result = client.DownloadAgentLoginHistory(DownloadAgentLoginHistory_parameters);
            }
            if (!errorFlag && node.method === 'GetAgentsInQueueStatisticsData') {
                var GetAgentsInQueueStatisticsData_parameters = [];
                var GetAgentsInQueueStatisticsData_nodeParam;
                var GetAgentsInQueueStatisticsData_nodeParamType;

                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_queueDnStr;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_queueDnStrType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.queueDnStr = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.queueDnStr = !!GetAgentsInQueueStatisticsData_parameters.queueDnStr ? GetAgentsInQueueStatisticsData_parameters.queueDnStr : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_startDt;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_startDtType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.startDt = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.startDt = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.startDt = !!GetAgentsInQueueStatisticsData_parameters.startDt ? GetAgentsInQueueStatisticsData_parameters.startDt : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_endDt;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_endDtType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.endDt = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.endDt = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.endDt = !!GetAgentsInQueueStatisticsData_parameters.endDt ? GetAgentsInQueueStatisticsData_parameters.endDt : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_waitInterval;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_waitIntervalType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.waitInterval = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.waitInterval = !!GetAgentsInQueueStatisticsData_parameters.waitInterval ? GetAgentsInQueueStatisticsData_parameters.waitInterval : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_top;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_topType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.top = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.top = !!GetAgentsInQueueStatisticsData_parameters.top ? GetAgentsInQueueStatisticsData_parameters.top : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_skip;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_skipType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.skip = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.skip = !!GetAgentsInQueueStatisticsData_parameters.skip ? GetAgentsInQueueStatisticsData_parameters.skip : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_search;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_searchType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.search = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.search = !!GetAgentsInQueueStatisticsData_parameters.search ? GetAgentsInQueueStatisticsData_parameters.search : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_filter;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_filterType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.filter = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.filter = !!GetAgentsInQueueStatisticsData_parameters.filter ? GetAgentsInQueueStatisticsData_parameters.filter : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_count;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_countType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.count = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.count = !!GetAgentsInQueueStatisticsData_parameters.count ? GetAgentsInQueueStatisticsData_parameters.count : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_select;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_selectType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.select = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.select = !!GetAgentsInQueueStatisticsData_parameters.select ? GetAgentsInQueueStatisticsData_parameters.select : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_orderby;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_orderbyType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.orderby = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.orderby = !!GetAgentsInQueueStatisticsData_parameters.orderby ? GetAgentsInQueueStatisticsData_parameters.orderby : msg.payload;
                
                GetAgentsInQueueStatisticsData_nodeParam = node.GetAgentsInQueueStatisticsData_expand;
                GetAgentsInQueueStatisticsData_nodeParamType = node.GetAgentsInQueueStatisticsData_expandType;
                if (GetAgentsInQueueStatisticsData_nodeParamType === 'str') {
                    GetAgentsInQueueStatisticsData_parameters.expand = GetAgentsInQueueStatisticsData_nodeParam || '';
                } else {
                    GetAgentsInQueueStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetAgentsInQueueStatisticsData_nodeParam);
                }
                GetAgentsInQueueStatisticsData_parameters.expand = !!GetAgentsInQueueStatisticsData_parameters.expand ? GetAgentsInQueueStatisticsData_parameters.expand : msg.payload;
                                result = client.GetAgentsInQueueStatisticsData(GetAgentsInQueueStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadAgentsInQueueStatistics') {
                var DownloadAgentsInQueueStatistics_parameters = [];
                var DownloadAgentsInQueueStatistics_nodeParam;
                var DownloadAgentsInQueueStatistics_nodeParamType;

                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_queueDnStr;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_queueDnStrType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.queueDnStr = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.queueDnStr = !!DownloadAgentsInQueueStatistics_parameters.queueDnStr ? DownloadAgentsInQueueStatistics_parameters.queueDnStr : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_startDt;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_startDtType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.startDt = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.startDt = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.startDt = !!DownloadAgentsInQueueStatistics_parameters.startDt ? DownloadAgentsInQueueStatistics_parameters.startDt : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_endDt;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_endDtType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.endDt = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.endDt = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.endDt = !!DownloadAgentsInQueueStatistics_parameters.endDt ? DownloadAgentsInQueueStatistics_parameters.endDt : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_waitInterval;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_waitIntervalType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.waitInterval = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.waitInterval = !!DownloadAgentsInQueueStatistics_parameters.waitInterval ? DownloadAgentsInQueueStatistics_parameters.waitInterval : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_top;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_topType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.top = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.top = !!DownloadAgentsInQueueStatistics_parameters.top ? DownloadAgentsInQueueStatistics_parameters.top : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_skip;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_skipType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.skip = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.skip = !!DownloadAgentsInQueueStatistics_parameters.skip ? DownloadAgentsInQueueStatistics_parameters.skip : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_search;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_searchType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.search = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.search = !!DownloadAgentsInQueueStatistics_parameters.search ? DownloadAgentsInQueueStatistics_parameters.search : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_filter;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_filterType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.filter = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.filter = !!DownloadAgentsInQueueStatistics_parameters.filter ? DownloadAgentsInQueueStatistics_parameters.filter : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_count;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_countType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.count = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.count = !!DownloadAgentsInQueueStatistics_parameters.count ? DownloadAgentsInQueueStatistics_parameters.count : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_select;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_selectType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.select = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.select = !!DownloadAgentsInQueueStatistics_parameters.select ? DownloadAgentsInQueueStatistics_parameters.select : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_orderby;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_orderbyType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.orderby = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.orderby = !!DownloadAgentsInQueueStatistics_parameters.orderby ? DownloadAgentsInQueueStatistics_parameters.orderby : msg.payload;
                
                DownloadAgentsInQueueStatistics_nodeParam = node.DownloadAgentsInQueueStatistics_expand;
                DownloadAgentsInQueueStatistics_nodeParamType = node.DownloadAgentsInQueueStatistics_expandType;
                if (DownloadAgentsInQueueStatistics_nodeParamType === 'str') {
                    DownloadAgentsInQueueStatistics_parameters.expand = DownloadAgentsInQueueStatistics_nodeParam || '';
                } else {
                    DownloadAgentsInQueueStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadAgentsInQueueStatistics_nodeParam);
                }
                DownloadAgentsInQueueStatistics_parameters.expand = !!DownloadAgentsInQueueStatistics_parameters.expand ? DownloadAgentsInQueueStatistics_parameters.expand : msg.payload;
                                result = client.DownloadAgentsInQueueStatistics(DownloadAgentsInQueueStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetAuditLogData') {
                var GetAuditLogData_parameters = [];
                var GetAuditLogData_nodeParam;
                var GetAuditLogData_nodeParamType;

                GetAuditLogData_nodeParam = node.GetAuditLogData_top;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_topType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.top = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.top = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.top = !!GetAuditLogData_parameters.top ? GetAuditLogData_parameters.top : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_skip;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_skipType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.skip = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.skip = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.skip = !!GetAuditLogData_parameters.skip ? GetAuditLogData_parameters.skip : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_search;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_searchType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.search = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.search = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.search = !!GetAuditLogData_parameters.search ? GetAuditLogData_parameters.search : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_filter;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_filterType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.filter = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.filter = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.filter = !!GetAuditLogData_parameters.filter ? GetAuditLogData_parameters.filter : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_count;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_countType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.count = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.count = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.count = !!GetAuditLogData_parameters.count ? GetAuditLogData_parameters.count : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_select;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_selectType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.select = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.select = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.select = !!GetAuditLogData_parameters.select ? GetAuditLogData_parameters.select : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_orderby;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_orderbyType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.orderby = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.orderby = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.orderby = !!GetAuditLogData_parameters.orderby ? GetAuditLogData_parameters.orderby : msg.payload;
                
                GetAuditLogData_nodeParam = node.GetAuditLogData_expand;
                GetAuditLogData_nodeParamType = node.GetAuditLogData_expandType;
                if (GetAuditLogData_nodeParamType === 'str') {
                    GetAuditLogData_parameters.expand = GetAuditLogData_nodeParam || '';
                } else {
                    GetAuditLogData_parameters.expand = RED.util.getMessageProperty(msg, GetAuditLogData_nodeParam);
                }
                GetAuditLogData_parameters.expand = !!GetAuditLogData_parameters.expand ? GetAuditLogData_parameters.expand : msg.payload;
                                result = client.GetAuditLogData(GetAuditLogData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadAuditLog') {
                var DownloadAuditLog_parameters = [];
                var DownloadAuditLog_nodeParam;
                var DownloadAuditLog_nodeParamType;

                DownloadAuditLog_nodeParam = node.DownloadAuditLog_clientTimeZone;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_clientTimeZoneType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.clientTimeZone = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.clientTimeZone = !!DownloadAuditLog_parameters.clientTimeZone ? DownloadAuditLog_parameters.clientTimeZone : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_top;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_topType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.top = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.top = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.top = !!DownloadAuditLog_parameters.top ? DownloadAuditLog_parameters.top : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_skip;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_skipType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.skip = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.skip = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.skip = !!DownloadAuditLog_parameters.skip ? DownloadAuditLog_parameters.skip : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_search;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_searchType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.search = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.search = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.search = !!DownloadAuditLog_parameters.search ? DownloadAuditLog_parameters.search : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_filter;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_filterType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.filter = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.filter = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.filter = !!DownloadAuditLog_parameters.filter ? DownloadAuditLog_parameters.filter : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_count;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_countType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.count = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.count = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.count = !!DownloadAuditLog_parameters.count ? DownloadAuditLog_parameters.count : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_select;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_selectType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.select = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.select = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.select = !!DownloadAuditLog_parameters.select ? DownloadAuditLog_parameters.select : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_orderby;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_orderbyType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.orderby = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.orderby = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.orderby = !!DownloadAuditLog_parameters.orderby ? DownloadAuditLog_parameters.orderby : msg.payload;
                
                DownloadAuditLog_nodeParam = node.DownloadAuditLog_expand;
                DownloadAuditLog_nodeParamType = node.DownloadAuditLog_expandType;
                if (DownloadAuditLog_nodeParamType === 'str') {
                    DownloadAuditLog_parameters.expand = DownloadAuditLog_nodeParam || '';
                } else {
                    DownloadAuditLog_parameters.expand = RED.util.getMessageProperty(msg, DownloadAuditLog_nodeParam);
                }
                DownloadAuditLog_parameters.expand = !!DownloadAuditLog_parameters.expand ? DownloadAuditLog_parameters.expand : msg.payload;
                                result = client.DownloadAuditLog(DownloadAuditLog_parameters);
            }
            if (!errorFlag && node.method === 'GetAverageQueueWaitingTimeData') {
                var GetAverageQueueWaitingTimeData_parameters = [];
                var GetAverageQueueWaitingTimeData_nodeParam;
                var GetAverageQueueWaitingTimeData_nodeParamType;

                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_chartDate;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_chartDateType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.chartDate = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.chartDate = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.chartDate = !!GetAverageQueueWaitingTimeData_parameters.chartDate ? GetAverageQueueWaitingTimeData_parameters.chartDate : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_chartBy;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_chartByType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.chartBy = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.chartBy = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.chartBy = !!GetAverageQueueWaitingTimeData_parameters.chartBy ? GetAverageQueueWaitingTimeData_parameters.chartBy : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_queueDnStr;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_queueDnStrType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.queueDnStr = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.queueDnStr = !!GetAverageQueueWaitingTimeData_parameters.queueDnStr ? GetAverageQueueWaitingTimeData_parameters.queueDnStr : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_waitInterval;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_waitIntervalType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.waitInterval = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.waitInterval = !!GetAverageQueueWaitingTimeData_parameters.waitInterval ? GetAverageQueueWaitingTimeData_parameters.waitInterval : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_clientTimeZone;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_clientTimeZoneType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.clientTimeZone = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.clientTimeZone = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.clientTimeZone = !!GetAverageQueueWaitingTimeData_parameters.clientTimeZone ? GetAverageQueueWaitingTimeData_parameters.clientTimeZone : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_top;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_topType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.top = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.top = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.top = !!GetAverageQueueWaitingTimeData_parameters.top ? GetAverageQueueWaitingTimeData_parameters.top : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_skip;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_skipType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.skip = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.skip = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.skip = !!GetAverageQueueWaitingTimeData_parameters.skip ? GetAverageQueueWaitingTimeData_parameters.skip : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_search;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_searchType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.search = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.search = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.search = !!GetAverageQueueWaitingTimeData_parameters.search ? GetAverageQueueWaitingTimeData_parameters.search : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_filter;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_filterType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.filter = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.filter = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.filter = !!GetAverageQueueWaitingTimeData_parameters.filter ? GetAverageQueueWaitingTimeData_parameters.filter : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_count;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_countType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.count = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.count = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.count = !!GetAverageQueueWaitingTimeData_parameters.count ? GetAverageQueueWaitingTimeData_parameters.count : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_select;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_selectType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.select = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.select = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.select = !!GetAverageQueueWaitingTimeData_parameters.select ? GetAverageQueueWaitingTimeData_parameters.select : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_orderby;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_orderbyType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.orderby = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.orderby = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.orderby = !!GetAverageQueueWaitingTimeData_parameters.orderby ? GetAverageQueueWaitingTimeData_parameters.orderby : msg.payload;
                
                GetAverageQueueWaitingTimeData_nodeParam = node.GetAverageQueueWaitingTimeData_expand;
                GetAverageQueueWaitingTimeData_nodeParamType = node.GetAverageQueueWaitingTimeData_expandType;
                if (GetAverageQueueWaitingTimeData_nodeParamType === 'str') {
                    GetAverageQueueWaitingTimeData_parameters.expand = GetAverageQueueWaitingTimeData_nodeParam || '';
                } else {
                    GetAverageQueueWaitingTimeData_parameters.expand = RED.util.getMessageProperty(msg, GetAverageQueueWaitingTimeData_nodeParam);
                }
                GetAverageQueueWaitingTimeData_parameters.expand = !!GetAverageQueueWaitingTimeData_parameters.expand ? GetAverageQueueWaitingTimeData_parameters.expand : msg.payload;
                                result = client.GetAverageQueueWaitingTimeData(GetAverageQueueWaitingTimeData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadAverageQueueWaitingTimeReport') {
                var DownloadAverageQueueWaitingTimeReport_parameters = [];
                var DownloadAverageQueueWaitingTimeReport_nodeParam;
                var DownloadAverageQueueWaitingTimeReport_nodeParamType;

                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_chartDate;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_chartDateType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.chartDate = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.chartDate = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.chartDate = !!DownloadAverageQueueWaitingTimeReport_parameters.chartDate ? DownloadAverageQueueWaitingTimeReport_parameters.chartDate : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_chartBy;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_chartByType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.chartBy = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.chartBy = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.chartBy = !!DownloadAverageQueueWaitingTimeReport_parameters.chartBy ? DownloadAverageQueueWaitingTimeReport_parameters.chartBy : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_queueDnStr;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_queueDnStrType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.queueDnStr = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.queueDnStr = !!DownloadAverageQueueWaitingTimeReport_parameters.queueDnStr ? DownloadAverageQueueWaitingTimeReport_parameters.queueDnStr : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_waitInterval;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_waitIntervalType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.waitInterval = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.waitInterval = !!DownloadAverageQueueWaitingTimeReport_parameters.waitInterval ? DownloadAverageQueueWaitingTimeReport_parameters.waitInterval : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_clientTimeZone;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_clientTimeZoneType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.clientTimeZone = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.clientTimeZone = !!DownloadAverageQueueWaitingTimeReport_parameters.clientTimeZone ? DownloadAverageQueueWaitingTimeReport_parameters.clientTimeZone : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_top;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_topType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.top = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.top = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.top = !!DownloadAverageQueueWaitingTimeReport_parameters.top ? DownloadAverageQueueWaitingTimeReport_parameters.top : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_skip;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_skipType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.skip = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.skip = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.skip = !!DownloadAverageQueueWaitingTimeReport_parameters.skip ? DownloadAverageQueueWaitingTimeReport_parameters.skip : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_search;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_searchType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.search = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.search = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.search = !!DownloadAverageQueueWaitingTimeReport_parameters.search ? DownloadAverageQueueWaitingTimeReport_parameters.search : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_filter;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_filterType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.filter = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.filter = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.filter = !!DownloadAverageQueueWaitingTimeReport_parameters.filter ? DownloadAverageQueueWaitingTimeReport_parameters.filter : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_count;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_countType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.count = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.count = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.count = !!DownloadAverageQueueWaitingTimeReport_parameters.count ? DownloadAverageQueueWaitingTimeReport_parameters.count : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_select;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_selectType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.select = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.select = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.select = !!DownloadAverageQueueWaitingTimeReport_parameters.select ? DownloadAverageQueueWaitingTimeReport_parameters.select : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_orderby;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_orderbyType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.orderby = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.orderby = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.orderby = !!DownloadAverageQueueWaitingTimeReport_parameters.orderby ? DownloadAverageQueueWaitingTimeReport_parameters.orderby : msg.payload;
                
                DownloadAverageQueueWaitingTimeReport_nodeParam = node.DownloadAverageQueueWaitingTimeReport_expand;
                DownloadAverageQueueWaitingTimeReport_nodeParamType = node.DownloadAverageQueueWaitingTimeReport_expandType;
                if (DownloadAverageQueueWaitingTimeReport_nodeParamType === 'str') {
                    DownloadAverageQueueWaitingTimeReport_parameters.expand = DownloadAverageQueueWaitingTimeReport_nodeParam || '';
                } else {
                    DownloadAverageQueueWaitingTimeReport_parameters.expand = RED.util.getMessageProperty(msg, DownloadAverageQueueWaitingTimeReport_nodeParam);
                }
                DownloadAverageQueueWaitingTimeReport_parameters.expand = !!DownloadAverageQueueWaitingTimeReport_parameters.expand ? DownloadAverageQueueWaitingTimeReport_parameters.expand : msg.payload;
                                result = client.DownloadAverageQueueWaitingTimeReport(DownloadAverageQueueWaitingTimeReport_parameters);
            }
            if (!errorFlag && node.method === 'GetBreachesSlaData') {
                var GetBreachesSlaData_parameters = [];
                var GetBreachesSlaData_nodeParam;
                var GetBreachesSlaData_nodeParamType;

                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_queueDnStr;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_queueDnStrType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.queueDnStr = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.queueDnStr = !!GetBreachesSlaData_parameters.queueDnStr ? GetBreachesSlaData_parameters.queueDnStr : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_startDt;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_startDtType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.startDt = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.startDt = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.startDt = !!GetBreachesSlaData_parameters.startDt ? GetBreachesSlaData_parameters.startDt : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_endDt;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_endDtType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.endDt = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.endDt = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.endDt = !!GetBreachesSlaData_parameters.endDt ? GetBreachesSlaData_parameters.endDt : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_waitInterval;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_waitIntervalType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.waitInterval = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.waitInterval = !!GetBreachesSlaData_parameters.waitInterval ? GetBreachesSlaData_parameters.waitInterval : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_top;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_topType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.top = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.top = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.top = !!GetBreachesSlaData_parameters.top ? GetBreachesSlaData_parameters.top : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_skip;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_skipType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.skip = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.skip = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.skip = !!GetBreachesSlaData_parameters.skip ? GetBreachesSlaData_parameters.skip : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_search;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_searchType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.search = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.search = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.search = !!GetBreachesSlaData_parameters.search ? GetBreachesSlaData_parameters.search : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_filter;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_filterType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.filter = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.filter = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.filter = !!GetBreachesSlaData_parameters.filter ? GetBreachesSlaData_parameters.filter : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_count;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_countType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.count = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.count = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.count = !!GetBreachesSlaData_parameters.count ? GetBreachesSlaData_parameters.count : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_select;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_selectType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.select = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.select = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.select = !!GetBreachesSlaData_parameters.select ? GetBreachesSlaData_parameters.select : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_orderby;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_orderbyType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.orderby = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.orderby = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.orderby = !!GetBreachesSlaData_parameters.orderby ? GetBreachesSlaData_parameters.orderby : msg.payload;
                
                GetBreachesSlaData_nodeParam = node.GetBreachesSlaData_expand;
                GetBreachesSlaData_nodeParamType = node.GetBreachesSlaData_expandType;
                if (GetBreachesSlaData_nodeParamType === 'str') {
                    GetBreachesSlaData_parameters.expand = GetBreachesSlaData_nodeParam || '';
                } else {
                    GetBreachesSlaData_parameters.expand = RED.util.getMessageProperty(msg, GetBreachesSlaData_nodeParam);
                }
                GetBreachesSlaData_parameters.expand = !!GetBreachesSlaData_parameters.expand ? GetBreachesSlaData_parameters.expand : msg.payload;
                                result = client.GetBreachesSlaData(GetBreachesSlaData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadBreachesSla') {
                var DownloadBreachesSla_parameters = [];
                var DownloadBreachesSla_nodeParam;
                var DownloadBreachesSla_nodeParamType;

                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_queueDnStr;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_queueDnStrType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.queueDnStr = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.queueDnStr = !!DownloadBreachesSla_parameters.queueDnStr ? DownloadBreachesSla_parameters.queueDnStr : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_startDt;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_startDtType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.startDt = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.startDt = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.startDt = !!DownloadBreachesSla_parameters.startDt ? DownloadBreachesSla_parameters.startDt : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_endDt;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_endDtType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.endDt = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.endDt = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.endDt = !!DownloadBreachesSla_parameters.endDt ? DownloadBreachesSla_parameters.endDt : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_waitInterval;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_waitIntervalType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.waitInterval = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.waitInterval = !!DownloadBreachesSla_parameters.waitInterval ? DownloadBreachesSla_parameters.waitInterval : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_clientTimeZone;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_clientTimeZoneType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.clientTimeZone = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.clientTimeZone = !!DownloadBreachesSla_parameters.clientTimeZone ? DownloadBreachesSla_parameters.clientTimeZone : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_top;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_topType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.top = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.top = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.top = !!DownloadBreachesSla_parameters.top ? DownloadBreachesSla_parameters.top : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_skip;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_skipType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.skip = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.skip = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.skip = !!DownloadBreachesSla_parameters.skip ? DownloadBreachesSla_parameters.skip : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_search;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_searchType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.search = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.search = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.search = !!DownloadBreachesSla_parameters.search ? DownloadBreachesSla_parameters.search : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_filter;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_filterType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.filter = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.filter = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.filter = !!DownloadBreachesSla_parameters.filter ? DownloadBreachesSla_parameters.filter : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_count;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_countType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.count = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.count = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.count = !!DownloadBreachesSla_parameters.count ? DownloadBreachesSla_parameters.count : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_select;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_selectType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.select = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.select = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.select = !!DownloadBreachesSla_parameters.select ? DownloadBreachesSla_parameters.select : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_orderby;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_orderbyType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.orderby = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.orderby = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.orderby = !!DownloadBreachesSla_parameters.orderby ? DownloadBreachesSla_parameters.orderby : msg.payload;
                
                DownloadBreachesSla_nodeParam = node.DownloadBreachesSla_expand;
                DownloadBreachesSla_nodeParamType = node.DownloadBreachesSla_expandType;
                if (DownloadBreachesSla_nodeParamType === 'str') {
                    DownloadBreachesSla_parameters.expand = DownloadBreachesSla_nodeParam || '';
                } else {
                    DownloadBreachesSla_parameters.expand = RED.util.getMessageProperty(msg, DownloadBreachesSla_nodeParam);
                }
                DownloadBreachesSla_parameters.expand = !!DownloadBreachesSla_parameters.expand ? DownloadBreachesSla_parameters.expand : msg.payload;
                                result = client.DownloadBreachesSla(DownloadBreachesSla_parameters);
            }
            if (!errorFlag && node.method === 'GetCallCostByExtensionGroupData') {
                var GetCallCostByExtensionGroupData_parameters = [];
                var GetCallCostByExtensionGroupData_nodeParam;
                var GetCallCostByExtensionGroupData_nodeParamType;

                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_periodFrom;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_periodFromType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.periodFrom = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.periodFrom = !!GetCallCostByExtensionGroupData_parameters.periodFrom ? GetCallCostByExtensionGroupData_parameters.periodFrom : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_periodTo;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_periodToType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.periodTo = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.periodTo = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.periodTo = !!GetCallCostByExtensionGroupData_parameters.periodTo ? GetCallCostByExtensionGroupData_parameters.periodTo : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_groupFilter;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_groupFilterType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.groupFilter = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.groupFilter = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.groupFilter = !!GetCallCostByExtensionGroupData_parameters.groupFilter ? GetCallCostByExtensionGroupData_parameters.groupFilter : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_callClass;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_callClassType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.callClass = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.callClass = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.callClass = !!GetCallCostByExtensionGroupData_parameters.callClass ? GetCallCostByExtensionGroupData_parameters.callClass : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_top;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_topType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.top = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.top = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.top = !!GetCallCostByExtensionGroupData_parameters.top ? GetCallCostByExtensionGroupData_parameters.top : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_skip;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_skipType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.skip = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.skip = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.skip = !!GetCallCostByExtensionGroupData_parameters.skip ? GetCallCostByExtensionGroupData_parameters.skip : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_search;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_searchType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.search = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.search = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.search = !!GetCallCostByExtensionGroupData_parameters.search ? GetCallCostByExtensionGroupData_parameters.search : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_filter;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_filterType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.filter = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.filter = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.filter = !!GetCallCostByExtensionGroupData_parameters.filter ? GetCallCostByExtensionGroupData_parameters.filter : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_count;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_countType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.count = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.count = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.count = !!GetCallCostByExtensionGroupData_parameters.count ? GetCallCostByExtensionGroupData_parameters.count : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_select;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_selectType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.select = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.select = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.select = !!GetCallCostByExtensionGroupData_parameters.select ? GetCallCostByExtensionGroupData_parameters.select : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_orderby;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_orderbyType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.orderby = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.orderby = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.orderby = !!GetCallCostByExtensionGroupData_parameters.orderby ? GetCallCostByExtensionGroupData_parameters.orderby : msg.payload;
                
                GetCallCostByExtensionGroupData_nodeParam = node.GetCallCostByExtensionGroupData_expand;
                GetCallCostByExtensionGroupData_nodeParamType = node.GetCallCostByExtensionGroupData_expandType;
                if (GetCallCostByExtensionGroupData_nodeParamType === 'str') {
                    GetCallCostByExtensionGroupData_parameters.expand = GetCallCostByExtensionGroupData_nodeParam || '';
                } else {
                    GetCallCostByExtensionGroupData_parameters.expand = RED.util.getMessageProperty(msg, GetCallCostByExtensionGroupData_nodeParam);
                }
                GetCallCostByExtensionGroupData_parameters.expand = !!GetCallCostByExtensionGroupData_parameters.expand ? GetCallCostByExtensionGroupData_parameters.expand : msg.payload;
                                result = client.GetCallCostByExtensionGroupData(GetCallCostByExtensionGroupData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadCallCostByExtensionGroup') {
                var DownloadCallCostByExtensionGroup_parameters = [];
                var DownloadCallCostByExtensionGroup_nodeParam;
                var DownloadCallCostByExtensionGroup_nodeParamType;

                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_periodFrom;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_periodFromType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.periodFrom = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.periodFrom = !!DownloadCallCostByExtensionGroup_parameters.periodFrom ? DownloadCallCostByExtensionGroup_parameters.periodFrom : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_periodTo;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_periodToType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.periodTo = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.periodTo = !!DownloadCallCostByExtensionGroup_parameters.periodTo ? DownloadCallCostByExtensionGroup_parameters.periodTo : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_groupFilter;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_groupFilterType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.groupFilter = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.groupFilter = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.groupFilter = !!DownloadCallCostByExtensionGroup_parameters.groupFilter ? DownloadCallCostByExtensionGroup_parameters.groupFilter : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_callClass;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_callClassType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.callClass = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.callClass = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.callClass = !!DownloadCallCostByExtensionGroup_parameters.callClass ? DownloadCallCostByExtensionGroup_parameters.callClass : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_clientTimeZone;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_clientTimeZoneType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.clientTimeZone = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.clientTimeZone = !!DownloadCallCostByExtensionGroup_parameters.clientTimeZone ? DownloadCallCostByExtensionGroup_parameters.clientTimeZone : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_top;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_topType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.top = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.top = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.top = !!DownloadCallCostByExtensionGroup_parameters.top ? DownloadCallCostByExtensionGroup_parameters.top : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_skip;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_skipType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.skip = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.skip = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.skip = !!DownloadCallCostByExtensionGroup_parameters.skip ? DownloadCallCostByExtensionGroup_parameters.skip : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_search;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_searchType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.search = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.search = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.search = !!DownloadCallCostByExtensionGroup_parameters.search ? DownloadCallCostByExtensionGroup_parameters.search : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_filter;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_filterType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.filter = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.filter = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.filter = !!DownloadCallCostByExtensionGroup_parameters.filter ? DownloadCallCostByExtensionGroup_parameters.filter : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_count;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_countType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.count = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.count = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.count = !!DownloadCallCostByExtensionGroup_parameters.count ? DownloadCallCostByExtensionGroup_parameters.count : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_select;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_selectType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.select = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.select = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.select = !!DownloadCallCostByExtensionGroup_parameters.select ? DownloadCallCostByExtensionGroup_parameters.select : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_orderby;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_orderbyType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.orderby = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.orderby = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.orderby = !!DownloadCallCostByExtensionGroup_parameters.orderby ? DownloadCallCostByExtensionGroup_parameters.orderby : msg.payload;
                
                DownloadCallCostByExtensionGroup_nodeParam = node.DownloadCallCostByExtensionGroup_expand;
                DownloadCallCostByExtensionGroup_nodeParamType = node.DownloadCallCostByExtensionGroup_expandType;
                if (DownloadCallCostByExtensionGroup_nodeParamType === 'str') {
                    DownloadCallCostByExtensionGroup_parameters.expand = DownloadCallCostByExtensionGroup_nodeParam || '';
                } else {
                    DownloadCallCostByExtensionGroup_parameters.expand = RED.util.getMessageProperty(msg, DownloadCallCostByExtensionGroup_nodeParam);
                }
                DownloadCallCostByExtensionGroup_parameters.expand = !!DownloadCallCostByExtensionGroup_parameters.expand ? DownloadCallCostByExtensionGroup_parameters.expand : msg.payload;
                                result = client.DownloadCallCostByExtensionGroup(DownloadCallCostByExtensionGroup_parameters);
            }
            if (!errorFlag && node.method === 'GetCallDistributionData') {
                var GetCallDistributionData_parameters = [];
                var GetCallDistributionData_nodeParam;
                var GetCallDistributionData_nodeParamType;

                GetCallDistributionData_nodeParam = node.GetCallDistributionData_chartDate;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_chartDateType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.chartDate = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.chartDate = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.chartDate = !!GetCallDistributionData_parameters.chartDate ? GetCallDistributionData_parameters.chartDate : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_chartBy;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_chartByType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.chartBy = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.chartBy = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.chartBy = !!GetCallDistributionData_parameters.chartBy ? GetCallDistributionData_parameters.chartBy : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_includeInternalCalls;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_includeInternalCallsType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.includeInternalCalls = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.includeInternalCalls = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.includeInternalCalls = !!GetCallDistributionData_parameters.includeInternalCalls ? GetCallDistributionData_parameters.includeInternalCalls : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_includeQueueCalls;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_includeQueueCallsType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.includeQueueCalls = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.includeQueueCalls = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.includeQueueCalls = !!GetCallDistributionData_parameters.includeQueueCalls ? GetCallDistributionData_parameters.includeQueueCalls : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_queueDnStr;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_queueDnStrType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.queueDnStr = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.queueDnStr = !!GetCallDistributionData_parameters.queueDnStr ? GetCallDistributionData_parameters.queueDnStr : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_groupStr;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_groupStrType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.groupStr = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.groupStr = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.groupStr = !!GetCallDistributionData_parameters.groupStr ? GetCallDistributionData_parameters.groupStr : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_clientTimeZone;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_clientTimeZoneType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.clientTimeZone = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.clientTimeZone = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.clientTimeZone = !!GetCallDistributionData_parameters.clientTimeZone ? GetCallDistributionData_parameters.clientTimeZone : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_waitInterval;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_waitIntervalType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.waitInterval = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.waitInterval = !!GetCallDistributionData_parameters.waitInterval ? GetCallDistributionData_parameters.waitInterval : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_top;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_topType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.top = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.top = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.top = !!GetCallDistributionData_parameters.top ? GetCallDistributionData_parameters.top : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_skip;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_skipType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.skip = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.skip = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.skip = !!GetCallDistributionData_parameters.skip ? GetCallDistributionData_parameters.skip : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_search;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_searchType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.search = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.search = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.search = !!GetCallDistributionData_parameters.search ? GetCallDistributionData_parameters.search : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_filter;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_filterType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.filter = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.filter = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.filter = !!GetCallDistributionData_parameters.filter ? GetCallDistributionData_parameters.filter : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_count;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_countType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.count = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.count = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.count = !!GetCallDistributionData_parameters.count ? GetCallDistributionData_parameters.count : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_select;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_selectType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.select = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.select = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.select = !!GetCallDistributionData_parameters.select ? GetCallDistributionData_parameters.select : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_orderby;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_orderbyType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.orderby = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.orderby = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.orderby = !!GetCallDistributionData_parameters.orderby ? GetCallDistributionData_parameters.orderby : msg.payload;
                
                GetCallDistributionData_nodeParam = node.GetCallDistributionData_expand;
                GetCallDistributionData_nodeParamType = node.GetCallDistributionData_expandType;
                if (GetCallDistributionData_nodeParamType === 'str') {
                    GetCallDistributionData_parameters.expand = GetCallDistributionData_nodeParam || '';
                } else {
                    GetCallDistributionData_parameters.expand = RED.util.getMessageProperty(msg, GetCallDistributionData_nodeParam);
                }
                GetCallDistributionData_parameters.expand = !!GetCallDistributionData_parameters.expand ? GetCallDistributionData_parameters.expand : msg.payload;
                                result = client.GetCallDistributionData(GetCallDistributionData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadCallDistributionReport') {
                var DownloadCallDistributionReport_parameters = [];
                var DownloadCallDistributionReport_nodeParam;
                var DownloadCallDistributionReport_nodeParamType;

                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_chartDate;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_chartDateType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.chartDate = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.chartDate = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.chartDate = !!DownloadCallDistributionReport_parameters.chartDate ? DownloadCallDistributionReport_parameters.chartDate : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_chartBy;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_chartByType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.chartBy = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.chartBy = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.chartBy = !!DownloadCallDistributionReport_parameters.chartBy ? DownloadCallDistributionReport_parameters.chartBy : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_includeInternalCalls;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_includeInternalCallsType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.includeInternalCalls = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.includeInternalCalls = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.includeInternalCalls = !!DownloadCallDistributionReport_parameters.includeInternalCalls ? DownloadCallDistributionReport_parameters.includeInternalCalls : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_includeQueueCalls;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_includeQueueCallsType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.includeQueueCalls = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.includeQueueCalls = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.includeQueueCalls = !!DownloadCallDistributionReport_parameters.includeQueueCalls ? DownloadCallDistributionReport_parameters.includeQueueCalls : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_queueDnStr;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_queueDnStrType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.queueDnStr = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.queueDnStr = !!DownloadCallDistributionReport_parameters.queueDnStr ? DownloadCallDistributionReport_parameters.queueDnStr : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_groupStr;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_groupStrType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.groupStr = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.groupStr = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.groupStr = !!DownloadCallDistributionReport_parameters.groupStr ? DownloadCallDistributionReport_parameters.groupStr : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_clientTimeZone;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_clientTimeZoneType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.clientTimeZone = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.clientTimeZone = !!DownloadCallDistributionReport_parameters.clientTimeZone ? DownloadCallDistributionReport_parameters.clientTimeZone : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_waitInterval;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_waitIntervalType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.waitInterval = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.waitInterval = !!DownloadCallDistributionReport_parameters.waitInterval ? DownloadCallDistributionReport_parameters.waitInterval : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_top;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_topType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.top = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.top = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.top = !!DownloadCallDistributionReport_parameters.top ? DownloadCallDistributionReport_parameters.top : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_skip;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_skipType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.skip = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.skip = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.skip = !!DownloadCallDistributionReport_parameters.skip ? DownloadCallDistributionReport_parameters.skip : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_search;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_searchType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.search = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.search = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.search = !!DownloadCallDistributionReport_parameters.search ? DownloadCallDistributionReport_parameters.search : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_filter;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_filterType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.filter = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.filter = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.filter = !!DownloadCallDistributionReport_parameters.filter ? DownloadCallDistributionReport_parameters.filter : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_count;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_countType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.count = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.count = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.count = !!DownloadCallDistributionReport_parameters.count ? DownloadCallDistributionReport_parameters.count : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_select;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_selectType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.select = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.select = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.select = !!DownloadCallDistributionReport_parameters.select ? DownloadCallDistributionReport_parameters.select : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_orderby;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_orderbyType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.orderby = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.orderby = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.orderby = !!DownloadCallDistributionReport_parameters.orderby ? DownloadCallDistributionReport_parameters.orderby : msg.payload;
                
                DownloadCallDistributionReport_nodeParam = node.DownloadCallDistributionReport_expand;
                DownloadCallDistributionReport_nodeParamType = node.DownloadCallDistributionReport_expandType;
                if (DownloadCallDistributionReport_nodeParamType === 'str') {
                    DownloadCallDistributionReport_parameters.expand = DownloadCallDistributionReport_nodeParam || '';
                } else {
                    DownloadCallDistributionReport_parameters.expand = RED.util.getMessageProperty(msg, DownloadCallDistributionReport_nodeParam);
                }
                DownloadCallDistributionReport_parameters.expand = !!DownloadCallDistributionReport_parameters.expand ? DownloadCallDistributionReport_parameters.expand : msg.payload;
                                result = client.DownloadCallDistributionReport(DownloadCallDistributionReport_parameters);
            }
            if (!errorFlag && node.method === 'GetCallLogData') {
                var GetCallLogData_parameters = [];
                var GetCallLogData_nodeParam;
                var GetCallLogData_nodeParamType;

                GetCallLogData_nodeParam = node.GetCallLogData_periodFrom;
                GetCallLogData_nodeParamType = node.GetCallLogData_periodFromType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.periodFrom = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.periodFrom = !!GetCallLogData_parameters.periodFrom ? GetCallLogData_parameters.periodFrom : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_periodTo;
                GetCallLogData_nodeParamType = node.GetCallLogData_periodToType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.periodTo = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.periodTo = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.periodTo = !!GetCallLogData_parameters.periodTo ? GetCallLogData_parameters.periodTo : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_sourceType;
                GetCallLogData_nodeParamType = node.GetCallLogData_sourceTypeType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.sourceType = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.sourceType = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.sourceType = !!GetCallLogData_parameters.sourceType ? GetCallLogData_parameters.sourceType : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_sourceFilter;
                GetCallLogData_nodeParamType = node.GetCallLogData_sourceFilterType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.sourceFilter = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.sourceFilter = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.sourceFilter = !!GetCallLogData_parameters.sourceFilter ? GetCallLogData_parameters.sourceFilter : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_destinationType;
                GetCallLogData_nodeParamType = node.GetCallLogData_destinationTypeType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.destinationType = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.destinationType = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.destinationType = !!GetCallLogData_parameters.destinationType ? GetCallLogData_parameters.destinationType : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_destinationFilter;
                GetCallLogData_nodeParamType = node.GetCallLogData_destinationFilterType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.destinationFilter = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.destinationFilter = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.destinationFilter = !!GetCallLogData_parameters.destinationFilter ? GetCallLogData_parameters.destinationFilter : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_callsType;
                GetCallLogData_nodeParamType = node.GetCallLogData_callsTypeType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.callsType = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.callsType = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.callsType = !!GetCallLogData_parameters.callsType ? GetCallLogData_parameters.callsType : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_callTimeFilterType;
                GetCallLogData_nodeParamType = node.GetCallLogData_callTimeFilterTypeType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.callTimeFilterType = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.callTimeFilterType = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.callTimeFilterType = !!GetCallLogData_parameters.callTimeFilterType ? GetCallLogData_parameters.callTimeFilterType : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_callTimeFilterFrom;
                GetCallLogData_nodeParamType = node.GetCallLogData_callTimeFilterFromType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.callTimeFilterFrom = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.callTimeFilterFrom = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.callTimeFilterFrom = !!GetCallLogData_parameters.callTimeFilterFrom ? GetCallLogData_parameters.callTimeFilterFrom : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_callTimeFilterTo;
                GetCallLogData_nodeParamType = node.GetCallLogData_callTimeFilterToType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.callTimeFilterTo = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.callTimeFilterTo = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.callTimeFilterTo = !!GetCallLogData_parameters.callTimeFilterTo ? GetCallLogData_parameters.callTimeFilterTo : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_hidePcalls;
                GetCallLogData_nodeParamType = node.GetCallLogData_hidePcallsType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.hidePcalls = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.hidePcalls = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.hidePcalls = !!GetCallLogData_parameters.hidePcalls ? GetCallLogData_parameters.hidePcalls : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_top;
                GetCallLogData_nodeParamType = node.GetCallLogData_topType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.top = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.top = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.top = !!GetCallLogData_parameters.top ? GetCallLogData_parameters.top : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_skip;
                GetCallLogData_nodeParamType = node.GetCallLogData_skipType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.skip = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.skip = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.skip = !!GetCallLogData_parameters.skip ? GetCallLogData_parameters.skip : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_search;
                GetCallLogData_nodeParamType = node.GetCallLogData_searchType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.search = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.search = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.search = !!GetCallLogData_parameters.search ? GetCallLogData_parameters.search : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_filter;
                GetCallLogData_nodeParamType = node.GetCallLogData_filterType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.filter = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.filter = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.filter = !!GetCallLogData_parameters.filter ? GetCallLogData_parameters.filter : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_count;
                GetCallLogData_nodeParamType = node.GetCallLogData_countType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.count = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.count = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.count = !!GetCallLogData_parameters.count ? GetCallLogData_parameters.count : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_select;
                GetCallLogData_nodeParamType = node.GetCallLogData_selectType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.select = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.select = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.select = !!GetCallLogData_parameters.select ? GetCallLogData_parameters.select : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_orderby;
                GetCallLogData_nodeParamType = node.GetCallLogData_orderbyType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.orderby = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.orderby = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.orderby = !!GetCallLogData_parameters.orderby ? GetCallLogData_parameters.orderby : msg.payload;
                
                GetCallLogData_nodeParam = node.GetCallLogData_expand;
                GetCallLogData_nodeParamType = node.GetCallLogData_expandType;
                if (GetCallLogData_nodeParamType === 'str') {
                    GetCallLogData_parameters.expand = GetCallLogData_nodeParam || '';
                } else {
                    GetCallLogData_parameters.expand = RED.util.getMessageProperty(msg, GetCallLogData_nodeParam);
                }
                GetCallLogData_parameters.expand = !!GetCallLogData_parameters.expand ? GetCallLogData_parameters.expand : msg.payload;
                                result = client.GetCallLogData(GetCallLogData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadCallLog') {
                var DownloadCallLog_parameters = [];
                var DownloadCallLog_nodeParam;
                var DownloadCallLog_nodeParamType;

                DownloadCallLog_nodeParam = node.DownloadCallLog_periodFrom;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_periodFromType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.periodFrom = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.periodFrom = !!DownloadCallLog_parameters.periodFrom ? DownloadCallLog_parameters.periodFrom : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_periodTo;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_periodToType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.periodTo = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.periodTo = !!DownloadCallLog_parameters.periodTo ? DownloadCallLog_parameters.periodTo : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_sourceType;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_sourceTypeType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.sourceType = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.sourceType = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.sourceType = !!DownloadCallLog_parameters.sourceType ? DownloadCallLog_parameters.sourceType : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_sourceFilter;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_sourceFilterType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.sourceFilter = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.sourceFilter = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.sourceFilter = !!DownloadCallLog_parameters.sourceFilter ? DownloadCallLog_parameters.sourceFilter : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_destinationType;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_destinationTypeType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.destinationType = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.destinationType = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.destinationType = !!DownloadCallLog_parameters.destinationType ? DownloadCallLog_parameters.destinationType : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_destinationFilter;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_destinationFilterType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.destinationFilter = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.destinationFilter = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.destinationFilter = !!DownloadCallLog_parameters.destinationFilter ? DownloadCallLog_parameters.destinationFilter : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_callsType;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_callsTypeType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.callsType = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.callsType = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.callsType = !!DownloadCallLog_parameters.callsType ? DownloadCallLog_parameters.callsType : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_callTimeFilterType;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_callTimeFilterTypeType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.callTimeFilterType = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.callTimeFilterType = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.callTimeFilterType = !!DownloadCallLog_parameters.callTimeFilterType ? DownloadCallLog_parameters.callTimeFilterType : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_callTimeFilterFrom;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_callTimeFilterFromType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.callTimeFilterFrom = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.callTimeFilterFrom = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.callTimeFilterFrom = !!DownloadCallLog_parameters.callTimeFilterFrom ? DownloadCallLog_parameters.callTimeFilterFrom : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_callTimeFilterTo;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_callTimeFilterToType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.callTimeFilterTo = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.callTimeFilterTo = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.callTimeFilterTo = !!DownloadCallLog_parameters.callTimeFilterTo ? DownloadCallLog_parameters.callTimeFilterTo : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_hidePcalls;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_hidePcallsType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.hidePcalls = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.hidePcalls = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.hidePcalls = !!DownloadCallLog_parameters.hidePcalls ? DownloadCallLog_parameters.hidePcalls : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_clientTimeZone;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_clientTimeZoneType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.clientTimeZone = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.clientTimeZone = !!DownloadCallLog_parameters.clientTimeZone ? DownloadCallLog_parameters.clientTimeZone : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_top;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_topType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.top = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.top = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.top = !!DownloadCallLog_parameters.top ? DownloadCallLog_parameters.top : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_skip;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_skipType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.skip = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.skip = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.skip = !!DownloadCallLog_parameters.skip ? DownloadCallLog_parameters.skip : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_search;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_searchType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.search = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.search = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.search = !!DownloadCallLog_parameters.search ? DownloadCallLog_parameters.search : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_filter;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_filterType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.filter = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.filter = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.filter = !!DownloadCallLog_parameters.filter ? DownloadCallLog_parameters.filter : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_count;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_countType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.count = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.count = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.count = !!DownloadCallLog_parameters.count ? DownloadCallLog_parameters.count : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_select;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_selectType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.select = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.select = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.select = !!DownloadCallLog_parameters.select ? DownloadCallLog_parameters.select : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_orderby;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_orderbyType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.orderby = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.orderby = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.orderby = !!DownloadCallLog_parameters.orderby ? DownloadCallLog_parameters.orderby : msg.payload;
                
                DownloadCallLog_nodeParam = node.DownloadCallLog_expand;
                DownloadCallLog_nodeParamType = node.DownloadCallLog_expandType;
                if (DownloadCallLog_nodeParamType === 'str') {
                    DownloadCallLog_parameters.expand = DownloadCallLog_nodeParam || '';
                } else {
                    DownloadCallLog_parameters.expand = RED.util.getMessageProperty(msg, DownloadCallLog_nodeParam);
                }
                DownloadCallLog_parameters.expand = !!DownloadCallLog_parameters.expand ? DownloadCallLog_parameters.expand : msg.payload;
                                result = client.DownloadCallLog(DownloadCallLog_parameters);
            }
            if (!errorFlag && node.method === 'GetCallQualityReport') {
                var GetCallQualityReport_parameters = [];
                var GetCallQualityReport_nodeParam;
                var GetCallQualityReport_nodeParamType;

                GetCallQualityReport_nodeParam = node.GetCallQualityReport_callId;
                GetCallQualityReport_nodeParamType = node.GetCallQualityReport_callIdType;
                if (GetCallQualityReport_nodeParamType === 'str') {
                    GetCallQualityReport_parameters.callId = GetCallQualityReport_nodeParam || '';
                } else {
                    GetCallQualityReport_parameters.callId = RED.util.getMessageProperty(msg, GetCallQualityReport_nodeParam);
                }
                GetCallQualityReport_parameters.callId = !!GetCallQualityReport_parameters.callId ? GetCallQualityReport_parameters.callId : msg.payload;
                
                GetCallQualityReport_nodeParam = node.GetCallQualityReport_srcNumber;
                GetCallQualityReport_nodeParamType = node.GetCallQualityReport_srcNumberType;
                if (GetCallQualityReport_nodeParamType === 'str') {
                    GetCallQualityReport_parameters.srcNumber = GetCallQualityReport_nodeParam || '';
                } else {
                    GetCallQualityReport_parameters.srcNumber = RED.util.getMessageProperty(msg, GetCallQualityReport_nodeParam);
                }
                GetCallQualityReport_parameters.srcNumber = !!GetCallQualityReport_parameters.srcNumber ? GetCallQualityReport_parameters.srcNumber : msg.payload;
                
                GetCallQualityReport_nodeParam = node.GetCallQualityReport_dstNumber;
                GetCallQualityReport_nodeParamType = node.GetCallQualityReport_dstNumberType;
                if (GetCallQualityReport_nodeParamType === 'str') {
                    GetCallQualityReport_parameters.dstNumber = GetCallQualityReport_nodeParam || '';
                } else {
                    GetCallQualityReport_parameters.dstNumber = RED.util.getMessageProperty(msg, GetCallQualityReport_nodeParam);
                }
                GetCallQualityReport_parameters.dstNumber = !!GetCallQualityReport_parameters.dstNumber ? GetCallQualityReport_parameters.dstNumber : msg.payload;
                
                GetCallQualityReport_nodeParam = node.GetCallQualityReport_srcCallerId;
                GetCallQualityReport_nodeParamType = node.GetCallQualityReport_srcCallerIdType;
                if (GetCallQualityReport_nodeParamType === 'str') {
                    GetCallQualityReport_parameters.srcCallerId = GetCallQualityReport_nodeParam || '';
                } else {
                    GetCallQualityReport_parameters.srcCallerId = RED.util.getMessageProperty(msg, GetCallQualityReport_nodeParam);
                }
                GetCallQualityReport_parameters.srcCallerId = !!GetCallQualityReport_parameters.srcCallerId ? GetCallQualityReport_parameters.srcCallerId : msg.payload;
                
                GetCallQualityReport_nodeParam = node.GetCallQualityReport_dstCallerId;
                GetCallQualityReport_nodeParamType = node.GetCallQualityReport_dstCallerIdType;
                if (GetCallQualityReport_nodeParamType === 'str') {
                    GetCallQualityReport_parameters.dstCallerId = GetCallQualityReport_nodeParam || '';
                } else {
                    GetCallQualityReport_parameters.dstCallerId = RED.util.getMessageProperty(msg, GetCallQualityReport_nodeParam);
                }
                GetCallQualityReport_parameters.dstCallerId = !!GetCallQualityReport_parameters.dstCallerId ? GetCallQualityReport_parameters.dstCallerId : msg.payload;
                                result = client.GetCallQualityReport(GetCallQualityReport_parameters);
            }
            if (!errorFlag && node.method === 'GetDetailedQueueStatisticsData') {
                var GetDetailedQueueStatisticsData_parameters = [];
                var GetDetailedQueueStatisticsData_nodeParam;
                var GetDetailedQueueStatisticsData_nodeParamType;

                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_queueDnStr;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_queueDnStrType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.queueDnStr = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.queueDnStr = !!GetDetailedQueueStatisticsData_parameters.queueDnStr ? GetDetailedQueueStatisticsData_parameters.queueDnStr : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_startDt;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_startDtType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.startDt = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.startDt = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.startDt = !!GetDetailedQueueStatisticsData_parameters.startDt ? GetDetailedQueueStatisticsData_parameters.startDt : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_endDt;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_endDtType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.endDt = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.endDt = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.endDt = !!GetDetailedQueueStatisticsData_parameters.endDt ? GetDetailedQueueStatisticsData_parameters.endDt : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_waitInterval;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_waitIntervalType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.waitInterval = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.waitInterval = !!GetDetailedQueueStatisticsData_parameters.waitInterval ? GetDetailedQueueStatisticsData_parameters.waitInterval : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_top;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_topType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.top = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.top = !!GetDetailedQueueStatisticsData_parameters.top ? GetDetailedQueueStatisticsData_parameters.top : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_skip;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_skipType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.skip = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.skip = !!GetDetailedQueueStatisticsData_parameters.skip ? GetDetailedQueueStatisticsData_parameters.skip : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_search;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_searchType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.search = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.search = !!GetDetailedQueueStatisticsData_parameters.search ? GetDetailedQueueStatisticsData_parameters.search : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_filter;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_filterType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.filter = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.filter = !!GetDetailedQueueStatisticsData_parameters.filter ? GetDetailedQueueStatisticsData_parameters.filter : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_count;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_countType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.count = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.count = !!GetDetailedQueueStatisticsData_parameters.count ? GetDetailedQueueStatisticsData_parameters.count : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_select;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_selectType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.select = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.select = !!GetDetailedQueueStatisticsData_parameters.select ? GetDetailedQueueStatisticsData_parameters.select : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_orderby;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_orderbyType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.orderby = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.orderby = !!GetDetailedQueueStatisticsData_parameters.orderby ? GetDetailedQueueStatisticsData_parameters.orderby : msg.payload;
                
                GetDetailedQueueStatisticsData_nodeParam = node.GetDetailedQueueStatisticsData_expand;
                GetDetailedQueueStatisticsData_nodeParamType = node.GetDetailedQueueStatisticsData_expandType;
                if (GetDetailedQueueStatisticsData_nodeParamType === 'str') {
                    GetDetailedQueueStatisticsData_parameters.expand = GetDetailedQueueStatisticsData_nodeParam || '';
                } else {
                    GetDetailedQueueStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetDetailedQueueStatisticsData_nodeParam);
                }
                GetDetailedQueueStatisticsData_parameters.expand = !!GetDetailedQueueStatisticsData_parameters.expand ? GetDetailedQueueStatisticsData_parameters.expand : msg.payload;
                                result = client.GetDetailedQueueStatisticsData(GetDetailedQueueStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadDetailedQueueStatistics') {
                var DownloadDetailedQueueStatistics_parameters = [];
                var DownloadDetailedQueueStatistics_nodeParam;
                var DownloadDetailedQueueStatistics_nodeParamType;

                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_queueDnStr;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_queueDnStrType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.queueDnStr = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.queueDnStr = !!DownloadDetailedQueueStatistics_parameters.queueDnStr ? DownloadDetailedQueueStatistics_parameters.queueDnStr : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_startDt;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_startDtType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.startDt = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.startDt = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.startDt = !!DownloadDetailedQueueStatistics_parameters.startDt ? DownloadDetailedQueueStatistics_parameters.startDt : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_endDt;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_endDtType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.endDt = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.endDt = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.endDt = !!DownloadDetailedQueueStatistics_parameters.endDt ? DownloadDetailedQueueStatistics_parameters.endDt : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_waitInterval;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_waitIntervalType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.waitInterval = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.waitInterval = !!DownloadDetailedQueueStatistics_parameters.waitInterval ? DownloadDetailedQueueStatistics_parameters.waitInterval : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_top;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_topType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.top = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.top = !!DownloadDetailedQueueStatistics_parameters.top ? DownloadDetailedQueueStatistics_parameters.top : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_skip;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_skipType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.skip = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.skip = !!DownloadDetailedQueueStatistics_parameters.skip ? DownloadDetailedQueueStatistics_parameters.skip : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_search;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_searchType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.search = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.search = !!DownloadDetailedQueueStatistics_parameters.search ? DownloadDetailedQueueStatistics_parameters.search : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_filter;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_filterType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.filter = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.filter = !!DownloadDetailedQueueStatistics_parameters.filter ? DownloadDetailedQueueStatistics_parameters.filter : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_count;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_countType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.count = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.count = !!DownloadDetailedQueueStatistics_parameters.count ? DownloadDetailedQueueStatistics_parameters.count : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_select;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_selectType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.select = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.select = !!DownloadDetailedQueueStatistics_parameters.select ? DownloadDetailedQueueStatistics_parameters.select : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_orderby;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_orderbyType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.orderby = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.orderby = !!DownloadDetailedQueueStatistics_parameters.orderby ? DownloadDetailedQueueStatistics_parameters.orderby : msg.payload;
                
                DownloadDetailedQueueStatistics_nodeParam = node.DownloadDetailedQueueStatistics_expand;
                DownloadDetailedQueueStatistics_nodeParamType = node.DownloadDetailedQueueStatistics_expandType;
                if (DownloadDetailedQueueStatistics_nodeParamType === 'str') {
                    DownloadDetailedQueueStatistics_parameters.expand = DownloadDetailedQueueStatistics_nodeParam || '';
                } else {
                    DownloadDetailedQueueStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadDetailedQueueStatistics_nodeParam);
                }
                DownloadDetailedQueueStatistics_parameters.expand = !!DownloadDetailedQueueStatistics_parameters.expand ? DownloadDetailedQueueStatistics_parameters.expand : msg.payload;
                                result = client.DownloadDetailedQueueStatistics(DownloadDetailedQueueStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetExtensionsStatisticsByRingGroupsData') {
                var GetExtensionsStatisticsByRingGroupsData_parameters = [];
                var GetExtensionsStatisticsByRingGroupsData_nodeParam;
                var GetExtensionsStatisticsByRingGroupsData_nodeParamType;

                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_periodFrom;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_periodFromType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.periodFrom = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.periodFrom = !!GetExtensionsStatisticsByRingGroupsData_parameters.periodFrom ? GetExtensionsStatisticsByRingGroupsData_parameters.periodFrom : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_periodTo;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_periodToType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.periodTo = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.periodTo = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.periodTo = !!GetExtensionsStatisticsByRingGroupsData_parameters.periodTo ? GetExtensionsStatisticsByRingGroupsData_parameters.periodTo : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_ringGroupDns;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_ringGroupDnsType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.ringGroupDns = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.ringGroupDns = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.ringGroupDns = !!GetExtensionsStatisticsByRingGroupsData_parameters.ringGroupDns ? GetExtensionsStatisticsByRingGroupsData_parameters.ringGroupDns : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_top;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_topType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.top = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.top = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.top = !!GetExtensionsStatisticsByRingGroupsData_parameters.top ? GetExtensionsStatisticsByRingGroupsData_parameters.top : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_skip;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_skipType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.skip = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.skip = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.skip = !!GetExtensionsStatisticsByRingGroupsData_parameters.skip ? GetExtensionsStatisticsByRingGroupsData_parameters.skip : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_search;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_searchType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.search = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.search = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.search = !!GetExtensionsStatisticsByRingGroupsData_parameters.search ? GetExtensionsStatisticsByRingGroupsData_parameters.search : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_filter;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_filterType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.filter = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.filter = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.filter = !!GetExtensionsStatisticsByRingGroupsData_parameters.filter ? GetExtensionsStatisticsByRingGroupsData_parameters.filter : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_count;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_countType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.count = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.count = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.count = !!GetExtensionsStatisticsByRingGroupsData_parameters.count ? GetExtensionsStatisticsByRingGroupsData_parameters.count : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_select;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_selectType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.select = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.select = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.select = !!GetExtensionsStatisticsByRingGroupsData_parameters.select ? GetExtensionsStatisticsByRingGroupsData_parameters.select : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_orderby;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_orderbyType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.orderby = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.orderby = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.orderby = !!GetExtensionsStatisticsByRingGroupsData_parameters.orderby ? GetExtensionsStatisticsByRingGroupsData_parameters.orderby : msg.payload;
                
                GetExtensionsStatisticsByRingGroupsData_nodeParam = node.GetExtensionsStatisticsByRingGroupsData_expand;
                GetExtensionsStatisticsByRingGroupsData_nodeParamType = node.GetExtensionsStatisticsByRingGroupsData_expandType;
                if (GetExtensionsStatisticsByRingGroupsData_nodeParamType === 'str') {
                    GetExtensionsStatisticsByRingGroupsData_parameters.expand = GetExtensionsStatisticsByRingGroupsData_nodeParam || '';
                } else {
                    GetExtensionsStatisticsByRingGroupsData_parameters.expand = RED.util.getMessageProperty(msg, GetExtensionsStatisticsByRingGroupsData_nodeParam);
                }
                GetExtensionsStatisticsByRingGroupsData_parameters.expand = !!GetExtensionsStatisticsByRingGroupsData_parameters.expand ? GetExtensionsStatisticsByRingGroupsData_parameters.expand : msg.payload;
                                result = client.GetExtensionsStatisticsByRingGroupsData(GetExtensionsStatisticsByRingGroupsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadExtensionsStatisticsByRingGroups') {
                var DownloadExtensionsStatisticsByRingGroups_parameters = [];
                var DownloadExtensionsStatisticsByRingGroups_nodeParam;
                var DownloadExtensionsStatisticsByRingGroups_nodeParamType;

                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_periodFrom;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_periodFromType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.periodFrom = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.periodFrom = !!DownloadExtensionsStatisticsByRingGroups_parameters.periodFrom ? DownloadExtensionsStatisticsByRingGroups_parameters.periodFrom : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_periodTo;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_periodToType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.periodTo = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.periodTo = !!DownloadExtensionsStatisticsByRingGroups_parameters.periodTo ? DownloadExtensionsStatisticsByRingGroups_parameters.periodTo : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_ringGroupDns;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_ringGroupDnsType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.ringGroupDns = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.ringGroupDns = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.ringGroupDns = !!DownloadExtensionsStatisticsByRingGroups_parameters.ringGroupDns ? DownloadExtensionsStatisticsByRingGroups_parameters.ringGroupDns : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_top;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_topType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.top = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.top = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.top = !!DownloadExtensionsStatisticsByRingGroups_parameters.top ? DownloadExtensionsStatisticsByRingGroups_parameters.top : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_skip;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_skipType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.skip = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.skip = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.skip = !!DownloadExtensionsStatisticsByRingGroups_parameters.skip ? DownloadExtensionsStatisticsByRingGroups_parameters.skip : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_search;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_searchType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.search = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.search = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.search = !!DownloadExtensionsStatisticsByRingGroups_parameters.search ? DownloadExtensionsStatisticsByRingGroups_parameters.search : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_filter;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_filterType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.filter = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.filter = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.filter = !!DownloadExtensionsStatisticsByRingGroups_parameters.filter ? DownloadExtensionsStatisticsByRingGroups_parameters.filter : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_count;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_countType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.count = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.count = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.count = !!DownloadExtensionsStatisticsByRingGroups_parameters.count ? DownloadExtensionsStatisticsByRingGroups_parameters.count : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_select;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_selectType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.select = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.select = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.select = !!DownloadExtensionsStatisticsByRingGroups_parameters.select ? DownloadExtensionsStatisticsByRingGroups_parameters.select : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_orderby;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_orderbyType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.orderby = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.orderby = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.orderby = !!DownloadExtensionsStatisticsByRingGroups_parameters.orderby ? DownloadExtensionsStatisticsByRingGroups_parameters.orderby : msg.payload;
                
                DownloadExtensionsStatisticsByRingGroups_nodeParam = node.DownloadExtensionsStatisticsByRingGroups_expand;
                DownloadExtensionsStatisticsByRingGroups_nodeParamType = node.DownloadExtensionsStatisticsByRingGroups_expandType;
                if (DownloadExtensionsStatisticsByRingGroups_nodeParamType === 'str') {
                    DownloadExtensionsStatisticsByRingGroups_parameters.expand = DownloadExtensionsStatisticsByRingGroups_nodeParam || '';
                } else {
                    DownloadExtensionsStatisticsByRingGroups_parameters.expand = RED.util.getMessageProperty(msg, DownloadExtensionsStatisticsByRingGroups_nodeParam);
                }
                DownloadExtensionsStatisticsByRingGroups_parameters.expand = !!DownloadExtensionsStatisticsByRingGroups_parameters.expand ? DownloadExtensionsStatisticsByRingGroups_parameters.expand : msg.payload;
                                result = client.DownloadExtensionsStatisticsByRingGroups(DownloadExtensionsStatisticsByRingGroups_parameters);
            }
            if (!errorFlag && node.method === 'GetExtensionStatisticsByGroupData') {
                var GetExtensionStatisticsByGroupData_parameters = [];
                var GetExtensionStatisticsByGroupData_nodeParam;
                var GetExtensionStatisticsByGroupData_nodeParamType;

                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_groupNumber;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_groupNumberType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.groupNumber = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.groupNumber = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.groupNumber = !!GetExtensionStatisticsByGroupData_parameters.groupNumber ? GetExtensionStatisticsByGroupData_parameters.groupNumber : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_periodFrom;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_periodFromType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.periodFrom = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.periodFrom = !!GetExtensionStatisticsByGroupData_parameters.periodFrom ? GetExtensionStatisticsByGroupData_parameters.periodFrom : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_periodTo;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_periodToType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.periodTo = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.periodTo = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.periodTo = !!GetExtensionStatisticsByGroupData_parameters.periodTo ? GetExtensionStatisticsByGroupData_parameters.periodTo : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_callArea;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_callAreaType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.callArea = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.callArea = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.callArea = !!GetExtensionStatisticsByGroupData_parameters.callArea ? GetExtensionStatisticsByGroupData_parameters.callArea : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_top;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_topType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.top = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.top = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.top = !!GetExtensionStatisticsByGroupData_parameters.top ? GetExtensionStatisticsByGroupData_parameters.top : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_skip;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_skipType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.skip = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.skip = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.skip = !!GetExtensionStatisticsByGroupData_parameters.skip ? GetExtensionStatisticsByGroupData_parameters.skip : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_search;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_searchType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.search = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.search = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.search = !!GetExtensionStatisticsByGroupData_parameters.search ? GetExtensionStatisticsByGroupData_parameters.search : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_filter;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_filterType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.filter = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.filter = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.filter = !!GetExtensionStatisticsByGroupData_parameters.filter ? GetExtensionStatisticsByGroupData_parameters.filter : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_count;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_countType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.count = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.count = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.count = !!GetExtensionStatisticsByGroupData_parameters.count ? GetExtensionStatisticsByGroupData_parameters.count : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_select;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_selectType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.select = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.select = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.select = !!GetExtensionStatisticsByGroupData_parameters.select ? GetExtensionStatisticsByGroupData_parameters.select : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_orderby;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_orderbyType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.orderby = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.orderby = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.orderby = !!GetExtensionStatisticsByGroupData_parameters.orderby ? GetExtensionStatisticsByGroupData_parameters.orderby : msg.payload;
                
                GetExtensionStatisticsByGroupData_nodeParam = node.GetExtensionStatisticsByGroupData_expand;
                GetExtensionStatisticsByGroupData_nodeParamType = node.GetExtensionStatisticsByGroupData_expandType;
                if (GetExtensionStatisticsByGroupData_nodeParamType === 'str') {
                    GetExtensionStatisticsByGroupData_parameters.expand = GetExtensionStatisticsByGroupData_nodeParam || '';
                } else {
                    GetExtensionStatisticsByGroupData_parameters.expand = RED.util.getMessageProperty(msg, GetExtensionStatisticsByGroupData_nodeParam);
                }
                GetExtensionStatisticsByGroupData_parameters.expand = !!GetExtensionStatisticsByGroupData_parameters.expand ? GetExtensionStatisticsByGroupData_parameters.expand : msg.payload;
                                result = client.GetExtensionStatisticsByGroupData(GetExtensionStatisticsByGroupData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadExtensionStatisticsByGroup') {
                var DownloadExtensionStatisticsByGroup_parameters = [];
                var DownloadExtensionStatisticsByGroup_nodeParam;
                var DownloadExtensionStatisticsByGroup_nodeParamType;

                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_groupNumber;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_groupNumberType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.groupNumber = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.groupNumber = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.groupNumber = !!DownloadExtensionStatisticsByGroup_parameters.groupNumber ? DownloadExtensionStatisticsByGroup_parameters.groupNumber : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_periodFrom;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_periodFromType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.periodFrom = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.periodFrom = !!DownloadExtensionStatisticsByGroup_parameters.periodFrom ? DownloadExtensionStatisticsByGroup_parameters.periodFrom : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_periodTo;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_periodToType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.periodTo = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.periodTo = !!DownloadExtensionStatisticsByGroup_parameters.periodTo ? DownloadExtensionStatisticsByGroup_parameters.periodTo : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_callArea;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_callAreaType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.callArea = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.callArea = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.callArea = !!DownloadExtensionStatisticsByGroup_parameters.callArea ? DownloadExtensionStatisticsByGroup_parameters.callArea : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_top;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_topType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.top = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.top = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.top = !!DownloadExtensionStatisticsByGroup_parameters.top ? DownloadExtensionStatisticsByGroup_parameters.top : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_skip;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_skipType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.skip = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.skip = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.skip = !!DownloadExtensionStatisticsByGroup_parameters.skip ? DownloadExtensionStatisticsByGroup_parameters.skip : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_search;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_searchType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.search = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.search = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.search = !!DownloadExtensionStatisticsByGroup_parameters.search ? DownloadExtensionStatisticsByGroup_parameters.search : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_filter;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_filterType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.filter = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.filter = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.filter = !!DownloadExtensionStatisticsByGroup_parameters.filter ? DownloadExtensionStatisticsByGroup_parameters.filter : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_count;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_countType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.count = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.count = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.count = !!DownloadExtensionStatisticsByGroup_parameters.count ? DownloadExtensionStatisticsByGroup_parameters.count : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_select;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_selectType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.select = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.select = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.select = !!DownloadExtensionStatisticsByGroup_parameters.select ? DownloadExtensionStatisticsByGroup_parameters.select : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_orderby;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_orderbyType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.orderby = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.orderby = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.orderby = !!DownloadExtensionStatisticsByGroup_parameters.orderby ? DownloadExtensionStatisticsByGroup_parameters.orderby : msg.payload;
                
                DownloadExtensionStatisticsByGroup_nodeParam = node.DownloadExtensionStatisticsByGroup_expand;
                DownloadExtensionStatisticsByGroup_nodeParamType = node.DownloadExtensionStatisticsByGroup_expandType;
                if (DownloadExtensionStatisticsByGroup_nodeParamType === 'str') {
                    DownloadExtensionStatisticsByGroup_parameters.expand = DownloadExtensionStatisticsByGroup_nodeParam || '';
                } else {
                    DownloadExtensionStatisticsByGroup_parameters.expand = RED.util.getMessageProperty(msg, DownloadExtensionStatisticsByGroup_nodeParam);
                }
                DownloadExtensionStatisticsByGroup_parameters.expand = !!DownloadExtensionStatisticsByGroup_parameters.expand ? DownloadExtensionStatisticsByGroup_parameters.expand : msg.payload;
                                result = client.DownloadExtensionStatisticsByGroup(DownloadExtensionStatisticsByGroup_parameters);
            }
            if (!errorFlag && node.method === 'GetExtensionStatisticsData') {
                var GetExtensionStatisticsData_parameters = [];
                var GetExtensionStatisticsData_nodeParam;
                var GetExtensionStatisticsData_nodeParamType;

                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_periodFrom;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_periodFromType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.periodFrom = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.periodFrom = !!GetExtensionStatisticsData_parameters.periodFrom ? GetExtensionStatisticsData_parameters.periodFrom : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_periodTo;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_periodToType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.periodTo = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.periodTo = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.periodTo = !!GetExtensionStatisticsData_parameters.periodTo ? GetExtensionStatisticsData_parameters.periodTo : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_extensionFilter;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_extensionFilterType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.extensionFilter = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.extensionFilter = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.extensionFilter = !!GetExtensionStatisticsData_parameters.extensionFilter ? GetExtensionStatisticsData_parameters.extensionFilter : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_callArea;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_callAreaType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.callArea = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.callArea = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.callArea = !!GetExtensionStatisticsData_parameters.callArea ? GetExtensionStatisticsData_parameters.callArea : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_top;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_topType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.top = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.top = !!GetExtensionStatisticsData_parameters.top ? GetExtensionStatisticsData_parameters.top : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_skip;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_skipType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.skip = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.skip = !!GetExtensionStatisticsData_parameters.skip ? GetExtensionStatisticsData_parameters.skip : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_search;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_searchType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.search = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.search = !!GetExtensionStatisticsData_parameters.search ? GetExtensionStatisticsData_parameters.search : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_filter;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_filterType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.filter = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.filter = !!GetExtensionStatisticsData_parameters.filter ? GetExtensionStatisticsData_parameters.filter : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_count;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_countType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.count = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.count = !!GetExtensionStatisticsData_parameters.count ? GetExtensionStatisticsData_parameters.count : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_select;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_selectType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.select = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.select = !!GetExtensionStatisticsData_parameters.select ? GetExtensionStatisticsData_parameters.select : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_orderby;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_orderbyType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.orderby = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.orderby = !!GetExtensionStatisticsData_parameters.orderby ? GetExtensionStatisticsData_parameters.orderby : msg.payload;
                
                GetExtensionStatisticsData_nodeParam = node.GetExtensionStatisticsData_expand;
                GetExtensionStatisticsData_nodeParamType = node.GetExtensionStatisticsData_expandType;
                if (GetExtensionStatisticsData_nodeParamType === 'str') {
                    GetExtensionStatisticsData_parameters.expand = GetExtensionStatisticsData_nodeParam || '';
                } else {
                    GetExtensionStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetExtensionStatisticsData_nodeParam);
                }
                GetExtensionStatisticsData_parameters.expand = !!GetExtensionStatisticsData_parameters.expand ? GetExtensionStatisticsData_parameters.expand : msg.payload;
                                result = client.GetExtensionStatisticsData(GetExtensionStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadExtensionStatistics') {
                var DownloadExtensionStatistics_parameters = [];
                var DownloadExtensionStatistics_nodeParam;
                var DownloadExtensionStatistics_nodeParamType;

                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_periodFrom;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_periodFromType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.periodFrom = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.periodFrom = !!DownloadExtensionStatistics_parameters.periodFrom ? DownloadExtensionStatistics_parameters.periodFrom : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_periodTo;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_periodToType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.periodTo = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.periodTo = !!DownloadExtensionStatistics_parameters.periodTo ? DownloadExtensionStatistics_parameters.periodTo : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_extensionFilter;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_extensionFilterType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.extensionFilter = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.extensionFilter = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.extensionFilter = !!DownloadExtensionStatistics_parameters.extensionFilter ? DownloadExtensionStatistics_parameters.extensionFilter : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_callArea;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_callAreaType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.callArea = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.callArea = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.callArea = !!DownloadExtensionStatistics_parameters.callArea ? DownloadExtensionStatistics_parameters.callArea : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_top;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_topType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.top = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.top = !!DownloadExtensionStatistics_parameters.top ? DownloadExtensionStatistics_parameters.top : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_skip;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_skipType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.skip = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.skip = !!DownloadExtensionStatistics_parameters.skip ? DownloadExtensionStatistics_parameters.skip : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_search;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_searchType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.search = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.search = !!DownloadExtensionStatistics_parameters.search ? DownloadExtensionStatistics_parameters.search : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_filter;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_filterType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.filter = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.filter = !!DownloadExtensionStatistics_parameters.filter ? DownloadExtensionStatistics_parameters.filter : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_count;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_countType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.count = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.count = !!DownloadExtensionStatistics_parameters.count ? DownloadExtensionStatistics_parameters.count : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_select;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_selectType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.select = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.select = !!DownloadExtensionStatistics_parameters.select ? DownloadExtensionStatistics_parameters.select : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_orderby;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_orderbyType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.orderby = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.orderby = !!DownloadExtensionStatistics_parameters.orderby ? DownloadExtensionStatistics_parameters.orderby : msg.payload;
                
                DownloadExtensionStatistics_nodeParam = node.DownloadExtensionStatistics_expand;
                DownloadExtensionStatistics_nodeParamType = node.DownloadExtensionStatistics_expandType;
                if (DownloadExtensionStatistics_nodeParamType === 'str') {
                    DownloadExtensionStatistics_parameters.expand = DownloadExtensionStatistics_nodeParam || '';
                } else {
                    DownloadExtensionStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadExtensionStatistics_nodeParam);
                }
                DownloadExtensionStatistics_parameters.expand = !!DownloadExtensionStatistics_parameters.expand ? DownloadExtensionStatistics_parameters.expand : msg.payload;
                                result = client.DownloadExtensionStatistics(DownloadExtensionStatistics_parameters);
            }
            if (!errorFlag && node.method === 'ListReportGroup') {
                var ListReportGroup_parameters = [];
                var ListReportGroup_nodeParam;
                var ListReportGroup_nodeParamType;

                ListReportGroup_nodeParam = node.ListReportGroup_top;
                ListReportGroup_nodeParamType = node.ListReportGroup_topType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.top = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.top = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.top = !!ListReportGroup_parameters.top ? ListReportGroup_parameters.top : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_skip;
                ListReportGroup_nodeParamType = node.ListReportGroup_skipType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.skip = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.skip = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.skip = !!ListReportGroup_parameters.skip ? ListReportGroup_parameters.skip : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_search;
                ListReportGroup_nodeParamType = node.ListReportGroup_searchType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.search = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.search = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.search = !!ListReportGroup_parameters.search ? ListReportGroup_parameters.search : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_filter;
                ListReportGroup_nodeParamType = node.ListReportGroup_filterType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.filter = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.filter = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.filter = !!ListReportGroup_parameters.filter ? ListReportGroup_parameters.filter : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_count;
                ListReportGroup_nodeParamType = node.ListReportGroup_countType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.count = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.count = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.count = !!ListReportGroup_parameters.count ? ListReportGroup_parameters.count : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_orderby;
                ListReportGroup_nodeParamType = node.ListReportGroup_orderbyType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.orderby = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.orderby = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.orderby = !!ListReportGroup_parameters.orderby ? ListReportGroup_parameters.orderby : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_select;
                ListReportGroup_nodeParamType = node.ListReportGroup_selectType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.select = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.select = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.select = !!ListReportGroup_parameters.select ? ListReportGroup_parameters.select : msg.payload;
                
                ListReportGroup_nodeParam = node.ListReportGroup_expand;
                ListReportGroup_nodeParamType = node.ListReportGroup_expandType;
                if (ListReportGroup_nodeParamType === 'str') {
                    ListReportGroup_parameters.expand = ListReportGroup_nodeParam || '';
                } else {
                    ListReportGroup_parameters.expand = RED.util.getMessageProperty(msg, ListReportGroup_nodeParam);
                }
                ListReportGroup_parameters.expand = !!ListReportGroup_parameters.expand ? ListReportGroup_parameters.expand : msg.payload;
                                result = client.ListReportGroup(ListReportGroup_parameters);
            }
            if (!errorFlag && node.method === 'GetInboundRulesData') {
                var GetInboundRulesData_parameters = [];
                var GetInboundRulesData_nodeParam;
                var GetInboundRulesData_nodeParamType;

                GetInboundRulesData_nodeParam = node.GetInboundRulesData_top;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_topType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.top = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.top = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.top = !!GetInboundRulesData_parameters.top ? GetInboundRulesData_parameters.top : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_skip;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_skipType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.skip = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.skip = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.skip = !!GetInboundRulesData_parameters.skip ? GetInboundRulesData_parameters.skip : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_search;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_searchType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.search = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.search = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.search = !!GetInboundRulesData_parameters.search ? GetInboundRulesData_parameters.search : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_filter;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_filterType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.filter = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.filter = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.filter = !!GetInboundRulesData_parameters.filter ? GetInboundRulesData_parameters.filter : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_count;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_countType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.count = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.count = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.count = !!GetInboundRulesData_parameters.count ? GetInboundRulesData_parameters.count : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_select;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_selectType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.select = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.select = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.select = !!GetInboundRulesData_parameters.select ? GetInboundRulesData_parameters.select : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_orderby;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_orderbyType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.orderby = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.orderby = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.orderby = !!GetInboundRulesData_parameters.orderby ? GetInboundRulesData_parameters.orderby : msg.payload;
                
                GetInboundRulesData_nodeParam = node.GetInboundRulesData_expand;
                GetInboundRulesData_nodeParamType = node.GetInboundRulesData_expandType;
                if (GetInboundRulesData_nodeParamType === 'str') {
                    GetInboundRulesData_parameters.expand = GetInboundRulesData_nodeParam || '';
                } else {
                    GetInboundRulesData_parameters.expand = RED.util.getMessageProperty(msg, GetInboundRulesData_nodeParam);
                }
                GetInboundRulesData_parameters.expand = !!GetInboundRulesData_parameters.expand ? GetInboundRulesData_parameters.expand : msg.payload;
                                result = client.GetInboundRulesData(GetInboundRulesData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadInboundRules') {
                var DownloadInboundRules_parameters = [];
                var DownloadInboundRules_nodeParam;
                var DownloadInboundRules_nodeParamType;

                DownloadInboundRules_nodeParam = node.DownloadInboundRules_top;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_topType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.top = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.top = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.top = !!DownloadInboundRules_parameters.top ? DownloadInboundRules_parameters.top : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_skip;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_skipType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.skip = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.skip = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.skip = !!DownloadInboundRules_parameters.skip ? DownloadInboundRules_parameters.skip : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_search;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_searchType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.search = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.search = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.search = !!DownloadInboundRules_parameters.search ? DownloadInboundRules_parameters.search : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_filter;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_filterType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.filter = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.filter = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.filter = !!DownloadInboundRules_parameters.filter ? DownloadInboundRules_parameters.filter : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_count;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_countType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.count = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.count = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.count = !!DownloadInboundRules_parameters.count ? DownloadInboundRules_parameters.count : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_select;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_selectType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.select = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.select = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.select = !!DownloadInboundRules_parameters.select ? DownloadInboundRules_parameters.select : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_orderby;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_orderbyType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.orderby = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.orderby = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.orderby = !!DownloadInboundRules_parameters.orderby ? DownloadInboundRules_parameters.orderby : msg.payload;
                
                DownloadInboundRules_nodeParam = node.DownloadInboundRules_expand;
                DownloadInboundRules_nodeParamType = node.DownloadInboundRules_expandType;
                if (DownloadInboundRules_nodeParamType === 'str') {
                    DownloadInboundRules_parameters.expand = DownloadInboundRules_nodeParam || '';
                } else {
                    DownloadInboundRules_parameters.expand = RED.util.getMessageProperty(msg, DownloadInboundRules_nodeParam);
                }
                DownloadInboundRules_parameters.expand = !!DownloadInboundRules_parameters.expand ? DownloadInboundRules_parameters.expand : msg.payload;
                                result = client.DownloadInboundRules(DownloadInboundRules_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueAgentsChatStatisticsData') {
                var GetQueueAgentsChatStatisticsData_parameters = [];
                var GetQueueAgentsChatStatisticsData_nodeParam;
                var GetQueueAgentsChatStatisticsData_nodeParamType;

                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_queueDnStr;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_queueDnStrType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.queueDnStr = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.queueDnStr = !!GetQueueAgentsChatStatisticsData_parameters.queueDnStr ? GetQueueAgentsChatStatisticsData_parameters.queueDnStr : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_startDt;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_startDtType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.startDt = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.startDt = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.startDt = !!GetQueueAgentsChatStatisticsData_parameters.startDt ? GetQueueAgentsChatStatisticsData_parameters.startDt : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_endDt;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_endDtType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.endDt = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.endDt = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.endDt = !!GetQueueAgentsChatStatisticsData_parameters.endDt ? GetQueueAgentsChatStatisticsData_parameters.endDt : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_participantType;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_participantTypeType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.participantType = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.participantType = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.participantType = !!GetQueueAgentsChatStatisticsData_parameters.participantType ? GetQueueAgentsChatStatisticsData_parameters.participantType : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_top;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_topType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.top = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.top = !!GetQueueAgentsChatStatisticsData_parameters.top ? GetQueueAgentsChatStatisticsData_parameters.top : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_skip;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_skipType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.skip = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.skip = !!GetQueueAgentsChatStatisticsData_parameters.skip ? GetQueueAgentsChatStatisticsData_parameters.skip : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_search;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_searchType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.search = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.search = !!GetQueueAgentsChatStatisticsData_parameters.search ? GetQueueAgentsChatStatisticsData_parameters.search : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_filter;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_filterType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.filter = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.filter = !!GetQueueAgentsChatStatisticsData_parameters.filter ? GetQueueAgentsChatStatisticsData_parameters.filter : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_count;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_countType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.count = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.count = !!GetQueueAgentsChatStatisticsData_parameters.count ? GetQueueAgentsChatStatisticsData_parameters.count : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_select;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_selectType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.select = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.select = !!GetQueueAgentsChatStatisticsData_parameters.select ? GetQueueAgentsChatStatisticsData_parameters.select : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_orderby;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_orderbyType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.orderby = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.orderby = !!GetQueueAgentsChatStatisticsData_parameters.orderby ? GetQueueAgentsChatStatisticsData_parameters.orderby : msg.payload;
                
                GetQueueAgentsChatStatisticsData_nodeParam = node.GetQueueAgentsChatStatisticsData_expand;
                GetQueueAgentsChatStatisticsData_nodeParamType = node.GetQueueAgentsChatStatisticsData_expandType;
                if (GetQueueAgentsChatStatisticsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsData_parameters.expand = GetQueueAgentsChatStatisticsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsData_parameters.expand = !!GetQueueAgentsChatStatisticsData_parameters.expand ? GetQueueAgentsChatStatisticsData_parameters.expand : msg.payload;
                                result = client.GetQueueAgentsChatStatisticsData(GetQueueAgentsChatStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueAgentsChatStatistics') {
                var DownloadQueueAgentsChatStatistics_parameters = [];
                var DownloadQueueAgentsChatStatistics_nodeParam;
                var DownloadQueueAgentsChatStatistics_nodeParamType;

                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_queueDnStr;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_queueDnStrType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.queueDnStr = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.queueDnStr = !!DownloadQueueAgentsChatStatistics_parameters.queueDnStr ? DownloadQueueAgentsChatStatistics_parameters.queueDnStr : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_startDt;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_startDtType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.startDt = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.startDt = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.startDt = !!DownloadQueueAgentsChatStatistics_parameters.startDt ? DownloadQueueAgentsChatStatistics_parameters.startDt : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_endDt;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_endDtType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.endDt = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.endDt = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.endDt = !!DownloadQueueAgentsChatStatistics_parameters.endDt ? DownloadQueueAgentsChatStatistics_parameters.endDt : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_participantType;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_participantTypeType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.participantType = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.participantType = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.participantType = !!DownloadQueueAgentsChatStatistics_parameters.participantType ? DownloadQueueAgentsChatStatistics_parameters.participantType : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_top;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_topType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.top = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.top = !!DownloadQueueAgentsChatStatistics_parameters.top ? DownloadQueueAgentsChatStatistics_parameters.top : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_skip;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_skipType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.skip = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.skip = !!DownloadQueueAgentsChatStatistics_parameters.skip ? DownloadQueueAgentsChatStatistics_parameters.skip : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_search;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_searchType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.search = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.search = !!DownloadQueueAgentsChatStatistics_parameters.search ? DownloadQueueAgentsChatStatistics_parameters.search : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_filter;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_filterType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.filter = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.filter = !!DownloadQueueAgentsChatStatistics_parameters.filter ? DownloadQueueAgentsChatStatistics_parameters.filter : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_count;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_countType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.count = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.count = !!DownloadQueueAgentsChatStatistics_parameters.count ? DownloadQueueAgentsChatStatistics_parameters.count : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_select;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_selectType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.select = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.select = !!DownloadQueueAgentsChatStatistics_parameters.select ? DownloadQueueAgentsChatStatistics_parameters.select : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_orderby;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_orderbyType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.orderby = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.orderby = !!DownloadQueueAgentsChatStatistics_parameters.orderby ? DownloadQueueAgentsChatStatistics_parameters.orderby : msg.payload;
                
                DownloadQueueAgentsChatStatistics_nodeParam = node.DownloadQueueAgentsChatStatistics_expand;
                DownloadQueueAgentsChatStatistics_nodeParamType = node.DownloadQueueAgentsChatStatistics_expandType;
                if (DownloadQueueAgentsChatStatistics_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatistics_parameters.expand = DownloadQueueAgentsChatStatistics_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatistics_nodeParam);
                }
                DownloadQueueAgentsChatStatistics_parameters.expand = !!DownloadQueueAgentsChatStatistics_parameters.expand ? DownloadQueueAgentsChatStatistics_parameters.expand : msg.payload;
                                result = client.DownloadQueueAgentsChatStatistics(DownloadQueueAgentsChatStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueAgentsChatStatisticsTotalsData') {
                var GetQueueAgentsChatStatisticsTotalsData_parameters = [];
                var GetQueueAgentsChatStatisticsTotalsData_nodeParam;
                var GetQueueAgentsChatStatisticsTotalsData_nodeParamType;

                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_queueDnStr;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_queueDnStrType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.queueDnStr = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.queueDnStr = !!GetQueueAgentsChatStatisticsTotalsData_parameters.queueDnStr ? GetQueueAgentsChatStatisticsTotalsData_parameters.queueDnStr : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_startDt;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_startDtType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.startDt = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.startDt = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.startDt = !!GetQueueAgentsChatStatisticsTotalsData_parameters.startDt ? GetQueueAgentsChatStatisticsTotalsData_parameters.startDt : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_endDt;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_endDtType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.endDt = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.endDt = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.endDt = !!GetQueueAgentsChatStatisticsTotalsData_parameters.endDt ? GetQueueAgentsChatStatisticsTotalsData_parameters.endDt : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_participantType;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_participantTypeType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.participantType = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.participantType = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.participantType = !!GetQueueAgentsChatStatisticsTotalsData_parameters.participantType ? GetQueueAgentsChatStatisticsTotalsData_parameters.participantType : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_top;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_topType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.top = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.top = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.top = !!GetQueueAgentsChatStatisticsTotalsData_parameters.top ? GetQueueAgentsChatStatisticsTotalsData_parameters.top : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_skip;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_skipType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.skip = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.skip = !!GetQueueAgentsChatStatisticsTotalsData_parameters.skip ? GetQueueAgentsChatStatisticsTotalsData_parameters.skip : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_search;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_searchType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.search = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.search = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.search = !!GetQueueAgentsChatStatisticsTotalsData_parameters.search ? GetQueueAgentsChatStatisticsTotalsData_parameters.search : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_filter;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_filterType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.filter = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.filter = !!GetQueueAgentsChatStatisticsTotalsData_parameters.filter ? GetQueueAgentsChatStatisticsTotalsData_parameters.filter : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_count;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_countType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.count = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.count = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.count = !!GetQueueAgentsChatStatisticsTotalsData_parameters.count ? GetQueueAgentsChatStatisticsTotalsData_parameters.count : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_select;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_selectType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.select = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.select = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.select = !!GetQueueAgentsChatStatisticsTotalsData_parameters.select ? GetQueueAgentsChatStatisticsTotalsData_parameters.select : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_orderby;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_orderbyType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.orderby = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.orderby = !!GetQueueAgentsChatStatisticsTotalsData_parameters.orderby ? GetQueueAgentsChatStatisticsTotalsData_parameters.orderby : msg.payload;
                
                GetQueueAgentsChatStatisticsTotalsData_nodeParam = node.GetQueueAgentsChatStatisticsTotalsData_expand;
                GetQueueAgentsChatStatisticsTotalsData_nodeParamType = node.GetQueueAgentsChatStatisticsTotalsData_expandType;
                if (GetQueueAgentsChatStatisticsTotalsData_nodeParamType === 'str') {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.expand = GetQueueAgentsChatStatisticsTotalsData_nodeParam || '';
                } else {
                    GetQueueAgentsChatStatisticsTotalsData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueAgentsChatStatisticsTotalsData_nodeParam);
                }
                GetQueueAgentsChatStatisticsTotalsData_parameters.expand = !!GetQueueAgentsChatStatisticsTotalsData_parameters.expand ? GetQueueAgentsChatStatisticsTotalsData_parameters.expand : msg.payload;
                                result = client.GetQueueAgentsChatStatisticsTotalsData(GetQueueAgentsChatStatisticsTotalsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueAgentsChatStatisticsTotals') {
                var DownloadQueueAgentsChatStatisticsTotals_parameters = [];
                var DownloadQueueAgentsChatStatisticsTotals_nodeParam;
                var DownloadQueueAgentsChatStatisticsTotals_nodeParamType;

                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_queueDnStr;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_queueDnStrType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.queueDnStr = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.queueDnStr = !!DownloadQueueAgentsChatStatisticsTotals_parameters.queueDnStr ? DownloadQueueAgentsChatStatisticsTotals_parameters.queueDnStr : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_startDt;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_startDtType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.startDt = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.startDt = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.startDt = !!DownloadQueueAgentsChatStatisticsTotals_parameters.startDt ? DownloadQueueAgentsChatStatisticsTotals_parameters.startDt : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_endDt;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_endDtType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.endDt = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.endDt = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.endDt = !!DownloadQueueAgentsChatStatisticsTotals_parameters.endDt ? DownloadQueueAgentsChatStatisticsTotals_parameters.endDt : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_participantType;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_participantTypeType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.participantType = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.participantType = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.participantType = !!DownloadQueueAgentsChatStatisticsTotals_parameters.participantType ? DownloadQueueAgentsChatStatisticsTotals_parameters.participantType : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_top;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_topType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.top = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.top = !!DownloadQueueAgentsChatStatisticsTotals_parameters.top ? DownloadQueueAgentsChatStatisticsTotals_parameters.top : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_skip;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_skipType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.skip = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.skip = !!DownloadQueueAgentsChatStatisticsTotals_parameters.skip ? DownloadQueueAgentsChatStatisticsTotals_parameters.skip : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_search;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_searchType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.search = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.search = !!DownloadQueueAgentsChatStatisticsTotals_parameters.search ? DownloadQueueAgentsChatStatisticsTotals_parameters.search : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_filter;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_filterType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.filter = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.filter = !!DownloadQueueAgentsChatStatisticsTotals_parameters.filter ? DownloadQueueAgentsChatStatisticsTotals_parameters.filter : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_count;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_countType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.count = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.count = !!DownloadQueueAgentsChatStatisticsTotals_parameters.count ? DownloadQueueAgentsChatStatisticsTotals_parameters.count : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_select;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_selectType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.select = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.select = !!DownloadQueueAgentsChatStatisticsTotals_parameters.select ? DownloadQueueAgentsChatStatisticsTotals_parameters.select : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_orderby;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_orderbyType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.orderby = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.orderby = !!DownloadQueueAgentsChatStatisticsTotals_parameters.orderby ? DownloadQueueAgentsChatStatisticsTotals_parameters.orderby : msg.payload;
                
                DownloadQueueAgentsChatStatisticsTotals_nodeParam = node.DownloadQueueAgentsChatStatisticsTotals_expand;
                DownloadQueueAgentsChatStatisticsTotals_nodeParamType = node.DownloadQueueAgentsChatStatisticsTotals_expandType;
                if (DownloadQueueAgentsChatStatisticsTotals_nodeParamType === 'str') {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.expand = DownloadQueueAgentsChatStatisticsTotals_nodeParam || '';
                } else {
                    DownloadQueueAgentsChatStatisticsTotals_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueAgentsChatStatisticsTotals_nodeParam);
                }
                DownloadQueueAgentsChatStatisticsTotals_parameters.expand = !!DownloadQueueAgentsChatStatisticsTotals_parameters.expand ? DownloadQueueAgentsChatStatisticsTotals_parameters.expand : msg.payload;
                                result = client.DownloadQueueAgentsChatStatisticsTotals(DownloadQueueAgentsChatStatisticsTotals_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueAnsweredCallsByWaitTimeData') {
                var GetQueueAnsweredCallsByWaitTimeData_parameters = [];
                var GetQueueAnsweredCallsByWaitTimeData_nodeParam;
                var GetQueueAnsweredCallsByWaitTimeData_nodeParamType;

                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_queueDnStr;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_queueDnStrType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.queueDnStr = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.queueDnStr = !!GetQueueAnsweredCallsByWaitTimeData_parameters.queueDnStr ? GetQueueAnsweredCallsByWaitTimeData_parameters.queueDnStr : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_startDt;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_startDtType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.startDt = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.startDt = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.startDt = !!GetQueueAnsweredCallsByWaitTimeData_parameters.startDt ? GetQueueAnsweredCallsByWaitTimeData_parameters.startDt : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_endDt;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_endDtType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.endDt = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.endDt = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.endDt = !!GetQueueAnsweredCallsByWaitTimeData_parameters.endDt ? GetQueueAnsweredCallsByWaitTimeData_parameters.endDt : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_answerInterval;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_answerIntervalType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.answerInterval = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.answerInterval = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.answerInterval = !!GetQueueAnsweredCallsByWaitTimeData_parameters.answerInterval ? GetQueueAnsweredCallsByWaitTimeData_parameters.answerInterval : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_top;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_topType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.top = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.top = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.top = !!GetQueueAnsweredCallsByWaitTimeData_parameters.top ? GetQueueAnsweredCallsByWaitTimeData_parameters.top : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_skip;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_skipType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.skip = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.skip = !!GetQueueAnsweredCallsByWaitTimeData_parameters.skip ? GetQueueAnsweredCallsByWaitTimeData_parameters.skip : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_search;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_searchType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.search = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.search = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.search = !!GetQueueAnsweredCallsByWaitTimeData_parameters.search ? GetQueueAnsweredCallsByWaitTimeData_parameters.search : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_filter;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_filterType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.filter = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.filter = !!GetQueueAnsweredCallsByWaitTimeData_parameters.filter ? GetQueueAnsweredCallsByWaitTimeData_parameters.filter : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_count;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_countType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.count = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.count = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.count = !!GetQueueAnsweredCallsByWaitTimeData_parameters.count ? GetQueueAnsweredCallsByWaitTimeData_parameters.count : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_select;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_selectType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.select = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.select = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.select = !!GetQueueAnsweredCallsByWaitTimeData_parameters.select ? GetQueueAnsweredCallsByWaitTimeData_parameters.select : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_orderby;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_orderbyType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.orderby = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.orderby = !!GetQueueAnsweredCallsByWaitTimeData_parameters.orderby ? GetQueueAnsweredCallsByWaitTimeData_parameters.orderby : msg.payload;
                
                GetQueueAnsweredCallsByWaitTimeData_nodeParam = node.GetQueueAnsweredCallsByWaitTimeData_expand;
                GetQueueAnsweredCallsByWaitTimeData_nodeParamType = node.GetQueueAnsweredCallsByWaitTimeData_expandType;
                if (GetQueueAnsweredCallsByWaitTimeData_nodeParamType === 'str') {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.expand = GetQueueAnsweredCallsByWaitTimeData_nodeParam || '';
                } else {
                    GetQueueAnsweredCallsByWaitTimeData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueAnsweredCallsByWaitTimeData_nodeParam);
                }
                GetQueueAnsweredCallsByWaitTimeData_parameters.expand = !!GetQueueAnsweredCallsByWaitTimeData_parameters.expand ? GetQueueAnsweredCallsByWaitTimeData_parameters.expand : msg.payload;
                                result = client.GetQueueAnsweredCallsByWaitTimeData(GetQueueAnsweredCallsByWaitTimeData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueAnsweredCallsByWaitTime') {
                var DownloadQueueAnsweredCallsByWaitTime_parameters = [];
                var DownloadQueueAnsweredCallsByWaitTime_nodeParam;
                var DownloadQueueAnsweredCallsByWaitTime_nodeParamType;

                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_queueDnStr;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_queueDnStrType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.queueDnStr = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.queueDnStr = !!DownloadQueueAnsweredCallsByWaitTime_parameters.queueDnStr ? DownloadQueueAnsweredCallsByWaitTime_parameters.queueDnStr : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_startDt;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_startDtType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.startDt = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.startDt = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.startDt = !!DownloadQueueAnsweredCallsByWaitTime_parameters.startDt ? DownloadQueueAnsweredCallsByWaitTime_parameters.startDt : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_endDt;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_endDtType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.endDt = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.endDt = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.endDt = !!DownloadQueueAnsweredCallsByWaitTime_parameters.endDt ? DownloadQueueAnsweredCallsByWaitTime_parameters.endDt : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_answerInterval;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_answerIntervalType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.answerInterval = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.answerInterval = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.answerInterval = !!DownloadQueueAnsweredCallsByWaitTime_parameters.answerInterval ? DownloadQueueAnsweredCallsByWaitTime_parameters.answerInterval : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_clientTimeZone;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_clientTimeZoneType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.clientTimeZone = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.clientTimeZone = !!DownloadQueueAnsweredCallsByWaitTime_parameters.clientTimeZone ? DownloadQueueAnsweredCallsByWaitTime_parameters.clientTimeZone : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_top;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_topType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.top = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.top = !!DownloadQueueAnsweredCallsByWaitTime_parameters.top ? DownloadQueueAnsweredCallsByWaitTime_parameters.top : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_skip;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_skipType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.skip = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.skip = !!DownloadQueueAnsweredCallsByWaitTime_parameters.skip ? DownloadQueueAnsweredCallsByWaitTime_parameters.skip : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_search;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_searchType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.search = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.search = !!DownloadQueueAnsweredCallsByWaitTime_parameters.search ? DownloadQueueAnsweredCallsByWaitTime_parameters.search : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_filter;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_filterType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.filter = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.filter = !!DownloadQueueAnsweredCallsByWaitTime_parameters.filter ? DownloadQueueAnsweredCallsByWaitTime_parameters.filter : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_count;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_countType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.count = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.count = !!DownloadQueueAnsweredCallsByWaitTime_parameters.count ? DownloadQueueAnsweredCallsByWaitTime_parameters.count : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_select;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_selectType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.select = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.select = !!DownloadQueueAnsweredCallsByWaitTime_parameters.select ? DownloadQueueAnsweredCallsByWaitTime_parameters.select : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_orderby;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_orderbyType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.orderby = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.orderby = !!DownloadQueueAnsweredCallsByWaitTime_parameters.orderby ? DownloadQueueAnsweredCallsByWaitTime_parameters.orderby : msg.payload;
                
                DownloadQueueAnsweredCallsByWaitTime_nodeParam = node.DownloadQueueAnsweredCallsByWaitTime_expand;
                DownloadQueueAnsweredCallsByWaitTime_nodeParamType = node.DownloadQueueAnsweredCallsByWaitTime_expandType;
                if (DownloadQueueAnsweredCallsByWaitTime_nodeParamType === 'str') {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.expand = DownloadQueueAnsweredCallsByWaitTime_nodeParam || '';
                } else {
                    DownloadQueueAnsweredCallsByWaitTime_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueAnsweredCallsByWaitTime_nodeParam);
                }
                DownloadQueueAnsweredCallsByWaitTime_parameters.expand = !!DownloadQueueAnsweredCallsByWaitTime_parameters.expand ? DownloadQueueAnsweredCallsByWaitTime_parameters.expand : msg.payload;
                                result = client.DownloadQueueAnsweredCallsByWaitTime(DownloadQueueAnsweredCallsByWaitTime_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueAnUnCallsData') {
                var GetQueueAnUnCallsData_parameters = [];
                var GetQueueAnUnCallsData_nodeParam;
                var GetQueueAnUnCallsData_nodeParamType;

                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_chartDate;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_chartDateType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.chartDate = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.chartDate = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.chartDate = !!GetQueueAnUnCallsData_parameters.chartDate ? GetQueueAnUnCallsData_parameters.chartDate : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_chartBy;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_chartByType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.chartBy = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.chartBy = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.chartBy = !!GetQueueAnUnCallsData_parameters.chartBy ? GetQueueAnUnCallsData_parameters.chartBy : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_queueDnStr;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_queueDnStrType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.queueDnStr = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.queueDnStr = !!GetQueueAnUnCallsData_parameters.queueDnStr ? GetQueueAnUnCallsData_parameters.queueDnStr : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_clientTimeZone;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_clientTimeZoneType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.clientTimeZone = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.clientTimeZone = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.clientTimeZone = !!GetQueueAnUnCallsData_parameters.clientTimeZone ? GetQueueAnUnCallsData_parameters.clientTimeZone : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_waitInterval;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_waitIntervalType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.waitInterval = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.waitInterval = !!GetQueueAnUnCallsData_parameters.waitInterval ? GetQueueAnUnCallsData_parameters.waitInterval : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_top;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_topType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.top = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.top = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.top = !!GetQueueAnUnCallsData_parameters.top ? GetQueueAnUnCallsData_parameters.top : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_skip;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_skipType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.skip = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.skip = !!GetQueueAnUnCallsData_parameters.skip ? GetQueueAnUnCallsData_parameters.skip : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_search;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_searchType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.search = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.search = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.search = !!GetQueueAnUnCallsData_parameters.search ? GetQueueAnUnCallsData_parameters.search : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_filter;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_filterType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.filter = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.filter = !!GetQueueAnUnCallsData_parameters.filter ? GetQueueAnUnCallsData_parameters.filter : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_count;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_countType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.count = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.count = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.count = !!GetQueueAnUnCallsData_parameters.count ? GetQueueAnUnCallsData_parameters.count : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_select;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_selectType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.select = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.select = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.select = !!GetQueueAnUnCallsData_parameters.select ? GetQueueAnUnCallsData_parameters.select : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_orderby;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_orderbyType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.orderby = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.orderby = !!GetQueueAnUnCallsData_parameters.orderby ? GetQueueAnUnCallsData_parameters.orderby : msg.payload;
                
                GetQueueAnUnCallsData_nodeParam = node.GetQueueAnUnCallsData_expand;
                GetQueueAnUnCallsData_nodeParamType = node.GetQueueAnUnCallsData_expandType;
                if (GetQueueAnUnCallsData_nodeParamType === 'str') {
                    GetQueueAnUnCallsData_parameters.expand = GetQueueAnUnCallsData_nodeParam || '';
                } else {
                    GetQueueAnUnCallsData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueAnUnCallsData_nodeParam);
                }
                GetQueueAnUnCallsData_parameters.expand = !!GetQueueAnUnCallsData_parameters.expand ? GetQueueAnUnCallsData_parameters.expand : msg.payload;
                                result = client.GetQueueAnUnCallsData(GetQueueAnUnCallsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueAnUnCallsReport') {
                var DownloadQueueAnUnCallsReport_parameters = [];
                var DownloadQueueAnUnCallsReport_nodeParam;
                var DownloadQueueAnUnCallsReport_nodeParamType;

                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_chartDate;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_chartDateType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.chartDate = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.chartDate = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.chartDate = !!DownloadQueueAnUnCallsReport_parameters.chartDate ? DownloadQueueAnUnCallsReport_parameters.chartDate : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_chartBy;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_chartByType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.chartBy = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.chartBy = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.chartBy = !!DownloadQueueAnUnCallsReport_parameters.chartBy ? DownloadQueueAnUnCallsReport_parameters.chartBy : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_queueDnStr;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_queueDnStrType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.queueDnStr = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.queueDnStr = !!DownloadQueueAnUnCallsReport_parameters.queueDnStr ? DownloadQueueAnUnCallsReport_parameters.queueDnStr : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_clientTimeZone;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_clientTimeZoneType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.clientTimeZone = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.clientTimeZone = !!DownloadQueueAnUnCallsReport_parameters.clientTimeZone ? DownloadQueueAnUnCallsReport_parameters.clientTimeZone : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_waitInterval;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_waitIntervalType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.waitInterval = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.waitInterval = !!DownloadQueueAnUnCallsReport_parameters.waitInterval ? DownloadQueueAnUnCallsReport_parameters.waitInterval : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_top;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_topType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.top = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.top = !!DownloadQueueAnUnCallsReport_parameters.top ? DownloadQueueAnUnCallsReport_parameters.top : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_skip;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_skipType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.skip = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.skip = !!DownloadQueueAnUnCallsReport_parameters.skip ? DownloadQueueAnUnCallsReport_parameters.skip : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_search;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_searchType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.search = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.search = !!DownloadQueueAnUnCallsReport_parameters.search ? DownloadQueueAnUnCallsReport_parameters.search : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_filter;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_filterType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.filter = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.filter = !!DownloadQueueAnUnCallsReport_parameters.filter ? DownloadQueueAnUnCallsReport_parameters.filter : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_count;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_countType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.count = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.count = !!DownloadQueueAnUnCallsReport_parameters.count ? DownloadQueueAnUnCallsReport_parameters.count : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_select;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_selectType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.select = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.select = !!DownloadQueueAnUnCallsReport_parameters.select ? DownloadQueueAnUnCallsReport_parameters.select : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_orderby;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_orderbyType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.orderby = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.orderby = !!DownloadQueueAnUnCallsReport_parameters.orderby ? DownloadQueueAnUnCallsReport_parameters.orderby : msg.payload;
                
                DownloadQueueAnUnCallsReport_nodeParam = node.DownloadQueueAnUnCallsReport_expand;
                DownloadQueueAnUnCallsReport_nodeParamType = node.DownloadQueueAnUnCallsReport_expandType;
                if (DownloadQueueAnUnCallsReport_nodeParamType === 'str') {
                    DownloadQueueAnUnCallsReport_parameters.expand = DownloadQueueAnUnCallsReport_nodeParam || '';
                } else {
                    DownloadQueueAnUnCallsReport_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueAnUnCallsReport_nodeParam);
                }
                DownloadQueueAnUnCallsReport_parameters.expand = !!DownloadQueueAnUnCallsReport_parameters.expand ? DownloadQueueAnUnCallsReport_parameters.expand : msg.payload;
                                result = client.DownloadQueueAnUnCallsReport(DownloadQueueAnUnCallsReport_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueCallbacksData') {
                var GetQueueCallbacksData_parameters = [];
                var GetQueueCallbacksData_nodeParam;
                var GetQueueCallbacksData_nodeParamType;

                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_queueDnStr;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_queueDnStrType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.queueDnStr = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.queueDnStr = !!GetQueueCallbacksData_parameters.queueDnStr ? GetQueueCallbacksData_parameters.queueDnStr : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_startDt;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_startDtType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.startDt = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.startDt = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.startDt = !!GetQueueCallbacksData_parameters.startDt ? GetQueueCallbacksData_parameters.startDt : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_endDt;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_endDtType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.endDt = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.endDt = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.endDt = !!GetQueueCallbacksData_parameters.endDt ? GetQueueCallbacksData_parameters.endDt : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_top;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_topType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.top = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.top = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.top = !!GetQueueCallbacksData_parameters.top ? GetQueueCallbacksData_parameters.top : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_skip;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_skipType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.skip = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.skip = !!GetQueueCallbacksData_parameters.skip ? GetQueueCallbacksData_parameters.skip : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_search;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_searchType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.search = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.search = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.search = !!GetQueueCallbacksData_parameters.search ? GetQueueCallbacksData_parameters.search : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_filter;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_filterType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.filter = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.filter = !!GetQueueCallbacksData_parameters.filter ? GetQueueCallbacksData_parameters.filter : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_count;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_countType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.count = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.count = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.count = !!GetQueueCallbacksData_parameters.count ? GetQueueCallbacksData_parameters.count : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_select;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_selectType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.select = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.select = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.select = !!GetQueueCallbacksData_parameters.select ? GetQueueCallbacksData_parameters.select : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_orderby;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_orderbyType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.orderby = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.orderby = !!GetQueueCallbacksData_parameters.orderby ? GetQueueCallbacksData_parameters.orderby : msg.payload;
                
                GetQueueCallbacksData_nodeParam = node.GetQueueCallbacksData_expand;
                GetQueueCallbacksData_nodeParamType = node.GetQueueCallbacksData_expandType;
                if (GetQueueCallbacksData_nodeParamType === 'str') {
                    GetQueueCallbacksData_parameters.expand = GetQueueCallbacksData_nodeParam || '';
                } else {
                    GetQueueCallbacksData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueCallbacksData_nodeParam);
                }
                GetQueueCallbacksData_parameters.expand = !!GetQueueCallbacksData_parameters.expand ? GetQueueCallbacksData_parameters.expand : msg.payload;
                                result = client.GetQueueCallbacksData(GetQueueCallbacksData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueCallbacks') {
                var DownloadQueueCallbacks_parameters = [];
                var DownloadQueueCallbacks_nodeParam;
                var DownloadQueueCallbacks_nodeParamType;

                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_queueDnStr;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_queueDnStrType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.queueDnStr = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.queueDnStr = !!DownloadQueueCallbacks_parameters.queueDnStr ? DownloadQueueCallbacks_parameters.queueDnStr : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_startDt;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_startDtType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.startDt = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.startDt = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.startDt = !!DownloadQueueCallbacks_parameters.startDt ? DownloadQueueCallbacks_parameters.startDt : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_endDt;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_endDtType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.endDt = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.endDt = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.endDt = !!DownloadQueueCallbacks_parameters.endDt ? DownloadQueueCallbacks_parameters.endDt : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_top;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_topType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.top = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.top = !!DownloadQueueCallbacks_parameters.top ? DownloadQueueCallbacks_parameters.top : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_skip;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_skipType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.skip = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.skip = !!DownloadQueueCallbacks_parameters.skip ? DownloadQueueCallbacks_parameters.skip : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_search;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_searchType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.search = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.search = !!DownloadQueueCallbacks_parameters.search ? DownloadQueueCallbacks_parameters.search : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_filter;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_filterType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.filter = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.filter = !!DownloadQueueCallbacks_parameters.filter ? DownloadQueueCallbacks_parameters.filter : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_count;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_countType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.count = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.count = !!DownloadQueueCallbacks_parameters.count ? DownloadQueueCallbacks_parameters.count : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_select;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_selectType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.select = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.select = !!DownloadQueueCallbacks_parameters.select ? DownloadQueueCallbacks_parameters.select : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_orderby;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_orderbyType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.orderby = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.orderby = !!DownloadQueueCallbacks_parameters.orderby ? DownloadQueueCallbacks_parameters.orderby : msg.payload;
                
                DownloadQueueCallbacks_nodeParam = node.DownloadQueueCallbacks_expand;
                DownloadQueueCallbacks_nodeParamType = node.DownloadQueueCallbacks_expandType;
                if (DownloadQueueCallbacks_nodeParamType === 'str') {
                    DownloadQueueCallbacks_parameters.expand = DownloadQueueCallbacks_nodeParam || '';
                } else {
                    DownloadQueueCallbacks_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueCallbacks_nodeParam);
                }
                DownloadQueueCallbacks_parameters.expand = !!DownloadQueueCallbacks_parameters.expand ? DownloadQueueCallbacks_parameters.expand : msg.payload;
                                result = client.DownloadQueueCallbacks(DownloadQueueCallbacks_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueChatPerformanceData') {
                var GetQueueChatPerformanceData_parameters = [];
                var GetQueueChatPerformanceData_nodeParam;
                var GetQueueChatPerformanceData_nodeParamType;

                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_queueDnStr;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_queueDnStrType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.queueDnStr = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.queueDnStr = !!GetQueueChatPerformanceData_parameters.queueDnStr ? GetQueueChatPerformanceData_parameters.queueDnStr : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_startDt;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_startDtType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.startDt = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.startDt = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.startDt = !!GetQueueChatPerformanceData_parameters.startDt ? GetQueueChatPerformanceData_parameters.startDt : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_endDt;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_endDtType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.endDt = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.endDt = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.endDt = !!GetQueueChatPerformanceData_parameters.endDt ? GetQueueChatPerformanceData_parameters.endDt : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_participantType;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_participantTypeType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.participantType = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.participantType = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.participantType = !!GetQueueChatPerformanceData_parameters.participantType ? GetQueueChatPerformanceData_parameters.participantType : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_top;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_topType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.top = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.top = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.top = !!GetQueueChatPerformanceData_parameters.top ? GetQueueChatPerformanceData_parameters.top : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_skip;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_skipType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.skip = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.skip = !!GetQueueChatPerformanceData_parameters.skip ? GetQueueChatPerformanceData_parameters.skip : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_search;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_searchType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.search = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.search = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.search = !!GetQueueChatPerformanceData_parameters.search ? GetQueueChatPerformanceData_parameters.search : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_filter;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_filterType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.filter = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.filter = !!GetQueueChatPerformanceData_parameters.filter ? GetQueueChatPerformanceData_parameters.filter : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_count;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_countType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.count = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.count = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.count = !!GetQueueChatPerformanceData_parameters.count ? GetQueueChatPerformanceData_parameters.count : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_select;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_selectType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.select = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.select = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.select = !!GetQueueChatPerformanceData_parameters.select ? GetQueueChatPerformanceData_parameters.select : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_orderby;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_orderbyType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.orderby = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.orderby = !!GetQueueChatPerformanceData_parameters.orderby ? GetQueueChatPerformanceData_parameters.orderby : msg.payload;
                
                GetQueueChatPerformanceData_nodeParam = node.GetQueueChatPerformanceData_expand;
                GetQueueChatPerformanceData_nodeParamType = node.GetQueueChatPerformanceData_expandType;
                if (GetQueueChatPerformanceData_nodeParamType === 'str') {
                    GetQueueChatPerformanceData_parameters.expand = GetQueueChatPerformanceData_nodeParam || '';
                } else {
                    GetQueueChatPerformanceData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueChatPerformanceData_nodeParam);
                }
                GetQueueChatPerformanceData_parameters.expand = !!GetQueueChatPerformanceData_parameters.expand ? GetQueueChatPerformanceData_parameters.expand : msg.payload;
                                result = client.GetQueueChatPerformanceData(GetQueueChatPerformanceData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueChatPerformance') {
                var DownloadQueueChatPerformance_parameters = [];
                var DownloadQueueChatPerformance_nodeParam;
                var DownloadQueueChatPerformance_nodeParamType;

                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_queueDnStr;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_queueDnStrType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.queueDnStr = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.queueDnStr = !!DownloadQueueChatPerformance_parameters.queueDnStr ? DownloadQueueChatPerformance_parameters.queueDnStr : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_startDt;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_startDtType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.startDt = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.startDt = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.startDt = !!DownloadQueueChatPerformance_parameters.startDt ? DownloadQueueChatPerformance_parameters.startDt : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_endDt;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_endDtType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.endDt = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.endDt = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.endDt = !!DownloadQueueChatPerformance_parameters.endDt ? DownloadQueueChatPerformance_parameters.endDt : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_participantType;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_participantTypeType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.participantType = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.participantType = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.participantType = !!DownloadQueueChatPerformance_parameters.participantType ? DownloadQueueChatPerformance_parameters.participantType : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_top;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_topType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.top = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.top = !!DownloadQueueChatPerformance_parameters.top ? DownloadQueueChatPerformance_parameters.top : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_skip;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_skipType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.skip = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.skip = !!DownloadQueueChatPerformance_parameters.skip ? DownloadQueueChatPerformance_parameters.skip : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_search;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_searchType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.search = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.search = !!DownloadQueueChatPerformance_parameters.search ? DownloadQueueChatPerformance_parameters.search : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_filter;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_filterType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.filter = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.filter = !!DownloadQueueChatPerformance_parameters.filter ? DownloadQueueChatPerformance_parameters.filter : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_count;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_countType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.count = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.count = !!DownloadQueueChatPerformance_parameters.count ? DownloadQueueChatPerformance_parameters.count : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_select;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_selectType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.select = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.select = !!DownloadQueueChatPerformance_parameters.select ? DownloadQueueChatPerformance_parameters.select : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_orderby;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_orderbyType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.orderby = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.orderby = !!DownloadQueueChatPerformance_parameters.orderby ? DownloadQueueChatPerformance_parameters.orderby : msg.payload;
                
                DownloadQueueChatPerformance_nodeParam = node.DownloadQueueChatPerformance_expand;
                DownloadQueueChatPerformance_nodeParamType = node.DownloadQueueChatPerformance_expandType;
                if (DownloadQueueChatPerformance_nodeParamType === 'str') {
                    DownloadQueueChatPerformance_parameters.expand = DownloadQueueChatPerformance_nodeParam || '';
                } else {
                    DownloadQueueChatPerformance_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueChatPerformance_nodeParam);
                }
                DownloadQueueChatPerformance_parameters.expand = !!DownloadQueueChatPerformance_parameters.expand ? DownloadQueueChatPerformance_parameters.expand : msg.payload;
                                result = client.DownloadQueueChatPerformance(DownloadQueueChatPerformance_parameters);
            }
            if (!errorFlag && node.method === 'GetQueueFailedCallbacksData') {
                var GetQueueFailedCallbacksData_parameters = [];
                var GetQueueFailedCallbacksData_nodeParam;
                var GetQueueFailedCallbacksData_nodeParamType;

                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_queueDnStr;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_queueDnStrType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.queueDnStr = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.queueDnStr = !!GetQueueFailedCallbacksData_parameters.queueDnStr ? GetQueueFailedCallbacksData_parameters.queueDnStr : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_startDt;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_startDtType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.startDt = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.startDt = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.startDt = !!GetQueueFailedCallbacksData_parameters.startDt ? GetQueueFailedCallbacksData_parameters.startDt : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_endDt;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_endDtType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.endDt = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.endDt = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.endDt = !!GetQueueFailedCallbacksData_parameters.endDt ? GetQueueFailedCallbacksData_parameters.endDt : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_top;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_topType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.top = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.top = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.top = !!GetQueueFailedCallbacksData_parameters.top ? GetQueueFailedCallbacksData_parameters.top : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_skip;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_skipType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.skip = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.skip = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.skip = !!GetQueueFailedCallbacksData_parameters.skip ? GetQueueFailedCallbacksData_parameters.skip : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_search;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_searchType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.search = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.search = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.search = !!GetQueueFailedCallbacksData_parameters.search ? GetQueueFailedCallbacksData_parameters.search : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_filter;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_filterType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.filter = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.filter = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.filter = !!GetQueueFailedCallbacksData_parameters.filter ? GetQueueFailedCallbacksData_parameters.filter : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_count;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_countType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.count = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.count = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.count = !!GetQueueFailedCallbacksData_parameters.count ? GetQueueFailedCallbacksData_parameters.count : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_select;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_selectType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.select = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.select = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.select = !!GetQueueFailedCallbacksData_parameters.select ? GetQueueFailedCallbacksData_parameters.select : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_orderby;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_orderbyType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.orderby = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.orderby = !!GetQueueFailedCallbacksData_parameters.orderby ? GetQueueFailedCallbacksData_parameters.orderby : msg.payload;
                
                GetQueueFailedCallbacksData_nodeParam = node.GetQueueFailedCallbacksData_expand;
                GetQueueFailedCallbacksData_nodeParamType = node.GetQueueFailedCallbacksData_expandType;
                if (GetQueueFailedCallbacksData_nodeParamType === 'str') {
                    GetQueueFailedCallbacksData_parameters.expand = GetQueueFailedCallbacksData_nodeParam || '';
                } else {
                    GetQueueFailedCallbacksData_parameters.expand = RED.util.getMessageProperty(msg, GetQueueFailedCallbacksData_nodeParam);
                }
                GetQueueFailedCallbacksData_parameters.expand = !!GetQueueFailedCallbacksData_parameters.expand ? GetQueueFailedCallbacksData_parameters.expand : msg.payload;
                                result = client.GetQueueFailedCallbacksData(GetQueueFailedCallbacksData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueueFailedCallbacks') {
                var DownloadQueueFailedCallbacks_parameters = [];
                var DownloadQueueFailedCallbacks_nodeParam;
                var DownloadQueueFailedCallbacks_nodeParamType;

                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_queueDnStr;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_queueDnStrType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.queueDnStr = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.queueDnStr = !!DownloadQueueFailedCallbacks_parameters.queueDnStr ? DownloadQueueFailedCallbacks_parameters.queueDnStr : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_startDt;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_startDtType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.startDt = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.startDt = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.startDt = !!DownloadQueueFailedCallbacks_parameters.startDt ? DownloadQueueFailedCallbacks_parameters.startDt : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_endDt;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_endDtType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.endDt = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.endDt = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.endDt = !!DownloadQueueFailedCallbacks_parameters.endDt ? DownloadQueueFailedCallbacks_parameters.endDt : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_clientTimeZone;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_clientTimeZoneType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.clientTimeZone = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.clientTimeZone = !!DownloadQueueFailedCallbacks_parameters.clientTimeZone ? DownloadQueueFailedCallbacks_parameters.clientTimeZone : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_top;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_topType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.top = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.top = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.top = !!DownloadQueueFailedCallbacks_parameters.top ? DownloadQueueFailedCallbacks_parameters.top : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_skip;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_skipType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.skip = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.skip = !!DownloadQueueFailedCallbacks_parameters.skip ? DownloadQueueFailedCallbacks_parameters.skip : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_search;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_searchType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.search = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.search = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.search = !!DownloadQueueFailedCallbacks_parameters.search ? DownloadQueueFailedCallbacks_parameters.search : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_filter;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_filterType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.filter = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.filter = !!DownloadQueueFailedCallbacks_parameters.filter ? DownloadQueueFailedCallbacks_parameters.filter : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_count;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_countType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.count = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.count = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.count = !!DownloadQueueFailedCallbacks_parameters.count ? DownloadQueueFailedCallbacks_parameters.count : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_select;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_selectType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.select = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.select = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.select = !!DownloadQueueFailedCallbacks_parameters.select ? DownloadQueueFailedCallbacks_parameters.select : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_orderby;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_orderbyType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.orderby = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.orderby = !!DownloadQueueFailedCallbacks_parameters.orderby ? DownloadQueueFailedCallbacks_parameters.orderby : msg.payload;
                
                DownloadQueueFailedCallbacks_nodeParam = node.DownloadQueueFailedCallbacks_expand;
                DownloadQueueFailedCallbacks_nodeParamType = node.DownloadQueueFailedCallbacks_expandType;
                if (DownloadQueueFailedCallbacks_nodeParamType === 'str') {
                    DownloadQueueFailedCallbacks_parameters.expand = DownloadQueueFailedCallbacks_nodeParam || '';
                } else {
                    DownloadQueueFailedCallbacks_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueueFailedCallbacks_nodeParam);
                }
                DownloadQueueFailedCallbacks_parameters.expand = !!DownloadQueueFailedCallbacks_parameters.expand ? DownloadQueueFailedCallbacks_parameters.expand : msg.payload;
                                result = client.DownloadQueueFailedCallbacks(DownloadQueueFailedCallbacks_parameters);
            }
            if (!errorFlag && node.method === 'GetQueuePerformanceOverviewData') {
                var GetQueuePerformanceOverviewData_parameters = [];
                var GetQueuePerformanceOverviewData_nodeParam;
                var GetQueuePerformanceOverviewData_nodeParamType;

                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_periodFrom;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_periodFromType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.periodFrom = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.periodFrom = !!GetQueuePerformanceOverviewData_parameters.periodFrom ? GetQueuePerformanceOverviewData_parameters.periodFrom : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_periodTo;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_periodToType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.periodTo = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.periodTo = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.periodTo = !!GetQueuePerformanceOverviewData_parameters.periodTo ? GetQueuePerformanceOverviewData_parameters.periodTo : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_queueDns;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_queueDnsType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.queueDns = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.queueDns = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.queueDns = !!GetQueuePerformanceOverviewData_parameters.queueDns ? GetQueuePerformanceOverviewData_parameters.queueDns : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_waitInterval;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_waitIntervalType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.waitInterval = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.waitInterval = !!GetQueuePerformanceOverviewData_parameters.waitInterval ? GetQueuePerformanceOverviewData_parameters.waitInterval : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_top;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_topType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.top = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.top = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.top = !!GetQueuePerformanceOverviewData_parameters.top ? GetQueuePerformanceOverviewData_parameters.top : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_skip;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_skipType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.skip = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.skip = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.skip = !!GetQueuePerformanceOverviewData_parameters.skip ? GetQueuePerformanceOverviewData_parameters.skip : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_search;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_searchType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.search = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.search = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.search = !!GetQueuePerformanceOverviewData_parameters.search ? GetQueuePerformanceOverviewData_parameters.search : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_filter;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_filterType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.filter = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.filter = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.filter = !!GetQueuePerformanceOverviewData_parameters.filter ? GetQueuePerformanceOverviewData_parameters.filter : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_count;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_countType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.count = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.count = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.count = !!GetQueuePerformanceOverviewData_parameters.count ? GetQueuePerformanceOverviewData_parameters.count : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_select;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_selectType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.select = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.select = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.select = !!GetQueuePerformanceOverviewData_parameters.select ? GetQueuePerformanceOverviewData_parameters.select : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_orderby;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_orderbyType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.orderby = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.orderby = !!GetQueuePerformanceOverviewData_parameters.orderby ? GetQueuePerformanceOverviewData_parameters.orderby : msg.payload;
                
                GetQueuePerformanceOverviewData_nodeParam = node.GetQueuePerformanceOverviewData_expand;
                GetQueuePerformanceOverviewData_nodeParamType = node.GetQueuePerformanceOverviewData_expandType;
                if (GetQueuePerformanceOverviewData_nodeParamType === 'str') {
                    GetQueuePerformanceOverviewData_parameters.expand = GetQueuePerformanceOverviewData_nodeParam || '';
                } else {
                    GetQueuePerformanceOverviewData_parameters.expand = RED.util.getMessageProperty(msg, GetQueuePerformanceOverviewData_nodeParam);
                }
                GetQueuePerformanceOverviewData_parameters.expand = !!GetQueuePerformanceOverviewData_parameters.expand ? GetQueuePerformanceOverviewData_parameters.expand : msg.payload;
                                result = client.GetQueuePerformanceOverviewData(GetQueuePerformanceOverviewData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueuePerformanceOverview') {
                var DownloadQueuePerformanceOverview_parameters = [];
                var DownloadQueuePerformanceOverview_nodeParam;
                var DownloadQueuePerformanceOverview_nodeParamType;

                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_periodFrom;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_periodFromType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.periodFrom = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.periodFrom = !!DownloadQueuePerformanceOverview_parameters.periodFrom ? DownloadQueuePerformanceOverview_parameters.periodFrom : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_periodTo;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_periodToType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.periodTo = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.periodTo = !!DownloadQueuePerformanceOverview_parameters.periodTo ? DownloadQueuePerformanceOverview_parameters.periodTo : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_queueDns;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_queueDnsType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.queueDns = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.queueDns = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.queueDns = !!DownloadQueuePerformanceOverview_parameters.queueDns ? DownloadQueuePerformanceOverview_parameters.queueDns : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_waitInterval;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_waitIntervalType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.waitInterval = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.waitInterval = !!DownloadQueuePerformanceOverview_parameters.waitInterval ? DownloadQueuePerformanceOverview_parameters.waitInterval : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_top;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_topType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.top = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.top = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.top = !!DownloadQueuePerformanceOverview_parameters.top ? DownloadQueuePerformanceOverview_parameters.top : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_skip;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_skipType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.skip = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.skip = !!DownloadQueuePerformanceOverview_parameters.skip ? DownloadQueuePerformanceOverview_parameters.skip : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_search;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_searchType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.search = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.search = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.search = !!DownloadQueuePerformanceOverview_parameters.search ? DownloadQueuePerformanceOverview_parameters.search : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_filter;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_filterType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.filter = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.filter = !!DownloadQueuePerformanceOverview_parameters.filter ? DownloadQueuePerformanceOverview_parameters.filter : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_count;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_countType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.count = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.count = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.count = !!DownloadQueuePerformanceOverview_parameters.count ? DownloadQueuePerformanceOverview_parameters.count : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_select;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_selectType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.select = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.select = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.select = !!DownloadQueuePerformanceOverview_parameters.select ? DownloadQueuePerformanceOverview_parameters.select : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_orderby;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_orderbyType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.orderby = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.orderby = !!DownloadQueuePerformanceOverview_parameters.orderby ? DownloadQueuePerformanceOverview_parameters.orderby : msg.payload;
                
                DownloadQueuePerformanceOverview_nodeParam = node.DownloadQueuePerformanceOverview_expand;
                DownloadQueuePerformanceOverview_nodeParamType = node.DownloadQueuePerformanceOverview_expandType;
                if (DownloadQueuePerformanceOverview_nodeParamType === 'str') {
                    DownloadQueuePerformanceOverview_parameters.expand = DownloadQueuePerformanceOverview_nodeParam || '';
                } else {
                    DownloadQueuePerformanceOverview_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueuePerformanceOverview_nodeParam);
                }
                DownloadQueuePerformanceOverview_parameters.expand = !!DownloadQueuePerformanceOverview_parameters.expand ? DownloadQueuePerformanceOverview_parameters.expand : msg.payload;
                                result = client.DownloadQueuePerformanceOverview(DownloadQueuePerformanceOverview_parameters);
            }
            if (!errorFlag && node.method === 'GetQueuePerformanceTotalsData') {
                var GetQueuePerformanceTotalsData_parameters = [];
                var GetQueuePerformanceTotalsData_nodeParam;
                var GetQueuePerformanceTotalsData_nodeParamType;

                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_periodFrom;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_periodFromType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.periodFrom = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.periodFrom = !!GetQueuePerformanceTotalsData_parameters.periodFrom ? GetQueuePerformanceTotalsData_parameters.periodFrom : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_periodTo;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_periodToType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.periodTo = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.periodTo = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.periodTo = !!GetQueuePerformanceTotalsData_parameters.periodTo ? GetQueuePerformanceTotalsData_parameters.periodTo : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_queueDns;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_queueDnsType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.queueDns = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.queueDns = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.queueDns = !!GetQueuePerformanceTotalsData_parameters.queueDns ? GetQueuePerformanceTotalsData_parameters.queueDns : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_waitInterval;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_waitIntervalType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.waitInterval = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.waitInterval = !!GetQueuePerformanceTotalsData_parameters.waitInterval ? GetQueuePerformanceTotalsData_parameters.waitInterval : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_top;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_topType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.top = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.top = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.top = !!GetQueuePerformanceTotalsData_parameters.top ? GetQueuePerformanceTotalsData_parameters.top : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_skip;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_skipType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.skip = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.skip = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.skip = !!GetQueuePerformanceTotalsData_parameters.skip ? GetQueuePerformanceTotalsData_parameters.skip : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_search;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_searchType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.search = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.search = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.search = !!GetQueuePerformanceTotalsData_parameters.search ? GetQueuePerformanceTotalsData_parameters.search : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_filter;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_filterType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.filter = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.filter = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.filter = !!GetQueuePerformanceTotalsData_parameters.filter ? GetQueuePerformanceTotalsData_parameters.filter : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_count;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_countType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.count = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.count = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.count = !!GetQueuePerformanceTotalsData_parameters.count ? GetQueuePerformanceTotalsData_parameters.count : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_select;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_selectType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.select = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.select = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.select = !!GetQueuePerformanceTotalsData_parameters.select ? GetQueuePerformanceTotalsData_parameters.select : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_orderby;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_orderbyType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.orderby = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.orderby = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.orderby = !!GetQueuePerformanceTotalsData_parameters.orderby ? GetQueuePerformanceTotalsData_parameters.orderby : msg.payload;
                
                GetQueuePerformanceTotalsData_nodeParam = node.GetQueuePerformanceTotalsData_expand;
                GetQueuePerformanceTotalsData_nodeParamType = node.GetQueuePerformanceTotalsData_expandType;
                if (GetQueuePerformanceTotalsData_nodeParamType === 'str') {
                    GetQueuePerformanceTotalsData_parameters.expand = GetQueuePerformanceTotalsData_nodeParam || '';
                } else {
                    GetQueuePerformanceTotalsData_parameters.expand = RED.util.getMessageProperty(msg, GetQueuePerformanceTotalsData_nodeParam);
                }
                GetQueuePerformanceTotalsData_parameters.expand = !!GetQueuePerformanceTotalsData_parameters.expand ? GetQueuePerformanceTotalsData_parameters.expand : msg.payload;
                                result = client.GetQueuePerformanceTotalsData(GetQueuePerformanceTotalsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadQueuePerformanceTotals') {
                var DownloadQueuePerformanceTotals_parameters = [];
                var DownloadQueuePerformanceTotals_nodeParam;
                var DownloadQueuePerformanceTotals_nodeParamType;

                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_periodFrom;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_periodFromType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.periodFrom = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.periodFrom = !!DownloadQueuePerformanceTotals_parameters.periodFrom ? DownloadQueuePerformanceTotals_parameters.periodFrom : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_periodTo;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_periodToType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.periodTo = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.periodTo = !!DownloadQueuePerformanceTotals_parameters.periodTo ? DownloadQueuePerformanceTotals_parameters.periodTo : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_queueDns;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_queueDnsType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.queueDns = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.queueDns = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.queueDns = !!DownloadQueuePerformanceTotals_parameters.queueDns ? DownloadQueuePerformanceTotals_parameters.queueDns : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_waitInterval;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_waitIntervalType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.waitInterval = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.waitInterval = !!DownloadQueuePerformanceTotals_parameters.waitInterval ? DownloadQueuePerformanceTotals_parameters.waitInterval : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_top;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_topType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.top = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.top = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.top = !!DownloadQueuePerformanceTotals_parameters.top ? DownloadQueuePerformanceTotals_parameters.top : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_skip;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_skipType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.skip = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.skip = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.skip = !!DownloadQueuePerformanceTotals_parameters.skip ? DownloadQueuePerformanceTotals_parameters.skip : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_search;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_searchType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.search = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.search = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.search = !!DownloadQueuePerformanceTotals_parameters.search ? DownloadQueuePerformanceTotals_parameters.search : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_filter;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_filterType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.filter = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.filter = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.filter = !!DownloadQueuePerformanceTotals_parameters.filter ? DownloadQueuePerformanceTotals_parameters.filter : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_count;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_countType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.count = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.count = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.count = !!DownloadQueuePerformanceTotals_parameters.count ? DownloadQueuePerformanceTotals_parameters.count : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_select;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_selectType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.select = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.select = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.select = !!DownloadQueuePerformanceTotals_parameters.select ? DownloadQueuePerformanceTotals_parameters.select : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_orderby;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_orderbyType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.orderby = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.orderby = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.orderby = !!DownloadQueuePerformanceTotals_parameters.orderby ? DownloadQueuePerformanceTotals_parameters.orderby : msg.payload;
                
                DownloadQueuePerformanceTotals_nodeParam = node.DownloadQueuePerformanceTotals_expand;
                DownloadQueuePerformanceTotals_nodeParamType = node.DownloadQueuePerformanceTotals_expandType;
                if (DownloadQueuePerformanceTotals_nodeParamType === 'str') {
                    DownloadQueuePerformanceTotals_parameters.expand = DownloadQueuePerformanceTotals_nodeParam || '';
                } else {
                    DownloadQueuePerformanceTotals_parameters.expand = RED.util.getMessageProperty(msg, DownloadQueuePerformanceTotals_nodeParam);
                }
                DownloadQueuePerformanceTotals_parameters.expand = !!DownloadQueuePerformanceTotals_parameters.expand ? DownloadQueuePerformanceTotals_parameters.expand : msg.payload;
                                result = client.DownloadQueuePerformanceTotals(DownloadQueuePerformanceTotals_parameters);
            }
            if (!errorFlag && node.method === 'GetRingGroupStatisticsData') {
                var GetRingGroupStatisticsData_parameters = [];
                var GetRingGroupStatisticsData_nodeParam;
                var GetRingGroupStatisticsData_nodeParamType;

                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_periodFrom;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_periodFromType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.periodFrom = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.periodFrom = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.periodFrom = !!GetRingGroupStatisticsData_parameters.periodFrom ? GetRingGroupStatisticsData_parameters.periodFrom : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_periodTo;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_periodToType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.periodTo = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.periodTo = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.periodTo = !!GetRingGroupStatisticsData_parameters.periodTo ? GetRingGroupStatisticsData_parameters.periodTo : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_ringGroupDns;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_ringGroupDnsType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.ringGroupDns = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.ringGroupDns = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.ringGroupDns = !!GetRingGroupStatisticsData_parameters.ringGroupDns ? GetRingGroupStatisticsData_parameters.ringGroupDns : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_top;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_topType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.top = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.top = !!GetRingGroupStatisticsData_parameters.top ? GetRingGroupStatisticsData_parameters.top : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_skip;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_skipType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.skip = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.skip = !!GetRingGroupStatisticsData_parameters.skip ? GetRingGroupStatisticsData_parameters.skip : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_search;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_searchType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.search = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.search = !!GetRingGroupStatisticsData_parameters.search ? GetRingGroupStatisticsData_parameters.search : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_filter;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_filterType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.filter = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.filter = !!GetRingGroupStatisticsData_parameters.filter ? GetRingGroupStatisticsData_parameters.filter : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_count;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_countType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.count = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.count = !!GetRingGroupStatisticsData_parameters.count ? GetRingGroupStatisticsData_parameters.count : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_select;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_selectType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.select = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.select = !!GetRingGroupStatisticsData_parameters.select ? GetRingGroupStatisticsData_parameters.select : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_orderby;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_orderbyType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.orderby = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.orderby = !!GetRingGroupStatisticsData_parameters.orderby ? GetRingGroupStatisticsData_parameters.orderby : msg.payload;
                
                GetRingGroupStatisticsData_nodeParam = node.GetRingGroupStatisticsData_expand;
                GetRingGroupStatisticsData_nodeParamType = node.GetRingGroupStatisticsData_expandType;
                if (GetRingGroupStatisticsData_nodeParamType === 'str') {
                    GetRingGroupStatisticsData_parameters.expand = GetRingGroupStatisticsData_nodeParam || '';
                } else {
                    GetRingGroupStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetRingGroupStatisticsData_nodeParam);
                }
                GetRingGroupStatisticsData_parameters.expand = !!GetRingGroupStatisticsData_parameters.expand ? GetRingGroupStatisticsData_parameters.expand : msg.payload;
                                result = client.GetRingGroupStatisticsData(GetRingGroupStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadRingGroupStatistics') {
                var DownloadRingGroupStatistics_parameters = [];
                var DownloadRingGroupStatistics_nodeParam;
                var DownloadRingGroupStatistics_nodeParamType;

                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_periodFrom;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_periodFromType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.periodFrom = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.periodFrom = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.periodFrom = !!DownloadRingGroupStatistics_parameters.periodFrom ? DownloadRingGroupStatistics_parameters.periodFrom : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_periodTo;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_periodToType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.periodTo = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.periodTo = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.periodTo = !!DownloadRingGroupStatistics_parameters.periodTo ? DownloadRingGroupStatistics_parameters.periodTo : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_ringGroupDns;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_ringGroupDnsType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.ringGroupDns = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.ringGroupDns = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.ringGroupDns = !!DownloadRingGroupStatistics_parameters.ringGroupDns ? DownloadRingGroupStatistics_parameters.ringGroupDns : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_top;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_topType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.top = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.top = !!DownloadRingGroupStatistics_parameters.top ? DownloadRingGroupStatistics_parameters.top : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_skip;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_skipType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.skip = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.skip = !!DownloadRingGroupStatistics_parameters.skip ? DownloadRingGroupStatistics_parameters.skip : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_search;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_searchType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.search = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.search = !!DownloadRingGroupStatistics_parameters.search ? DownloadRingGroupStatistics_parameters.search : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_filter;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_filterType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.filter = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.filter = !!DownloadRingGroupStatistics_parameters.filter ? DownloadRingGroupStatistics_parameters.filter : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_count;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_countType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.count = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.count = !!DownloadRingGroupStatistics_parameters.count ? DownloadRingGroupStatistics_parameters.count : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_select;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_selectType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.select = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.select = !!DownloadRingGroupStatistics_parameters.select ? DownloadRingGroupStatistics_parameters.select : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_orderby;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_orderbyType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.orderby = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.orderby = !!DownloadRingGroupStatistics_parameters.orderby ? DownloadRingGroupStatistics_parameters.orderby : msg.payload;
                
                DownloadRingGroupStatistics_nodeParam = node.DownloadRingGroupStatistics_expand;
                DownloadRingGroupStatistics_nodeParamType = node.DownloadRingGroupStatistics_expandType;
                if (DownloadRingGroupStatistics_nodeParamType === 'str') {
                    DownloadRingGroupStatistics_parameters.expand = DownloadRingGroupStatistics_nodeParam || '';
                } else {
                    DownloadRingGroupStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadRingGroupStatistics_nodeParam);
                }
                DownloadRingGroupStatistics_parameters.expand = !!DownloadRingGroupStatistics_parameters.expand ? DownloadRingGroupStatistics_parameters.expand : msg.payload;
                                result = client.DownloadRingGroupStatistics(DownloadRingGroupStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetStatisticSlaData') {
                var GetStatisticSlaData_parameters = [];
                var GetStatisticSlaData_nodeParam;
                var GetStatisticSlaData_nodeParamType;

                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_queueDnStr;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_queueDnStrType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.queueDnStr = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.queueDnStr = !!GetStatisticSlaData_parameters.queueDnStr ? GetStatisticSlaData_parameters.queueDnStr : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_startDt;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_startDtType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.startDt = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.startDt = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.startDt = !!GetStatisticSlaData_parameters.startDt ? GetStatisticSlaData_parameters.startDt : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_endDt;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_endDtType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.endDt = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.endDt = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.endDt = !!GetStatisticSlaData_parameters.endDt ? GetStatisticSlaData_parameters.endDt : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_waitInterval;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_waitIntervalType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.waitInterval = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.waitInterval = !!GetStatisticSlaData_parameters.waitInterval ? GetStatisticSlaData_parameters.waitInterval : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_top;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_topType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.top = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.top = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.top = !!GetStatisticSlaData_parameters.top ? GetStatisticSlaData_parameters.top : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_skip;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_skipType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.skip = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.skip = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.skip = !!GetStatisticSlaData_parameters.skip ? GetStatisticSlaData_parameters.skip : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_search;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_searchType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.search = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.search = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.search = !!GetStatisticSlaData_parameters.search ? GetStatisticSlaData_parameters.search : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_filter;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_filterType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.filter = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.filter = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.filter = !!GetStatisticSlaData_parameters.filter ? GetStatisticSlaData_parameters.filter : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_count;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_countType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.count = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.count = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.count = !!GetStatisticSlaData_parameters.count ? GetStatisticSlaData_parameters.count : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_select;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_selectType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.select = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.select = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.select = !!GetStatisticSlaData_parameters.select ? GetStatisticSlaData_parameters.select : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_orderby;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_orderbyType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.orderby = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.orderby = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.orderby = !!GetStatisticSlaData_parameters.orderby ? GetStatisticSlaData_parameters.orderby : msg.payload;
                
                GetStatisticSlaData_nodeParam = node.GetStatisticSlaData_expand;
                GetStatisticSlaData_nodeParamType = node.GetStatisticSlaData_expandType;
                if (GetStatisticSlaData_nodeParamType === 'str') {
                    GetStatisticSlaData_parameters.expand = GetStatisticSlaData_nodeParam || '';
                } else {
                    GetStatisticSlaData_parameters.expand = RED.util.getMessageProperty(msg, GetStatisticSlaData_nodeParam);
                }
                GetStatisticSlaData_parameters.expand = !!GetStatisticSlaData_parameters.expand ? GetStatisticSlaData_parameters.expand : msg.payload;
                                result = client.GetStatisticSlaData(GetStatisticSlaData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadStatisticSla') {
                var DownloadStatisticSla_parameters = [];
                var DownloadStatisticSla_nodeParam;
                var DownloadStatisticSla_nodeParamType;

                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_queueDnStr;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_queueDnStrType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.queueDnStr = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.queueDnStr = !!DownloadStatisticSla_parameters.queueDnStr ? DownloadStatisticSla_parameters.queueDnStr : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_startDt;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_startDtType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.startDt = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.startDt = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.startDt = !!DownloadStatisticSla_parameters.startDt ? DownloadStatisticSla_parameters.startDt : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_endDt;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_endDtType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.endDt = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.endDt = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.endDt = !!DownloadStatisticSla_parameters.endDt ? DownloadStatisticSla_parameters.endDt : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_waitInterval;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_waitIntervalType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.waitInterval = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.waitInterval = !!DownloadStatisticSla_parameters.waitInterval ? DownloadStatisticSla_parameters.waitInterval : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_top;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_topType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.top = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.top = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.top = !!DownloadStatisticSla_parameters.top ? DownloadStatisticSla_parameters.top : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_skip;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_skipType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.skip = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.skip = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.skip = !!DownloadStatisticSla_parameters.skip ? DownloadStatisticSla_parameters.skip : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_search;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_searchType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.search = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.search = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.search = !!DownloadStatisticSla_parameters.search ? DownloadStatisticSla_parameters.search : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_filter;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_filterType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.filter = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.filter = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.filter = !!DownloadStatisticSla_parameters.filter ? DownloadStatisticSla_parameters.filter : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_count;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_countType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.count = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.count = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.count = !!DownloadStatisticSla_parameters.count ? DownloadStatisticSla_parameters.count : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_select;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_selectType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.select = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.select = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.select = !!DownloadStatisticSla_parameters.select ? DownloadStatisticSla_parameters.select : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_orderby;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_orderbyType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.orderby = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.orderby = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.orderby = !!DownloadStatisticSla_parameters.orderby ? DownloadStatisticSla_parameters.orderby : msg.payload;
                
                DownloadStatisticSla_nodeParam = node.DownloadStatisticSla_expand;
                DownloadStatisticSla_nodeParamType = node.DownloadStatisticSla_expandType;
                if (DownloadStatisticSla_nodeParamType === 'str') {
                    DownloadStatisticSla_parameters.expand = DownloadStatisticSla_nodeParam || '';
                } else {
                    DownloadStatisticSla_parameters.expand = RED.util.getMessageProperty(msg, DownloadStatisticSla_nodeParam);
                }
                DownloadStatisticSla_parameters.expand = !!DownloadStatisticSla_parameters.expand ? DownloadStatisticSla_parameters.expand : msg.payload;
                                result = client.DownloadStatisticSla(DownloadStatisticSla_parameters);
            }
            if (!errorFlag && node.method === 'GetTeamQueueGeneralStatisticsData') {
                var GetTeamQueueGeneralStatisticsData_parameters = [];
                var GetTeamQueueGeneralStatisticsData_nodeParam;
                var GetTeamQueueGeneralStatisticsData_nodeParamType;

                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_queueDnStr;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_queueDnStrType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.queueDnStr = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.queueDnStr = !!GetTeamQueueGeneralStatisticsData_parameters.queueDnStr ? GetTeamQueueGeneralStatisticsData_parameters.queueDnStr : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_startDt;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_startDtType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.startDt = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.startDt = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.startDt = !!GetTeamQueueGeneralStatisticsData_parameters.startDt ? GetTeamQueueGeneralStatisticsData_parameters.startDt : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_endDt;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_endDtType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.endDt = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.endDt = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.endDt = !!GetTeamQueueGeneralStatisticsData_parameters.endDt ? GetTeamQueueGeneralStatisticsData_parameters.endDt : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_waitInterval;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_waitIntervalType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.waitInterval = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.waitInterval = !!GetTeamQueueGeneralStatisticsData_parameters.waitInterval ? GetTeamQueueGeneralStatisticsData_parameters.waitInterval : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_top;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_topType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.top = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.top = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.top = !!GetTeamQueueGeneralStatisticsData_parameters.top ? GetTeamQueueGeneralStatisticsData_parameters.top : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_skip;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_skipType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.skip = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.skip = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.skip = !!GetTeamQueueGeneralStatisticsData_parameters.skip ? GetTeamQueueGeneralStatisticsData_parameters.skip : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_search;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_searchType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.search = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.search = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.search = !!GetTeamQueueGeneralStatisticsData_parameters.search ? GetTeamQueueGeneralStatisticsData_parameters.search : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_filter;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_filterType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.filter = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.filter = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.filter = !!GetTeamQueueGeneralStatisticsData_parameters.filter ? GetTeamQueueGeneralStatisticsData_parameters.filter : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_count;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_countType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.count = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.count = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.count = !!GetTeamQueueGeneralStatisticsData_parameters.count ? GetTeamQueueGeneralStatisticsData_parameters.count : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_select;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_selectType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.select = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.select = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.select = !!GetTeamQueueGeneralStatisticsData_parameters.select ? GetTeamQueueGeneralStatisticsData_parameters.select : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_orderby;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_orderbyType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.orderby = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.orderby = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.orderby = !!GetTeamQueueGeneralStatisticsData_parameters.orderby ? GetTeamQueueGeneralStatisticsData_parameters.orderby : msg.payload;
                
                GetTeamQueueGeneralStatisticsData_nodeParam = node.GetTeamQueueGeneralStatisticsData_expand;
                GetTeamQueueGeneralStatisticsData_nodeParamType = node.GetTeamQueueGeneralStatisticsData_expandType;
                if (GetTeamQueueGeneralStatisticsData_nodeParamType === 'str') {
                    GetTeamQueueGeneralStatisticsData_parameters.expand = GetTeamQueueGeneralStatisticsData_nodeParam || '';
                } else {
                    GetTeamQueueGeneralStatisticsData_parameters.expand = RED.util.getMessageProperty(msg, GetTeamQueueGeneralStatisticsData_nodeParam);
                }
                GetTeamQueueGeneralStatisticsData_parameters.expand = !!GetTeamQueueGeneralStatisticsData_parameters.expand ? GetTeamQueueGeneralStatisticsData_parameters.expand : msg.payload;
                                result = client.GetTeamQueueGeneralStatisticsData(GetTeamQueueGeneralStatisticsData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadTeamQueueGeneralStatistics') {
                var DownloadTeamQueueGeneralStatistics_parameters = [];
                var DownloadTeamQueueGeneralStatistics_nodeParam;
                var DownloadTeamQueueGeneralStatistics_nodeParamType;

                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_queueDnStr;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_queueDnStrType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.queueDnStr = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.queueDnStr = !!DownloadTeamQueueGeneralStatistics_parameters.queueDnStr ? DownloadTeamQueueGeneralStatistics_parameters.queueDnStr : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_startDt;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_startDtType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.startDt = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.startDt = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.startDt = !!DownloadTeamQueueGeneralStatistics_parameters.startDt ? DownloadTeamQueueGeneralStatistics_parameters.startDt : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_endDt;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_endDtType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.endDt = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.endDt = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.endDt = !!DownloadTeamQueueGeneralStatistics_parameters.endDt ? DownloadTeamQueueGeneralStatistics_parameters.endDt : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_waitInterval;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_waitIntervalType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.waitInterval = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.waitInterval = !!DownloadTeamQueueGeneralStatistics_parameters.waitInterval ? DownloadTeamQueueGeneralStatistics_parameters.waitInterval : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_top;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_topType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.top = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.top = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.top = !!DownloadTeamQueueGeneralStatistics_parameters.top ? DownloadTeamQueueGeneralStatistics_parameters.top : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_skip;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_skipType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.skip = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.skip = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.skip = !!DownloadTeamQueueGeneralStatistics_parameters.skip ? DownloadTeamQueueGeneralStatistics_parameters.skip : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_search;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_searchType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.search = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.search = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.search = !!DownloadTeamQueueGeneralStatistics_parameters.search ? DownloadTeamQueueGeneralStatistics_parameters.search : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_filter;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_filterType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.filter = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.filter = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.filter = !!DownloadTeamQueueGeneralStatistics_parameters.filter ? DownloadTeamQueueGeneralStatistics_parameters.filter : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_count;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_countType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.count = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.count = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.count = !!DownloadTeamQueueGeneralStatistics_parameters.count ? DownloadTeamQueueGeneralStatistics_parameters.count : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_select;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_selectType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.select = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.select = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.select = !!DownloadTeamQueueGeneralStatistics_parameters.select ? DownloadTeamQueueGeneralStatistics_parameters.select : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_orderby;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_orderbyType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.orderby = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.orderby = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.orderby = !!DownloadTeamQueueGeneralStatistics_parameters.orderby ? DownloadTeamQueueGeneralStatistics_parameters.orderby : msg.payload;
                
                DownloadTeamQueueGeneralStatistics_nodeParam = node.DownloadTeamQueueGeneralStatistics_expand;
                DownloadTeamQueueGeneralStatistics_nodeParamType = node.DownloadTeamQueueGeneralStatistics_expandType;
                if (DownloadTeamQueueGeneralStatistics_nodeParamType === 'str') {
                    DownloadTeamQueueGeneralStatistics_parameters.expand = DownloadTeamQueueGeneralStatistics_nodeParam || '';
                } else {
                    DownloadTeamQueueGeneralStatistics_parameters.expand = RED.util.getMessageProperty(msg, DownloadTeamQueueGeneralStatistics_nodeParam);
                }
                DownloadTeamQueueGeneralStatistics_parameters.expand = !!DownloadTeamQueueGeneralStatistics_parameters.expand ? DownloadTeamQueueGeneralStatistics_parameters.expand : msg.payload;
                                result = client.DownloadTeamQueueGeneralStatistics(DownloadTeamQueueGeneralStatistics_parameters);
            }
            if (!errorFlag && node.method === 'GetUserActivityData') {
                var GetUserActivityData_parameters = [];
                var GetUserActivityData_nodeParam;
                var GetUserActivityData_nodeParamType;

                GetUserActivityData_nodeParam = node.GetUserActivityData_chartDate;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_chartDateType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.chartDate = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.chartDate = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.chartDate = !!GetUserActivityData_parameters.chartDate ? GetUserActivityData_parameters.chartDate : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_chartBy;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_chartByType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.chartBy = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.chartBy = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.chartBy = !!GetUserActivityData_parameters.chartBy ? GetUserActivityData_parameters.chartBy : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_includeInternalCalls;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_includeInternalCallsType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.includeInternalCalls = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.includeInternalCalls = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.includeInternalCalls = !!GetUserActivityData_parameters.includeInternalCalls ? GetUserActivityData_parameters.includeInternalCalls : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_includeQueueCalls;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_includeQueueCallsType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.includeQueueCalls = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.includeQueueCalls = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.includeQueueCalls = !!GetUserActivityData_parameters.includeQueueCalls ? GetUserActivityData_parameters.includeQueueCalls : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_queueDnStr;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_queueDnStrType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.queueDnStr = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.queueDnStr = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.queueDnStr = !!GetUserActivityData_parameters.queueDnStr ? GetUserActivityData_parameters.queueDnStr : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_clientTimeZone;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_clientTimeZoneType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.clientTimeZone = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.clientTimeZone = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.clientTimeZone = !!GetUserActivityData_parameters.clientTimeZone ? GetUserActivityData_parameters.clientTimeZone : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_waitInterval;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_waitIntervalType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.waitInterval = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.waitInterval = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.waitInterval = !!GetUserActivityData_parameters.waitInterval ? GetUserActivityData_parameters.waitInterval : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_top;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_topType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.top = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.top = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.top = !!GetUserActivityData_parameters.top ? GetUserActivityData_parameters.top : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_skip;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_skipType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.skip = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.skip = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.skip = !!GetUserActivityData_parameters.skip ? GetUserActivityData_parameters.skip : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_search;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_searchType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.search = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.search = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.search = !!GetUserActivityData_parameters.search ? GetUserActivityData_parameters.search : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_filter;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_filterType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.filter = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.filter = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.filter = !!GetUserActivityData_parameters.filter ? GetUserActivityData_parameters.filter : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_count;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_countType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.count = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.count = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.count = !!GetUserActivityData_parameters.count ? GetUserActivityData_parameters.count : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_select;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_selectType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.select = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.select = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.select = !!GetUserActivityData_parameters.select ? GetUserActivityData_parameters.select : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_orderby;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_orderbyType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.orderby = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.orderby = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.orderby = !!GetUserActivityData_parameters.orderby ? GetUserActivityData_parameters.orderby : msg.payload;
                
                GetUserActivityData_nodeParam = node.GetUserActivityData_expand;
                GetUserActivityData_nodeParamType = node.GetUserActivityData_expandType;
                if (GetUserActivityData_nodeParamType === 'str') {
                    GetUserActivityData_parameters.expand = GetUserActivityData_nodeParam || '';
                } else {
                    GetUserActivityData_parameters.expand = RED.util.getMessageProperty(msg, GetUserActivityData_nodeParam);
                }
                GetUserActivityData_parameters.expand = !!GetUserActivityData_parameters.expand ? GetUserActivityData_parameters.expand : msg.payload;
                                result = client.GetUserActivityData(GetUserActivityData_parameters);
            }
            if (!errorFlag && node.method === 'DownloadUserActivityReport') {
                var DownloadUserActivityReport_parameters = [];
                var DownloadUserActivityReport_nodeParam;
                var DownloadUserActivityReport_nodeParamType;

                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_chartDate;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_chartDateType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.chartDate = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.chartDate = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.chartDate = !!DownloadUserActivityReport_parameters.chartDate ? DownloadUserActivityReport_parameters.chartDate : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_chartBy;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_chartByType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.chartBy = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.chartBy = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.chartBy = !!DownloadUserActivityReport_parameters.chartBy ? DownloadUserActivityReport_parameters.chartBy : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_includeInternalCalls;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_includeInternalCallsType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.includeInternalCalls = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.includeInternalCalls = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.includeInternalCalls = !!DownloadUserActivityReport_parameters.includeInternalCalls ? DownloadUserActivityReport_parameters.includeInternalCalls : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_includeQueueCalls;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_includeQueueCallsType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.includeQueueCalls = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.includeQueueCalls = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.includeQueueCalls = !!DownloadUserActivityReport_parameters.includeQueueCalls ? DownloadUserActivityReport_parameters.includeQueueCalls : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_queueDnStr;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_queueDnStrType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.queueDnStr = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.queueDnStr = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.queueDnStr = !!DownloadUserActivityReport_parameters.queueDnStr ? DownloadUserActivityReport_parameters.queueDnStr : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_clientTimeZone;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_clientTimeZoneType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.clientTimeZone = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.clientTimeZone = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.clientTimeZone = !!DownloadUserActivityReport_parameters.clientTimeZone ? DownloadUserActivityReport_parameters.clientTimeZone : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_waitInterval;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_waitIntervalType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.waitInterval = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.waitInterval = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.waitInterval = !!DownloadUserActivityReport_parameters.waitInterval ? DownloadUserActivityReport_parameters.waitInterval : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_top;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_topType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.top = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.top = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.top = !!DownloadUserActivityReport_parameters.top ? DownloadUserActivityReport_parameters.top : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_skip;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_skipType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.skip = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.skip = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.skip = !!DownloadUserActivityReport_parameters.skip ? DownloadUserActivityReport_parameters.skip : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_search;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_searchType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.search = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.search = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.search = !!DownloadUserActivityReport_parameters.search ? DownloadUserActivityReport_parameters.search : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_filter;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_filterType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.filter = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.filter = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.filter = !!DownloadUserActivityReport_parameters.filter ? DownloadUserActivityReport_parameters.filter : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_count;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_countType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.count = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.count = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.count = !!DownloadUserActivityReport_parameters.count ? DownloadUserActivityReport_parameters.count : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_select;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_selectType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.select = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.select = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.select = !!DownloadUserActivityReport_parameters.select ? DownloadUserActivityReport_parameters.select : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_orderby;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_orderbyType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.orderby = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.orderby = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.orderby = !!DownloadUserActivityReport_parameters.orderby ? DownloadUserActivityReport_parameters.orderby : msg.payload;
                
                DownloadUserActivityReport_nodeParam = node.DownloadUserActivityReport_expand;
                DownloadUserActivityReport_nodeParamType = node.DownloadUserActivityReport_expandType;
                if (DownloadUserActivityReport_nodeParamType === 'str') {
                    DownloadUserActivityReport_parameters.expand = DownloadUserActivityReport_nodeParam || '';
                } else {
                    DownloadUserActivityReport_parameters.expand = RED.util.getMessageProperty(msg, DownloadUserActivityReport_nodeParam);
                }
                DownloadUserActivityReport_parameters.expand = !!DownloadUserActivityReport_parameters.expand ? DownloadUserActivityReport_parameters.expand : msg.payload;
                                result = client.DownloadUserActivityReport(DownloadUserActivityReport_parameters);
            }
            if (!errorFlag && node.method === 'ListScheduledReport') {
                var ListScheduledReport_parameters = [];
                var ListScheduledReport_nodeParam;
                var ListScheduledReport_nodeParamType;

                ListScheduledReport_nodeParam = node.ListScheduledReport_top;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_topType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.top = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.top = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.top = !!ListScheduledReport_parameters.top ? ListScheduledReport_parameters.top : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_skip;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_skipType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.skip = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.skip = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.skip = !!ListScheduledReport_parameters.skip ? ListScheduledReport_parameters.skip : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_search;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_searchType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.search = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.search = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.search = !!ListScheduledReport_parameters.search ? ListScheduledReport_parameters.search : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_filter;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_filterType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.filter = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.filter = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.filter = !!ListScheduledReport_parameters.filter ? ListScheduledReport_parameters.filter : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_count;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_countType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.count = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.count = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.count = !!ListScheduledReport_parameters.count ? ListScheduledReport_parameters.count : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_orderby;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_orderbyType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.orderby = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.orderby = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.orderby = !!ListScheduledReport_parameters.orderby ? ListScheduledReport_parameters.orderby : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_select;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_selectType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.select = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.select = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.select = !!ListScheduledReport_parameters.select ? ListScheduledReport_parameters.select : msg.payload;
                
                ListScheduledReport_nodeParam = node.ListScheduledReport_expand;
                ListScheduledReport_nodeParamType = node.ListScheduledReport_expandType;
                if (ListScheduledReport_nodeParamType === 'str') {
                    ListScheduledReport_parameters.expand = ListScheduledReport_nodeParam || '';
                } else {
                    ListScheduledReport_parameters.expand = RED.util.getMessageProperty(msg, ListScheduledReport_nodeParam);
                }
                ListScheduledReport_parameters.expand = !!ListScheduledReport_parameters.expand ? ListScheduledReport_parameters.expand : msg.payload;
                                result = client.ListScheduledReport(ListScheduledReport_parameters);
            }
            if (!errorFlag && node.method === 'CreateScheduledReport') {
                var CreateScheduledReport_parameters = [];
                var CreateScheduledReport_nodeParam;
                var CreateScheduledReport_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateScheduledReport_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateScheduledReport(CreateScheduledReport_parameters);
            }
            if (!errorFlag && node.method === 'GetScheduledReport') {
                var GetScheduledReport_parameters = [];
                var GetScheduledReport_nodeParam;
                var GetScheduledReport_nodeParamType;

                GetScheduledReport_nodeParam = node.GetScheduledReport_id;
                GetScheduledReport_nodeParamType = node.GetScheduledReport_idType;
                if (GetScheduledReport_nodeParamType === 'str') {
                    GetScheduledReport_parameters.id = GetScheduledReport_nodeParam || '';
                } else {
                    GetScheduledReport_parameters.id = RED.util.getMessageProperty(msg, GetScheduledReport_nodeParam);
                }
                GetScheduledReport_parameters.id = !!GetScheduledReport_parameters.id ? GetScheduledReport_parameters.id : msg.payload;
                
                GetScheduledReport_nodeParam = node.GetScheduledReport_select;
                GetScheduledReport_nodeParamType = node.GetScheduledReport_selectType;
                if (GetScheduledReport_nodeParamType === 'str') {
                    GetScheduledReport_parameters.select = GetScheduledReport_nodeParam || '';
                } else {
                    GetScheduledReport_parameters.select = RED.util.getMessageProperty(msg, GetScheduledReport_nodeParam);
                }
                GetScheduledReport_parameters.select = !!GetScheduledReport_parameters.select ? GetScheduledReport_parameters.select : msg.payload;
                
                GetScheduledReport_nodeParam = node.GetScheduledReport_expand;
                GetScheduledReport_nodeParamType = node.GetScheduledReport_expandType;
                if (GetScheduledReport_nodeParamType === 'str') {
                    GetScheduledReport_parameters.expand = GetScheduledReport_nodeParam || '';
                } else {
                    GetScheduledReport_parameters.expand = RED.util.getMessageProperty(msg, GetScheduledReport_nodeParam);
                }
                GetScheduledReport_parameters.expand = !!GetScheduledReport_parameters.expand ? GetScheduledReport_parameters.expand : msg.payload;
                                result = client.GetScheduledReport(GetScheduledReport_parameters);
            }
            if (!errorFlag && node.method === 'UpdateScheduledReport') {
                var UpdateScheduledReport_parameters = [];
                var UpdateScheduledReport_nodeParam;
                var UpdateScheduledReport_nodeParamType;

                UpdateScheduledReport_nodeParam = node.UpdateScheduledReport_id;
                UpdateScheduledReport_nodeParamType = node.UpdateScheduledReport_idType;
                if (UpdateScheduledReport_nodeParamType === 'str') {
                    UpdateScheduledReport_parameters.id = UpdateScheduledReport_nodeParam || '';
                } else {
                    UpdateScheduledReport_parameters.id = RED.util.getMessageProperty(msg, UpdateScheduledReport_nodeParam);
                }
                UpdateScheduledReport_parameters.id = !!UpdateScheduledReport_parameters.id ? UpdateScheduledReport_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateScheduledReport_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateScheduledReport(UpdateScheduledReport_parameters);
            }
            if (!errorFlag && node.method === 'DeleteScheduledReport') {
                var DeleteScheduledReport_parameters = [];
                var DeleteScheduledReport_nodeParam;
                var DeleteScheduledReport_nodeParamType;

                DeleteScheduledReport_nodeParam = node.DeleteScheduledReport_id;
                DeleteScheduledReport_nodeParamType = node.DeleteScheduledReport_idType;
                if (DeleteScheduledReport_nodeParamType === 'str') {
                    DeleteScheduledReport_parameters.id = DeleteScheduledReport_nodeParam || '';
                } else {
                    DeleteScheduledReport_parameters.id = RED.util.getMessageProperty(msg, DeleteScheduledReport_nodeParam);
                }
                DeleteScheduledReport_parameters.id = !!DeleteScheduledReport_parameters.id ? DeleteScheduledReport_parameters.id : msg.payload;
                
                DeleteScheduledReport_nodeParam = node.DeleteScheduledReport_ifMatch;
                DeleteScheduledReport_nodeParamType = node.DeleteScheduledReport_ifMatchType;
                if (DeleteScheduledReport_nodeParamType === 'str') {
                    DeleteScheduledReport_parameters.ifMatch = DeleteScheduledReport_nodeParam || '';
                } else {
                    DeleteScheduledReport_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteScheduledReport_nodeParam);
                }
                DeleteScheduledReport_parameters.ifMatch = !!DeleteScheduledReport_parameters.ifMatch ? DeleteScheduledReport_parameters.ifMatch : msg.payload;
                                result = client.DeleteScheduledReport(DeleteScheduledReport_parameters);
            }
            if (!errorFlag && node.method === 'ListRingGroupMembers') {
                var ListRingGroupMembers_parameters = [];
                var ListRingGroupMembers_nodeParam;
                var ListRingGroupMembers_nodeParamType;

                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_id;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_idType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.id = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.id = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.id = !!ListRingGroupMembers_parameters.id ? ListRingGroupMembers_parameters.id : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_top;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_topType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.top = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.top = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.top = !!ListRingGroupMembers_parameters.top ? ListRingGroupMembers_parameters.top : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_skip;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_skipType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.skip = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.skip = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.skip = !!ListRingGroupMembers_parameters.skip ? ListRingGroupMembers_parameters.skip : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_search;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_searchType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.search = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.search = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.search = !!ListRingGroupMembers_parameters.search ? ListRingGroupMembers_parameters.search : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_filter;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_filterType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.filter = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.filter = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.filter = !!ListRingGroupMembers_parameters.filter ? ListRingGroupMembers_parameters.filter : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_count;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_countType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.count = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.count = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.count = !!ListRingGroupMembers_parameters.count ? ListRingGroupMembers_parameters.count : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_orderby;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_orderbyType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.orderby = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.orderby = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.orderby = !!ListRingGroupMembers_parameters.orderby ? ListRingGroupMembers_parameters.orderby : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_select;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_selectType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.select = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.select = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.select = !!ListRingGroupMembers_parameters.select ? ListRingGroupMembers_parameters.select : msg.payload;
                
                ListRingGroupMembers_nodeParam = node.ListRingGroupMembers_expand;
                ListRingGroupMembers_nodeParamType = node.ListRingGroupMembers_expandType;
                if (ListRingGroupMembers_nodeParamType === 'str') {
                    ListRingGroupMembers_parameters.expand = ListRingGroupMembers_nodeParam || '';
                } else {
                    ListRingGroupMembers_parameters.expand = RED.util.getMessageProperty(msg, ListRingGroupMembers_nodeParam);
                }
                ListRingGroupMembers_parameters.expand = !!ListRingGroupMembers_parameters.expand ? ListRingGroupMembers_parameters.expand : msg.payload;
                                result = client.ListRingGroupMembers(ListRingGroupMembers_parameters);
            }
            if (!errorFlag && node.method === 'GetFirstAvailableRingGroupNumber') {
                var GetFirstAvailableRingGroupNumber_parameters = [];
                var GetFirstAvailableRingGroupNumber_nodeParam;
                var GetFirstAvailableRingGroupNumber_nodeParamType;
                result = client.GetFirstAvailableRingGroupNumber(GetFirstAvailableRingGroupNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetRingGroupByNumber') {
                var GetRingGroupByNumber_parameters = [];
                var GetRingGroupByNumber_nodeParam;
                var GetRingGroupByNumber_nodeParamType;

                GetRingGroupByNumber_nodeParam = node.GetRingGroupByNumber_number;
                GetRingGroupByNumber_nodeParamType = node.GetRingGroupByNumber_numberType;
                if (GetRingGroupByNumber_nodeParamType === 'str') {
                    GetRingGroupByNumber_parameters.number = GetRingGroupByNumber_nodeParam || '';
                } else {
                    GetRingGroupByNumber_parameters.number = RED.util.getMessageProperty(msg, GetRingGroupByNumber_nodeParam);
                }
                GetRingGroupByNumber_parameters.number = !!GetRingGroupByNumber_parameters.number ? GetRingGroupByNumber_parameters.number : msg.payload;
                                result = client.GetRingGroupByNumber(GetRingGroupByNumber_parameters);
            }
            if (!errorFlag && node.method === 'ListRingGroup') {
                var ListRingGroup_parameters = [];
                var ListRingGroup_nodeParam;
                var ListRingGroup_nodeParamType;

                ListRingGroup_nodeParam = node.ListRingGroup_top;
                ListRingGroup_nodeParamType = node.ListRingGroup_topType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.top = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.top = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.top = !!ListRingGroup_parameters.top ? ListRingGroup_parameters.top : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_skip;
                ListRingGroup_nodeParamType = node.ListRingGroup_skipType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.skip = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.skip = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.skip = !!ListRingGroup_parameters.skip ? ListRingGroup_parameters.skip : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_search;
                ListRingGroup_nodeParamType = node.ListRingGroup_searchType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.search = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.search = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.search = !!ListRingGroup_parameters.search ? ListRingGroup_parameters.search : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_filter;
                ListRingGroup_nodeParamType = node.ListRingGroup_filterType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.filter = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.filter = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.filter = !!ListRingGroup_parameters.filter ? ListRingGroup_parameters.filter : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_count;
                ListRingGroup_nodeParamType = node.ListRingGroup_countType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.count = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.count = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.count = !!ListRingGroup_parameters.count ? ListRingGroup_parameters.count : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_orderby;
                ListRingGroup_nodeParamType = node.ListRingGroup_orderbyType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.orderby = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.orderby = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.orderby = !!ListRingGroup_parameters.orderby ? ListRingGroup_parameters.orderby : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_select;
                ListRingGroup_nodeParamType = node.ListRingGroup_selectType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.select = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.select = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.select = !!ListRingGroup_parameters.select ? ListRingGroup_parameters.select : msg.payload;
                
                ListRingGroup_nodeParam = node.ListRingGroup_expand;
                ListRingGroup_nodeParamType = node.ListRingGroup_expandType;
                if (ListRingGroup_nodeParamType === 'str') {
                    ListRingGroup_parameters.expand = ListRingGroup_nodeParam || '';
                } else {
                    ListRingGroup_parameters.expand = RED.util.getMessageProperty(msg, ListRingGroup_nodeParam);
                }
                ListRingGroup_parameters.expand = !!ListRingGroup_parameters.expand ? ListRingGroup_parameters.expand : msg.payload;
                                result = client.ListRingGroup(ListRingGroup_parameters);
            }
            if (!errorFlag && node.method === 'CreateRingGroup') {
                var CreateRingGroup_parameters = [];
                var CreateRingGroup_nodeParam;
                var CreateRingGroup_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateRingGroup_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateRingGroup(CreateRingGroup_parameters);
            }
            if (!errorFlag && node.method === 'GetRingGroup') {
                var GetRingGroup_parameters = [];
                var GetRingGroup_nodeParam;
                var GetRingGroup_nodeParamType;

                GetRingGroup_nodeParam = node.GetRingGroup_id;
                GetRingGroup_nodeParamType = node.GetRingGroup_idType;
                if (GetRingGroup_nodeParamType === 'str') {
                    GetRingGroup_parameters.id = GetRingGroup_nodeParam || '';
                } else {
                    GetRingGroup_parameters.id = RED.util.getMessageProperty(msg, GetRingGroup_nodeParam);
                }
                GetRingGroup_parameters.id = !!GetRingGroup_parameters.id ? GetRingGroup_parameters.id : msg.payload;
                
                GetRingGroup_nodeParam = node.GetRingGroup_select;
                GetRingGroup_nodeParamType = node.GetRingGroup_selectType;
                if (GetRingGroup_nodeParamType === 'str') {
                    GetRingGroup_parameters.select = GetRingGroup_nodeParam || '';
                } else {
                    GetRingGroup_parameters.select = RED.util.getMessageProperty(msg, GetRingGroup_nodeParam);
                }
                GetRingGroup_parameters.select = !!GetRingGroup_parameters.select ? GetRingGroup_parameters.select : msg.payload;
                
                GetRingGroup_nodeParam = node.GetRingGroup_expand;
                GetRingGroup_nodeParamType = node.GetRingGroup_expandType;
                if (GetRingGroup_nodeParamType === 'str') {
                    GetRingGroup_parameters.expand = GetRingGroup_nodeParam || '';
                } else {
                    GetRingGroup_parameters.expand = RED.util.getMessageProperty(msg, GetRingGroup_nodeParam);
                }
                GetRingGroup_parameters.expand = !!GetRingGroup_parameters.expand ? GetRingGroup_parameters.expand : msg.payload;
                                result = client.GetRingGroup(GetRingGroup_parameters);
            }
            if (!errorFlag && node.method === 'UpdateRingGroup') {
                var UpdateRingGroup_parameters = [];
                var UpdateRingGroup_nodeParam;
                var UpdateRingGroup_nodeParamType;

                UpdateRingGroup_nodeParam = node.UpdateRingGroup_id;
                UpdateRingGroup_nodeParamType = node.UpdateRingGroup_idType;
                if (UpdateRingGroup_nodeParamType === 'str') {
                    UpdateRingGroup_parameters.id = UpdateRingGroup_nodeParam || '';
                } else {
                    UpdateRingGroup_parameters.id = RED.util.getMessageProperty(msg, UpdateRingGroup_nodeParam);
                }
                UpdateRingGroup_parameters.id = !!UpdateRingGroup_parameters.id ? UpdateRingGroup_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateRingGroup_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateRingGroup(UpdateRingGroup_parameters);
            }
            if (!errorFlag && node.method === 'DeleteRingGroup') {
                var DeleteRingGroup_parameters = [];
                var DeleteRingGroup_nodeParam;
                var DeleteRingGroup_nodeParamType;

                DeleteRingGroup_nodeParam = node.DeleteRingGroup_id;
                DeleteRingGroup_nodeParamType = node.DeleteRingGroup_idType;
                if (DeleteRingGroup_nodeParamType === 'str') {
                    DeleteRingGroup_parameters.id = DeleteRingGroup_nodeParam || '';
                } else {
                    DeleteRingGroup_parameters.id = RED.util.getMessageProperty(msg, DeleteRingGroup_nodeParam);
                }
                DeleteRingGroup_parameters.id = !!DeleteRingGroup_parameters.id ? DeleteRingGroup_parameters.id : msg.payload;
                
                DeleteRingGroup_nodeParam = node.DeleteRingGroup_ifMatch;
                DeleteRingGroup_nodeParamType = node.DeleteRingGroup_ifMatchType;
                if (DeleteRingGroup_nodeParamType === 'str') {
                    DeleteRingGroup_parameters.ifMatch = DeleteRingGroup_nodeParam || '';
                } else {
                    DeleteRingGroup_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteRingGroup_nodeParam);
                }
                DeleteRingGroup_parameters.ifMatch = !!DeleteRingGroup_parameters.ifMatch ? DeleteRingGroup_parameters.ifMatch : msg.payload;
                                result = client.DeleteRingGroup(DeleteRingGroup_parameters);
            }
            if (!errorFlag && node.method === 'GetSbc') {
                var GetSbc_parameters = [];
                var GetSbc_nodeParam;
                var GetSbc_nodeParamType;

                GetSbc_nodeParam = node.GetSbc_name;
                GetSbc_nodeParamType = node.GetSbc_nameType;
                if (GetSbc_nodeParamType === 'str') {
                    GetSbc_parameters.name = GetSbc_nodeParam || '';
                } else {
                    GetSbc_parameters.name = RED.util.getMessageProperty(msg, GetSbc_nodeParam);
                }
                GetSbc_parameters.name = !!GetSbc_parameters.name ? GetSbc_parameters.name : msg.payload;
                
                GetSbc_nodeParam = node.GetSbc_select;
                GetSbc_nodeParamType = node.GetSbc_selectType;
                if (GetSbc_nodeParamType === 'str') {
                    GetSbc_parameters.select = GetSbc_nodeParam || '';
                } else {
                    GetSbc_parameters.select = RED.util.getMessageProperty(msg, GetSbc_nodeParam);
                }
                GetSbc_parameters.select = !!GetSbc_parameters.select ? GetSbc_parameters.select : msg.payload;
                
                GetSbc_nodeParam = node.GetSbc_expand;
                GetSbc_nodeParamType = node.GetSbc_expandType;
                if (GetSbc_nodeParamType === 'str') {
                    GetSbc_parameters.expand = GetSbc_nodeParam || '';
                } else {
                    GetSbc_parameters.expand = RED.util.getMessageProperty(msg, GetSbc_nodeParam);
                }
                GetSbc_parameters.expand = !!GetSbc_parameters.expand ? GetSbc_parameters.expand : msg.payload;
                                result = client.GetSbc(GetSbc_parameters);
            }
            if (!errorFlag && node.method === 'UpdateSbc') {
                var UpdateSbc_parameters = [];
                var UpdateSbc_nodeParam;
                var UpdateSbc_nodeParamType;

                UpdateSbc_nodeParam = node.UpdateSbc_name;
                UpdateSbc_nodeParamType = node.UpdateSbc_nameType;
                if (UpdateSbc_nodeParamType === 'str') {
                    UpdateSbc_parameters.name = UpdateSbc_nodeParam || '';
                } else {
                    UpdateSbc_parameters.name = RED.util.getMessageProperty(msg, UpdateSbc_nodeParam);
                }
                UpdateSbc_parameters.name = !!UpdateSbc_parameters.name ? UpdateSbc_parameters.name : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateSbc_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateSbc(UpdateSbc_parameters);
            }
            if (!errorFlag && node.method === 'DeleteSbc') {
                var DeleteSbc_parameters = [];
                var DeleteSbc_nodeParam;
                var DeleteSbc_nodeParamType;

                DeleteSbc_nodeParam = node.DeleteSbc_name;
                DeleteSbc_nodeParamType = node.DeleteSbc_nameType;
                if (DeleteSbc_nodeParamType === 'str') {
                    DeleteSbc_parameters.name = DeleteSbc_nodeParam || '';
                } else {
                    DeleteSbc_parameters.name = RED.util.getMessageProperty(msg, DeleteSbc_nodeParam);
                }
                DeleteSbc_parameters.name = !!DeleteSbc_parameters.name ? DeleteSbc_parameters.name : msg.payload;
                
                DeleteSbc_nodeParam = node.DeleteSbc_ifMatch;
                DeleteSbc_nodeParamType = node.DeleteSbc_ifMatchType;
                if (DeleteSbc_nodeParamType === 'str') {
                    DeleteSbc_parameters.ifMatch = DeleteSbc_nodeParam || '';
                } else {
                    DeleteSbc_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteSbc_nodeParam);
                }
                DeleteSbc_parameters.ifMatch = !!DeleteSbc_parameters.ifMatch ? DeleteSbc_parameters.ifMatch : msg.payload;
                                result = client.DeleteSbc(DeleteSbc_parameters);
            }
            if (!errorFlag && node.method === 'ListSbc') {
                var ListSbc_parameters = [];
                var ListSbc_nodeParam;
                var ListSbc_nodeParamType;

                ListSbc_nodeParam = node.ListSbc_top;
                ListSbc_nodeParamType = node.ListSbc_topType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.top = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.top = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.top = !!ListSbc_parameters.top ? ListSbc_parameters.top : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_skip;
                ListSbc_nodeParamType = node.ListSbc_skipType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.skip = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.skip = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.skip = !!ListSbc_parameters.skip ? ListSbc_parameters.skip : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_search;
                ListSbc_nodeParamType = node.ListSbc_searchType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.search = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.search = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.search = !!ListSbc_parameters.search ? ListSbc_parameters.search : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_filter;
                ListSbc_nodeParamType = node.ListSbc_filterType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.filter = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.filter = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.filter = !!ListSbc_parameters.filter ? ListSbc_parameters.filter : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_count;
                ListSbc_nodeParamType = node.ListSbc_countType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.count = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.count = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.count = !!ListSbc_parameters.count ? ListSbc_parameters.count : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_orderby;
                ListSbc_nodeParamType = node.ListSbc_orderbyType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.orderby = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.orderby = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.orderby = !!ListSbc_parameters.orderby ? ListSbc_parameters.orderby : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_select;
                ListSbc_nodeParamType = node.ListSbc_selectType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.select = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.select = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.select = !!ListSbc_parameters.select ? ListSbc_parameters.select : msg.payload;
                
                ListSbc_nodeParam = node.ListSbc_expand;
                ListSbc_nodeParamType = node.ListSbc_expandType;
                if (ListSbc_nodeParamType === 'str') {
                    ListSbc_parameters.expand = ListSbc_nodeParam || '';
                } else {
                    ListSbc_parameters.expand = RED.util.getMessageProperty(msg, ListSbc_nodeParam);
                }
                ListSbc_parameters.expand = !!ListSbc_parameters.expand ? ListSbc_parameters.expand : msg.payload;
                                result = client.ListSbc(ListSbc_parameters);
            }
            if (!errorFlag && node.method === 'CreateSbc') {
                var CreateSbc_parameters = [];
                var CreateSbc_nodeParam;
                var CreateSbc_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateSbc_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateSbc(CreateSbc_parameters);
            }
            if (!errorFlag && node.method === 'GetSecureSipSettings') {
                var GetSecureSipSettings_parameters = [];
                var GetSecureSipSettings_nodeParam;
                var GetSecureSipSettings_nodeParamType;

                GetSecureSipSettings_nodeParam = node.GetSecureSipSettings_select;
                GetSecureSipSettings_nodeParamType = node.GetSecureSipSettings_selectType;
                if (GetSecureSipSettings_nodeParamType === 'str') {
                    GetSecureSipSettings_parameters.select = GetSecureSipSettings_nodeParam || '';
                } else {
                    GetSecureSipSettings_parameters.select = RED.util.getMessageProperty(msg, GetSecureSipSettings_nodeParam);
                }
                GetSecureSipSettings_parameters.select = !!GetSecureSipSettings_parameters.select ? GetSecureSipSettings_parameters.select : msg.payload;
                
                GetSecureSipSettings_nodeParam = node.GetSecureSipSettings_expand;
                GetSecureSipSettings_nodeParamType = node.GetSecureSipSettings_expandType;
                if (GetSecureSipSettings_nodeParamType === 'str') {
                    GetSecureSipSettings_parameters.expand = GetSecureSipSettings_nodeParam || '';
                } else {
                    GetSecureSipSettings_parameters.expand = RED.util.getMessageProperty(msg, GetSecureSipSettings_nodeParam);
                }
                GetSecureSipSettings_parameters.expand = !!GetSecureSipSettings_parameters.expand ? GetSecureSipSettings_parameters.expand : msg.payload;
                                result = client.GetSecureSipSettings(GetSecureSipSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateSecureSipSettings') {
                var UpdateSecureSipSettings_parameters = [];
                var UpdateSecureSipSettings_nodeParam;
                var UpdateSecureSipSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateSecureSipSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateSecureSipSettings(UpdateSecureSipSettings_parameters);
            }
            if (!errorFlag && node.method === 'ListSecurityRefreshToken') {
                var ListSecurityRefreshToken_parameters = [];
                var ListSecurityRefreshToken_nodeParam;
                var ListSecurityRefreshToken_nodeParamType;

                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_top;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_topType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.top = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.top = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.top = !!ListSecurityRefreshToken_parameters.top ? ListSecurityRefreshToken_parameters.top : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_skip;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_skipType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.skip = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.skip = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.skip = !!ListSecurityRefreshToken_parameters.skip ? ListSecurityRefreshToken_parameters.skip : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_search;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_searchType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.search = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.search = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.search = !!ListSecurityRefreshToken_parameters.search ? ListSecurityRefreshToken_parameters.search : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_filter;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_filterType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.filter = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.filter = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.filter = !!ListSecurityRefreshToken_parameters.filter ? ListSecurityRefreshToken_parameters.filter : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_count;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_countType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.count = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.count = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.count = !!ListSecurityRefreshToken_parameters.count ? ListSecurityRefreshToken_parameters.count : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_orderby;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_orderbyType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.orderby = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.orderby = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.orderby = !!ListSecurityRefreshToken_parameters.orderby ? ListSecurityRefreshToken_parameters.orderby : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_select;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_selectType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.select = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.select = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.select = !!ListSecurityRefreshToken_parameters.select ? ListSecurityRefreshToken_parameters.select : msg.payload;
                
                ListSecurityRefreshToken_nodeParam = node.ListSecurityRefreshToken_expand;
                ListSecurityRefreshToken_nodeParamType = node.ListSecurityRefreshToken_expandType;
                if (ListSecurityRefreshToken_nodeParamType === 'str') {
                    ListSecurityRefreshToken_parameters.expand = ListSecurityRefreshToken_nodeParam || '';
                } else {
                    ListSecurityRefreshToken_parameters.expand = RED.util.getMessageProperty(msg, ListSecurityRefreshToken_nodeParam);
                }
                ListSecurityRefreshToken_parameters.expand = !!ListSecurityRefreshToken_parameters.expand ? ListSecurityRefreshToken_parameters.expand : msg.payload;
                                result = client.ListSecurityRefreshToken(ListSecurityRefreshToken_parameters);
            }
            if (!errorFlag && node.method === 'RevokeSecurityToken') {
                var RevokeSecurityToken_parameters = [];
                var RevokeSecurityToken_nodeParam;
                var RevokeSecurityToken_nodeParamType;

                RevokeSecurityToken_nodeParam = node.RevokeSecurityToken_id;
                RevokeSecurityToken_nodeParamType = node.RevokeSecurityToken_idType;
                if (RevokeSecurityToken_nodeParamType === 'str') {
                    RevokeSecurityToken_parameters.id = RevokeSecurityToken_nodeParam || '';
                } else {
                    RevokeSecurityToken_parameters.id = RED.util.getMessageProperty(msg, RevokeSecurityToken_nodeParam);
                }
                RevokeSecurityToken_parameters.id = !!RevokeSecurityToken_parameters.id ? RevokeSecurityToken_parameters.id : msg.payload;
                                result = client.RevokeSecurityToken(RevokeSecurityToken_parameters);
            }
            if (!errorFlag && node.method === 'ListServiceInfo') {
                var ListServiceInfo_parameters = [];
                var ListServiceInfo_nodeParam;
                var ListServiceInfo_nodeParamType;

                ListServiceInfo_nodeParam = node.ListServiceInfo_top;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_topType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.top = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.top = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.top = !!ListServiceInfo_parameters.top ? ListServiceInfo_parameters.top : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_skip;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_skipType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.skip = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.skip = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.skip = !!ListServiceInfo_parameters.skip ? ListServiceInfo_parameters.skip : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_search;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_searchType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.search = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.search = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.search = !!ListServiceInfo_parameters.search ? ListServiceInfo_parameters.search : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_filter;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_filterType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.filter = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.filter = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.filter = !!ListServiceInfo_parameters.filter ? ListServiceInfo_parameters.filter : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_count;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_countType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.count = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.count = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.count = !!ListServiceInfo_parameters.count ? ListServiceInfo_parameters.count : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_orderby;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_orderbyType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.orderby = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.orderby = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.orderby = !!ListServiceInfo_parameters.orderby ? ListServiceInfo_parameters.orderby : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_select;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_selectType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.select = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.select = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.select = !!ListServiceInfo_parameters.select ? ListServiceInfo_parameters.select : msg.payload;
                
                ListServiceInfo_nodeParam = node.ListServiceInfo_expand;
                ListServiceInfo_nodeParamType = node.ListServiceInfo_expandType;
                if (ListServiceInfo_nodeParamType === 'str') {
                    ListServiceInfo_parameters.expand = ListServiceInfo_nodeParam || '';
                } else {
                    ListServiceInfo_parameters.expand = RED.util.getMessageProperty(msg, ListServiceInfo_nodeParam);
                }
                ListServiceInfo_parameters.expand = !!ListServiceInfo_parameters.expand ? ListServiceInfo_parameters.expand : msg.payload;
                                result = client.ListServiceInfo(ListServiceInfo_parameters);
            }
            if (!errorFlag && node.method === 'GarbageCollect') {
                var GarbageCollect_parameters = [];
                var GarbageCollect_nodeParam;
                var GarbageCollect_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GarbageCollect_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GarbageCollect(GarbageCollect_parameters);
            }
            if (!errorFlag && node.method === 'Start') {
                var Start_parameters = [];
                var Start_nodeParam;
                var Start_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Start_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Start(Start_parameters);
            }
            if (!errorFlag && node.method === 'Stop') {
                var Stop_parameters = [];
                var Stop_nodeParam;
                var Stop_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Stop_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Stop(Stop_parameters);
            }
            if (!errorFlag && node.method === 'Enable') {
                var Enable_parameters = [];
                var Enable_nodeParam;
                var Enable_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Enable_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Enable(Enable_parameters);
            }
            if (!errorFlag && node.method === 'Disable') {
                var Disable_parameters = [];
                var Disable_nodeParam;
                var Disable_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Disable_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Disable(Disable_parameters);
            }
            if (!errorFlag && node.method === 'Restart') {
                var Restart_parameters = [];
                var Restart_nodeParam;
                var Restart_nodeParamType;

                if (typeof msg.payload === 'object') {
                    Restart_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Restart(Restart_parameters);
            }
            if (!errorFlag && node.method === 'RestartAll') {
                var RestartAll_parameters = [];
                var RestartAll_nodeParam;
                var RestartAll_nodeParamType;
                result = client.RestartAll(RestartAll_parameters);
            }
            if (!errorFlag && node.method === 'RestartOperatingSystem') {
                var RestartOperatingSystem_parameters = [];
                var RestartOperatingSystem_nodeParam;
                var RestartOperatingSystem_nodeParamType;
                result = client.RestartOperatingSystem(RestartOperatingSystem_parameters);
            }
            if (!errorFlag && node.method === 'ListSipDevice') {
                var ListSipDevice_parameters = [];
                var ListSipDevice_nodeParam;
                var ListSipDevice_nodeParamType;

                ListSipDevice_nodeParam = node.ListSipDevice_top;
                ListSipDevice_nodeParamType = node.ListSipDevice_topType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.top = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.top = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.top = !!ListSipDevice_parameters.top ? ListSipDevice_parameters.top : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_skip;
                ListSipDevice_nodeParamType = node.ListSipDevice_skipType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.skip = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.skip = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.skip = !!ListSipDevice_parameters.skip ? ListSipDevice_parameters.skip : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_search;
                ListSipDevice_nodeParamType = node.ListSipDevice_searchType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.search = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.search = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.search = !!ListSipDevice_parameters.search ? ListSipDevice_parameters.search : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_filter;
                ListSipDevice_nodeParamType = node.ListSipDevice_filterType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.filter = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.filter = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.filter = !!ListSipDevice_parameters.filter ? ListSipDevice_parameters.filter : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_count;
                ListSipDevice_nodeParamType = node.ListSipDevice_countType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.count = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.count = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.count = !!ListSipDevice_parameters.count ? ListSipDevice_parameters.count : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_orderby;
                ListSipDevice_nodeParamType = node.ListSipDevice_orderbyType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.orderby = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.orderby = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.orderby = !!ListSipDevice_parameters.orderby ? ListSipDevice_parameters.orderby : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_select;
                ListSipDevice_nodeParamType = node.ListSipDevice_selectType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.select = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.select = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.select = !!ListSipDevice_parameters.select ? ListSipDevice_parameters.select : msg.payload;
                
                ListSipDevice_nodeParam = node.ListSipDevice_expand;
                ListSipDevice_nodeParamType = node.ListSipDevice_expandType;
                if (ListSipDevice_nodeParamType === 'str') {
                    ListSipDevice_parameters.expand = ListSipDevice_nodeParam || '';
                } else {
                    ListSipDevice_parameters.expand = RED.util.getMessageProperty(msg, ListSipDevice_nodeParam);
                }
                ListSipDevice_parameters.expand = !!ListSipDevice_parameters.expand ? ListSipDevice_parameters.expand : msg.payload;
                                result = client.ListSipDevice(ListSipDevice_parameters);
            }
            if (!errorFlag && node.method === 'GetDirectoryInfo') {
                var GetDirectoryInfo_parameters = [];
                var GetDirectoryInfo_nodeParam;
                var GetDirectoryInfo_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GetDirectoryInfo_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GetDirectoryInfo(GetDirectoryInfo_parameters);
            }
            if (!errorFlag && node.method === 'GetSystemStatus') {
                var GetSystemStatus_parameters = [];
                var GetSystemStatus_nodeParam;
                var GetSystemStatus_nodeParamType;

                GetSystemStatus_nodeParam = node.GetSystemStatus_select;
                GetSystemStatus_nodeParamType = node.GetSystemStatus_selectType;
                if (GetSystemStatus_nodeParamType === 'str') {
                    GetSystemStatus_parameters.select = GetSystemStatus_nodeParam || '';
                } else {
                    GetSystemStatus_parameters.select = RED.util.getMessageProperty(msg, GetSystemStatus_nodeParam);
                }
                GetSystemStatus_parameters.select = !!GetSystemStatus_parameters.select ? GetSystemStatus_parameters.select : msg.payload;
                
                GetSystemStatus_nodeParam = node.GetSystemStatus_expand;
                GetSystemStatus_nodeParamType = node.GetSystemStatus_expandType;
                if (GetSystemStatus_nodeParamType === 'str') {
                    GetSystemStatus_parameters.expand = GetSystemStatus_nodeParam || '';
                } else {
                    GetSystemStatus_parameters.expand = RED.util.getMessageProperty(msg, GetSystemStatus_nodeParam);
                }
                GetSystemStatus_parameters.expand = !!GetSystemStatus_parameters.expand ? GetSystemStatus_parameters.expand : msg.payload;
                                result = client.GetSystemStatus(GetSystemStatus_parameters);
            }
            if (!errorFlag && node.method === 'SystemExtensions') {
                var SystemExtensions_parameters = [];
                var SystemExtensions_nodeParam;
                var SystemExtensions_nodeParamType;

                SystemExtensions_nodeParam = node.SystemExtensions_top;
                SystemExtensions_nodeParamType = node.SystemExtensions_topType;
                if (SystemExtensions_nodeParamType === 'str') {
                    SystemExtensions_parameters.top = SystemExtensions_nodeParam || '';
                } else {
                    SystemExtensions_parameters.top = RED.util.getMessageProperty(msg, SystemExtensions_nodeParam);
                }
                SystemExtensions_parameters.top = !!SystemExtensions_parameters.top ? SystemExtensions_parameters.top : msg.payload;
                
                SystemExtensions_nodeParam = node.SystemExtensions_skip;
                SystemExtensions_nodeParamType = node.SystemExtensions_skipType;
                if (SystemExtensions_nodeParamType === 'str') {
                    SystemExtensions_parameters.skip = SystemExtensions_nodeParam || '';
                } else {
                    SystemExtensions_parameters.skip = RED.util.getMessageProperty(msg, SystemExtensions_nodeParam);
                }
                SystemExtensions_parameters.skip = !!SystemExtensions_parameters.skip ? SystemExtensions_parameters.skip : msg.payload;
                
                SystemExtensions_nodeParam = node.SystemExtensions_search;
                SystemExtensions_nodeParamType = node.SystemExtensions_searchType;
                if (SystemExtensions_nodeParamType === 'str') {
                    SystemExtensions_parameters.search = SystemExtensions_nodeParam || '';
                } else {
                    SystemExtensions_parameters.search = RED.util.getMessageProperty(msg, SystemExtensions_nodeParam);
                }
                SystemExtensions_parameters.search = !!SystemExtensions_parameters.search ? SystemExtensions_parameters.search : msg.payload;
                
                SystemExtensions_nodeParam = node.SystemExtensions_filter;
                SystemExtensions_nodeParamType = node.SystemExtensions_filterType;
                if (SystemExtensions_nodeParamType === 'str') {
                    SystemExtensions_parameters.filter = SystemExtensions_nodeParam || '';
                } else {
                    SystemExtensions_parameters.filter = RED.util.getMessageProperty(msg, SystemExtensions_nodeParam);
                }
                SystemExtensions_parameters.filter = !!SystemExtensions_parameters.filter ? SystemExtensions_parameters.filter : msg.payload;
                
                SystemExtensions_nodeParam = node.SystemExtensions_count;
                SystemExtensions_nodeParamType = node.SystemExtensions_countType;
                if (SystemExtensions_nodeParamType === 'str') {
                    SystemExtensions_parameters.count = SystemExtensions_nodeParam || '';
                } else {
                    SystemExtensions_parameters.count = RED.util.getMessageProperty(msg, SystemExtensions_nodeParam);
                }
                SystemExtensions_parameters.count = !!SystemExtensions_parameters.count ? SystemExtensions_parameters.count : msg.payload;
                                result = client.SystemExtensions(SystemExtensions_parameters);
            }
            if (!errorFlag && node.method === 'SystemDatabaseInformation') {
                var SystemDatabaseInformation_parameters = [];
                var SystemDatabaseInformation_nodeParam;
                var SystemDatabaseInformation_nodeParamType;
                result = client.SystemDatabaseInformation(SystemDatabaseInformation_parameters);
            }
            if (!errorFlag && node.method === 'GetVersionType') {
                var GetVersionType_parameters = [];
                var GetVersionType_nodeParam;
                var GetVersionType_nodeParamType;
                result = client.GetVersionType(GetVersionType_parameters);
            }
            if (!errorFlag && node.method === 'SetChatLogStatus') {
                var SetChatLogStatus_parameters = [];
                var SetChatLogStatus_nodeParam;
                var SetChatLogStatus_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetChatLogStatus_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetChatLogStatus(SetChatLogStatus_parameters);
            }
            if (!errorFlag && node.method === 'StartDBMaintenance') {
                var StartDBMaintenance_parameters = [];
                var StartDBMaintenance_nodeParam;
                var StartDBMaintenance_nodeParamType;
                result = client.StartDBMaintenance(StartDBMaintenance_parameters);
            }
            if (!errorFlag && node.method === 'SystemHealthStatus') {
                var SystemHealthStatus_parameters = [];
                var SystemHealthStatus_nodeParam;
                var SystemHealthStatus_nodeParamType;
                result = client.SystemHealthStatus(SystemHealthStatus_parameters);
            }
            if (!errorFlag && node.method === 'APIToken') {
                var APIToken_parameters = [];
                var APIToken_nodeParam;
                var APIToken_nodeParamType;
                result = client.APIToken(APIToken_parameters);
            }
            if (!errorFlag && node.method === 'SetMultiCompanyMode') {
                var SetMultiCompanyMode_parameters = [];
                var SetMultiCompanyMode_nodeParam;
                var SetMultiCompanyMode_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetMultiCompanyMode_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetMultiCompanyMode(SetMultiCompanyMode_parameters);
            }
            if (!errorFlag && node.method === 'ListProperty') {
                var ListProperty_parameters = [];
                var ListProperty_nodeParam;
                var ListProperty_nodeParamType;

                ListProperty_nodeParam = node.ListProperty_top;
                ListProperty_nodeParamType = node.ListProperty_topType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.top = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.top = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.top = !!ListProperty_parameters.top ? ListProperty_parameters.top : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_skip;
                ListProperty_nodeParamType = node.ListProperty_skipType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.skip = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.skip = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.skip = !!ListProperty_parameters.skip ? ListProperty_parameters.skip : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_search;
                ListProperty_nodeParamType = node.ListProperty_searchType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.search = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.search = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.search = !!ListProperty_parameters.search ? ListProperty_parameters.search : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_filter;
                ListProperty_nodeParamType = node.ListProperty_filterType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.filter = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.filter = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.filter = !!ListProperty_parameters.filter ? ListProperty_parameters.filter : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_count;
                ListProperty_nodeParamType = node.ListProperty_countType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.count = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.count = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.count = !!ListProperty_parameters.count ? ListProperty_parameters.count : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_orderby;
                ListProperty_nodeParamType = node.ListProperty_orderbyType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.orderby = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.orderby = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.orderby = !!ListProperty_parameters.orderby ? ListProperty_parameters.orderby : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_select;
                ListProperty_nodeParamType = node.ListProperty_selectType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.select = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.select = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.select = !!ListProperty_parameters.select ? ListProperty_parameters.select : msg.payload;
                
                ListProperty_nodeParam = node.ListProperty_expand;
                ListProperty_nodeParamType = node.ListProperty_expandType;
                if (ListProperty_nodeParamType === 'str') {
                    ListProperty_parameters.expand = ListProperty_nodeParam || '';
                } else {
                    ListProperty_parameters.expand = RED.util.getMessageProperty(msg, ListProperty_nodeParam);
                }
                ListProperty_parameters.expand = !!ListProperty_parameters.expand ? ListProperty_parameters.expand : msg.payload;
                                result = client.ListProperty(ListProperty_parameters);
            }
            if (!errorFlag && node.method === 'CreateProperty') {
                var CreateProperty_parameters = [];
                var CreateProperty_nodeParam;
                var CreateProperty_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateProperty_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateProperty(CreateProperty_parameters);
            }
            if (!errorFlag && node.method === 'GetProperty') {
                var GetProperty_parameters = [];
                var GetProperty_nodeParam;
                var GetProperty_nodeParamType;

                GetProperty_nodeParam = node.GetProperty_name;
                GetProperty_nodeParamType = node.GetProperty_nameType;
                if (GetProperty_nodeParamType === 'str') {
                    GetProperty_parameters.name = GetProperty_nodeParam || '';
                } else {
                    GetProperty_parameters.name = RED.util.getMessageProperty(msg, GetProperty_nodeParam);
                }
                GetProperty_parameters.name = !!GetProperty_parameters.name ? GetProperty_parameters.name : msg.payload;
                
                GetProperty_nodeParam = node.GetProperty_select;
                GetProperty_nodeParamType = node.GetProperty_selectType;
                if (GetProperty_nodeParamType === 'str') {
                    GetProperty_parameters.select = GetProperty_nodeParam || '';
                } else {
                    GetProperty_parameters.select = RED.util.getMessageProperty(msg, GetProperty_nodeParam);
                }
                GetProperty_parameters.select = !!GetProperty_parameters.select ? GetProperty_parameters.select : msg.payload;
                
                GetProperty_nodeParam = node.GetProperty_expand;
                GetProperty_nodeParamType = node.GetProperty_expandType;
                if (GetProperty_nodeParamType === 'str') {
                    GetProperty_parameters.expand = GetProperty_nodeParam || '';
                } else {
                    GetProperty_parameters.expand = RED.util.getMessageProperty(msg, GetProperty_nodeParam);
                }
                GetProperty_parameters.expand = !!GetProperty_parameters.expand ? GetProperty_parameters.expand : msg.payload;
                                result = client.GetProperty(GetProperty_parameters);
            }
            if (!errorFlag && node.method === 'UpdateProperty') {
                var UpdateProperty_parameters = [];
                var UpdateProperty_nodeParam;
                var UpdateProperty_nodeParamType;

                UpdateProperty_nodeParam = node.UpdateProperty_name;
                UpdateProperty_nodeParamType = node.UpdateProperty_nameType;
                if (UpdateProperty_nodeParamType === 'str') {
                    UpdateProperty_parameters.name = UpdateProperty_nodeParam || '';
                } else {
                    UpdateProperty_parameters.name = RED.util.getMessageProperty(msg, UpdateProperty_nodeParam);
                }
                UpdateProperty_parameters.name = !!UpdateProperty_parameters.name ? UpdateProperty_parameters.name : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateProperty_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateProperty(UpdateProperty_parameters);
            }
            if (!errorFlag && node.method === 'DeleteProperty') {
                var DeleteProperty_parameters = [];
                var DeleteProperty_nodeParam;
                var DeleteProperty_nodeParamType;

                DeleteProperty_nodeParam = node.DeleteProperty_name;
                DeleteProperty_nodeParamType = node.DeleteProperty_nameType;
                if (DeleteProperty_nodeParamType === 'str') {
                    DeleteProperty_parameters.name = DeleteProperty_nodeParam || '';
                } else {
                    DeleteProperty_parameters.name = RED.util.getMessageProperty(msg, DeleteProperty_nodeParam);
                }
                DeleteProperty_parameters.name = !!DeleteProperty_parameters.name ? DeleteProperty_parameters.name : msg.payload;
                
                DeleteProperty_nodeParam = node.DeleteProperty_ifMatch;
                DeleteProperty_nodeParamType = node.DeleteProperty_ifMatchType;
                if (DeleteProperty_nodeParamType === 'str') {
                    DeleteProperty_parameters.ifMatch = DeleteProperty_nodeParam || '';
                } else {
                    DeleteProperty_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteProperty_nodeParam);
                }
                DeleteProperty_parameters.ifMatch = !!DeleteProperty_parameters.ifMatch ? DeleteProperty_parameters.ifMatch : msg.payload;
                                result = client.DeleteProperty(DeleteProperty_parameters);
            }
            if (!errorFlag && node.method === 'GetFirstAvailableTrunkNumber') {
                var GetFirstAvailableTrunkNumber_parameters = [];
                var GetFirstAvailableTrunkNumber_nodeParam;
                var GetFirstAvailableTrunkNumber_nodeParamType;
                result = client.GetFirstAvailableTrunkNumber(GetFirstAvailableTrunkNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetTrunk') {
                var GetTrunk_parameters = [];
                var GetTrunk_nodeParam;
                var GetTrunk_nodeParamType;

                GetTrunk_nodeParam = node.GetTrunk_id;
                GetTrunk_nodeParamType = node.GetTrunk_idType;
                if (GetTrunk_nodeParamType === 'str') {
                    GetTrunk_parameters.id = GetTrunk_nodeParam || '';
                } else {
                    GetTrunk_parameters.id = RED.util.getMessageProperty(msg, GetTrunk_nodeParam);
                }
                GetTrunk_parameters.id = !!GetTrunk_parameters.id ? GetTrunk_parameters.id : msg.payload;
                
                GetTrunk_nodeParam = node.GetTrunk_select;
                GetTrunk_nodeParamType = node.GetTrunk_selectType;
                if (GetTrunk_nodeParamType === 'str') {
                    GetTrunk_parameters.select = GetTrunk_nodeParam || '';
                } else {
                    GetTrunk_parameters.select = RED.util.getMessageProperty(msg, GetTrunk_nodeParam);
                }
                GetTrunk_parameters.select = !!GetTrunk_parameters.select ? GetTrunk_parameters.select : msg.payload;
                
                GetTrunk_nodeParam = node.GetTrunk_expand;
                GetTrunk_nodeParamType = node.GetTrunk_expandType;
                if (GetTrunk_nodeParamType === 'str') {
                    GetTrunk_parameters.expand = GetTrunk_nodeParam || '';
                } else {
                    GetTrunk_parameters.expand = RED.util.getMessageProperty(msg, GetTrunk_nodeParam);
                }
                GetTrunk_parameters.expand = !!GetTrunk_parameters.expand ? GetTrunk_parameters.expand : msg.payload;
                                result = client.GetTrunk(GetTrunk_parameters);
            }
            if (!errorFlag && node.method === 'UpdateTrunk') {
                var UpdateTrunk_parameters = [];
                var UpdateTrunk_nodeParam;
                var UpdateTrunk_nodeParamType;

                UpdateTrunk_nodeParam = node.UpdateTrunk_id;
                UpdateTrunk_nodeParamType = node.UpdateTrunk_idType;
                if (UpdateTrunk_nodeParamType === 'str') {
                    UpdateTrunk_parameters.id = UpdateTrunk_nodeParam || '';
                } else {
                    UpdateTrunk_parameters.id = RED.util.getMessageProperty(msg, UpdateTrunk_nodeParam);
                }
                UpdateTrunk_parameters.id = !!UpdateTrunk_parameters.id ? UpdateTrunk_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateTrunk_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateTrunk(UpdateTrunk_parameters);
            }
            if (!errorFlag && node.method === 'DeleteTrunk') {
                var DeleteTrunk_parameters = [];
                var DeleteTrunk_nodeParam;
                var DeleteTrunk_nodeParamType;

                DeleteTrunk_nodeParam = node.DeleteTrunk_id;
                DeleteTrunk_nodeParamType = node.DeleteTrunk_idType;
                if (DeleteTrunk_nodeParamType === 'str') {
                    DeleteTrunk_parameters.id = DeleteTrunk_nodeParam || '';
                } else {
                    DeleteTrunk_parameters.id = RED.util.getMessageProperty(msg, DeleteTrunk_nodeParam);
                }
                DeleteTrunk_parameters.id = !!DeleteTrunk_parameters.id ? DeleteTrunk_parameters.id : msg.payload;
                
                DeleteTrunk_nodeParam = node.DeleteTrunk_ifMatch;
                DeleteTrunk_nodeParamType = node.DeleteTrunk_ifMatchType;
                if (DeleteTrunk_nodeParamType === 'str') {
                    DeleteTrunk_parameters.ifMatch = DeleteTrunk_nodeParam || '';
                } else {
                    DeleteTrunk_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteTrunk_nodeParam);
                }
                DeleteTrunk_parameters.ifMatch = !!DeleteTrunk_parameters.ifMatch ? DeleteTrunk_parameters.ifMatch : msg.payload;
                                result = client.DeleteTrunk(DeleteTrunk_parameters);
            }
            if (!errorFlag && node.method === 'InitMasterBridge') {
                var InitMasterBridge_parameters = [];
                var InitMasterBridge_nodeParam;
                var InitMasterBridge_nodeParamType;
                result = client.InitMasterBridge(InitMasterBridge_parameters);
            }
            if (!errorFlag && node.method === 'InitSlaveBridge') {
                var InitSlaveBridge_parameters = [];
                var InitSlaveBridge_nodeParam;
                var InitSlaveBridge_nodeParamType;
                result = client.InitSlaveBridge(InitSlaveBridge_parameters);
            }
            if (!errorFlag && node.method === 'InitTrunk') {
                var InitTrunk_parameters = [];
                var InitTrunk_nodeParam;
                var InitTrunk_nodeParamType;

                InitTrunk_nodeParam = node.InitTrunk_template;
                InitTrunk_nodeParamType = node.InitTrunk_templateType;
                if (InitTrunk_nodeParamType === 'str') {
                    InitTrunk_parameters.template = InitTrunk_nodeParam || '';
                } else {
                    InitTrunk_parameters.template = RED.util.getMessageProperty(msg, InitTrunk_nodeParam);
                }
                InitTrunk_parameters.template = !!InitTrunk_parameters.template ? InitTrunk_parameters.template : msg.payload;
                                result = client.InitTrunk(InitTrunk_parameters);
            }
            if (!errorFlag && node.method === 'ExportTrunk') {
                var ExportTrunk_parameters = [];
                var ExportTrunk_nodeParam;
                var ExportTrunk_nodeParamType;

                ExportTrunk_nodeParam = node.ExportTrunk_id;
                ExportTrunk_nodeParamType = node.ExportTrunk_idType;
                if (ExportTrunk_nodeParamType === 'str') {
                    ExportTrunk_parameters.id = ExportTrunk_nodeParam || '';
                } else {
                    ExportTrunk_parameters.id = RED.util.getMessageProperty(msg, ExportTrunk_nodeParam);
                }
                ExportTrunk_parameters.id = !!ExportTrunk_parameters.id ? ExportTrunk_parameters.id : msg.payload;
                                result = client.ExportTrunk(ExportTrunk_parameters);
            }
            if (!errorFlag && node.method === 'RefreshRegistration') {
                var RefreshRegistration_parameters = [];
                var RefreshRegistration_nodeParam;
                var RefreshRegistration_nodeParamType;

                if (typeof msg.payload === 'object') {
                    RefreshRegistration_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.RefreshRegistration(RefreshRegistration_parameters);
            }
            if (!errorFlag && node.method === 'SetRoutes') {
                var SetRoutes_parameters = [];
                var SetRoutes_nodeParam;
                var SetRoutes_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetRoutes_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetRoutes(SetRoutes_parameters);
            }
            if (!errorFlag && node.method === 'GetTrunkByNumber') {
                var GetTrunkByNumber_parameters = [];
                var GetTrunkByNumber_nodeParam;
                var GetTrunkByNumber_nodeParamType;

                GetTrunkByNumber_nodeParam = node.GetTrunkByNumber_number;
                GetTrunkByNumber_nodeParamType = node.GetTrunkByNumber_numberType;
                if (GetTrunkByNumber_nodeParamType === 'str') {
                    GetTrunkByNumber_parameters.number = GetTrunkByNumber_nodeParam || '';
                } else {
                    GetTrunkByNumber_parameters.number = RED.util.getMessageProperty(msg, GetTrunkByNumber_nodeParam);
                }
                GetTrunkByNumber_parameters.number = !!GetTrunkByNumber_parameters.number ? GetTrunkByNumber_parameters.number : msg.payload;
                                result = client.GetTrunkByNumber(GetTrunkByNumber_parameters);
            }
            if (!errorFlag && node.method === 'ListTrunk') {
                var ListTrunk_parameters = [];
                var ListTrunk_nodeParam;
                var ListTrunk_nodeParamType;

                ListTrunk_nodeParam = node.ListTrunk_top;
                ListTrunk_nodeParamType = node.ListTrunk_topType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.top = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.top = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.top = !!ListTrunk_parameters.top ? ListTrunk_parameters.top : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_skip;
                ListTrunk_nodeParamType = node.ListTrunk_skipType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.skip = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.skip = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.skip = !!ListTrunk_parameters.skip ? ListTrunk_parameters.skip : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_search;
                ListTrunk_nodeParamType = node.ListTrunk_searchType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.search = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.search = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.search = !!ListTrunk_parameters.search ? ListTrunk_parameters.search : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_filter;
                ListTrunk_nodeParamType = node.ListTrunk_filterType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.filter = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.filter = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.filter = !!ListTrunk_parameters.filter ? ListTrunk_parameters.filter : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_count;
                ListTrunk_nodeParamType = node.ListTrunk_countType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.count = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.count = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.count = !!ListTrunk_parameters.count ? ListTrunk_parameters.count : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_orderby;
                ListTrunk_nodeParamType = node.ListTrunk_orderbyType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.orderby = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.orderby = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.orderby = !!ListTrunk_parameters.orderby ? ListTrunk_parameters.orderby : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_select;
                ListTrunk_nodeParamType = node.ListTrunk_selectType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.select = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.select = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.select = !!ListTrunk_parameters.select ? ListTrunk_parameters.select : msg.payload;
                
                ListTrunk_nodeParam = node.ListTrunk_expand;
                ListTrunk_nodeParamType = node.ListTrunk_expandType;
                if (ListTrunk_nodeParamType === 'str') {
                    ListTrunk_parameters.expand = ListTrunk_nodeParam || '';
                } else {
                    ListTrunk_parameters.expand = RED.util.getMessageProperty(msg, ListTrunk_nodeParam);
                }
                ListTrunk_parameters.expand = !!ListTrunk_parameters.expand ? ListTrunk_parameters.expand : msg.payload;
                                result = client.ListTrunk(ListTrunk_parameters);
            }
            if (!errorFlag && node.method === 'CreateTrunk') {
                var CreateTrunk_parameters = [];
                var CreateTrunk_nodeParam;
                var CreateTrunk_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateTrunk_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateTrunk(CreateTrunk_parameters);
            }
            if (!errorFlag && node.method === 'ProvisionTrunk') {
                var ProvisionTrunk_parameters = [];
                var ProvisionTrunk_nodeParam;
                var ProvisionTrunk_nodeParamType;

                if (typeof msg.payload === 'object') {
                    ProvisionTrunk_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.ProvisionTrunk(ProvisionTrunk_parameters);
            }
            if (!errorFlag && node.method === 'TelegramSession') {
                var TelegramSession_parameters = [];
                var TelegramSession_nodeParam;
                var TelegramSession_nodeParamType;

                if (typeof msg.payload === 'object') {
                    TelegramSession_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.TelegramSession(TelegramSession_parameters);
            }
            if (!errorFlag && node.method === 'ListTrunkTemplate') {
                var ListTrunkTemplate_parameters = [];
                var ListTrunkTemplate_nodeParam;
                var ListTrunkTemplate_nodeParamType;

                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_top;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_topType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.top = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.top = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.top = !!ListTrunkTemplate_parameters.top ? ListTrunkTemplate_parameters.top : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_skip;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_skipType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.skip = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.skip = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.skip = !!ListTrunkTemplate_parameters.skip ? ListTrunkTemplate_parameters.skip : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_search;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_searchType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.search = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.search = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.search = !!ListTrunkTemplate_parameters.search ? ListTrunkTemplate_parameters.search : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_filter;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_filterType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.filter = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.filter = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.filter = !!ListTrunkTemplate_parameters.filter ? ListTrunkTemplate_parameters.filter : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_count;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_countType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.count = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.count = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.count = !!ListTrunkTemplate_parameters.count ? ListTrunkTemplate_parameters.count : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_orderby;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_orderbyType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.orderby = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.orderby = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.orderby = !!ListTrunkTemplate_parameters.orderby ? ListTrunkTemplate_parameters.orderby : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_select;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_selectType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.select = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.select = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.select = !!ListTrunkTemplate_parameters.select ? ListTrunkTemplate_parameters.select : msg.payload;
                
                ListTrunkTemplate_nodeParam = node.ListTrunkTemplate_expand;
                ListTrunkTemplate_nodeParamType = node.ListTrunkTemplate_expandType;
                if (ListTrunkTemplate_nodeParamType === 'str') {
                    ListTrunkTemplate_parameters.expand = ListTrunkTemplate_nodeParam || '';
                } else {
                    ListTrunkTemplate_parameters.expand = RED.util.getMessageProperty(msg, ListTrunkTemplate_nodeParam);
                }
                ListTrunkTemplate_parameters.expand = !!ListTrunkTemplate_parameters.expand ? ListTrunkTemplate_parameters.expand : msg.payload;
                                result = client.ListTrunkTemplate(ListTrunkTemplate_parameters);
            }
            if (!errorFlag && node.method === 'CreateTrunkTemplate') {
                var CreateTrunkTemplate_parameters = [];
                var CreateTrunkTemplate_nodeParam;
                var CreateTrunkTemplate_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateTrunkTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateTrunkTemplate(CreateTrunkTemplate_parameters);
            }
            if (!errorFlag && node.method === 'GetTrunkTemplate') {
                var GetTrunkTemplate_parameters = [];
                var GetTrunkTemplate_nodeParam;
                var GetTrunkTemplate_nodeParamType;

                GetTrunkTemplate_nodeParam = node.GetTrunkTemplate_id;
                GetTrunkTemplate_nodeParamType = node.GetTrunkTemplate_idType;
                if (GetTrunkTemplate_nodeParamType === 'str') {
                    GetTrunkTemplate_parameters.id = GetTrunkTemplate_nodeParam || '';
                } else {
                    GetTrunkTemplate_parameters.id = RED.util.getMessageProperty(msg, GetTrunkTemplate_nodeParam);
                }
                GetTrunkTemplate_parameters.id = !!GetTrunkTemplate_parameters.id ? GetTrunkTemplate_parameters.id : msg.payload;
                
                GetTrunkTemplate_nodeParam = node.GetTrunkTemplate_select;
                GetTrunkTemplate_nodeParamType = node.GetTrunkTemplate_selectType;
                if (GetTrunkTemplate_nodeParamType === 'str') {
                    GetTrunkTemplate_parameters.select = GetTrunkTemplate_nodeParam || '';
                } else {
                    GetTrunkTemplate_parameters.select = RED.util.getMessageProperty(msg, GetTrunkTemplate_nodeParam);
                }
                GetTrunkTemplate_parameters.select = !!GetTrunkTemplate_parameters.select ? GetTrunkTemplate_parameters.select : msg.payload;
                
                GetTrunkTemplate_nodeParam = node.GetTrunkTemplate_expand;
                GetTrunkTemplate_nodeParamType = node.GetTrunkTemplate_expandType;
                if (GetTrunkTemplate_nodeParamType === 'str') {
                    GetTrunkTemplate_parameters.expand = GetTrunkTemplate_nodeParam || '';
                } else {
                    GetTrunkTemplate_parameters.expand = RED.util.getMessageProperty(msg, GetTrunkTemplate_nodeParam);
                }
                GetTrunkTemplate_parameters.expand = !!GetTrunkTemplate_parameters.expand ? GetTrunkTemplate_parameters.expand : msg.payload;
                                result = client.GetTrunkTemplate(GetTrunkTemplate_parameters);
            }
            if (!errorFlag && node.method === 'UpdateTrunkTemplate') {
                var UpdateTrunkTemplate_parameters = [];
                var UpdateTrunkTemplate_nodeParam;
                var UpdateTrunkTemplate_nodeParamType;

                UpdateTrunkTemplate_nodeParam = node.UpdateTrunkTemplate_id;
                UpdateTrunkTemplate_nodeParamType = node.UpdateTrunkTemplate_idType;
                if (UpdateTrunkTemplate_nodeParamType === 'str') {
                    UpdateTrunkTemplate_parameters.id = UpdateTrunkTemplate_nodeParam || '';
                } else {
                    UpdateTrunkTemplate_parameters.id = RED.util.getMessageProperty(msg, UpdateTrunkTemplate_nodeParam);
                }
                UpdateTrunkTemplate_parameters.id = !!UpdateTrunkTemplate_parameters.id ? UpdateTrunkTemplate_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateTrunkTemplate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateTrunkTemplate(UpdateTrunkTemplate_parameters);
            }
            if (!errorFlag && node.method === 'DeleteTrunkTemplate') {
                var DeleteTrunkTemplate_parameters = [];
                var DeleteTrunkTemplate_nodeParam;
                var DeleteTrunkTemplate_nodeParamType;

                DeleteTrunkTemplate_nodeParam = node.DeleteTrunkTemplate_id;
                DeleteTrunkTemplate_nodeParamType = node.DeleteTrunkTemplate_idType;
                if (DeleteTrunkTemplate_nodeParamType === 'str') {
                    DeleteTrunkTemplate_parameters.id = DeleteTrunkTemplate_nodeParam || '';
                } else {
                    DeleteTrunkTemplate_parameters.id = RED.util.getMessageProperty(msg, DeleteTrunkTemplate_nodeParam);
                }
                DeleteTrunkTemplate_parameters.id = !!DeleteTrunkTemplate_parameters.id ? DeleteTrunkTemplate_parameters.id : msg.payload;
                
                DeleteTrunkTemplate_nodeParam = node.DeleteTrunkTemplate_ifMatch;
                DeleteTrunkTemplate_nodeParamType = node.DeleteTrunkTemplate_ifMatchType;
                if (DeleteTrunkTemplate_nodeParamType === 'str') {
                    DeleteTrunkTemplate_parameters.ifMatch = DeleteTrunkTemplate_nodeParam || '';
                } else {
                    DeleteTrunkTemplate_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteTrunkTemplate_nodeParam);
                }
                DeleteTrunkTemplate_parameters.ifMatch = !!DeleteTrunkTemplate_parameters.ifMatch ? DeleteTrunkTemplate_parameters.ifMatch : msg.payload;
                                result = client.DeleteTrunkTemplate(DeleteTrunkTemplate_parameters);
            }
            if (!errorFlag && node.method === 'GetUpdateSettings') {
                var GetUpdateSettings_parameters = [];
                var GetUpdateSettings_nodeParam;
                var GetUpdateSettings_nodeParamType;
                result = client.GetUpdateSettings(GetUpdateSettings_parameters);
            }
            if (!errorFlag && node.method === 'SetUpdateSettings') {
                var SetUpdateSettings_parameters = [];
                var SetUpdateSettings_nodeParam;
                var SetUpdateSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    SetUpdateSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetUpdateSettings(SetUpdateSettings_parameters);
            }
            if (!errorFlag && node.method === 'HasDebianUpgrade') {
                var HasDebianUpgrade_parameters = [];
                var HasDebianUpgrade_nodeParam;
                var HasDebianUpgrade_nodeParamType;
                result = client.HasDebianUpgrade(HasDebianUpgrade_parameters);
            }
            if (!errorFlag && node.method === 'UpgradeDebian') {
                var UpgradeDebian_parameters = [];
                var UpgradeDebian_nodeParam;
                var UpgradeDebian_nodeParamType;
                result = client.UpgradeDebian(UpgradeDebian_parameters);
            }
            if (!errorFlag && node.method === 'GetUpdates') {
                var GetUpdates_parameters = [];
                var GetUpdates_nodeParam;
                var GetUpdates_nodeParamType;
                result = client.GetUpdates(GetUpdates_parameters);
            }
            if (!errorFlag && node.method === 'GetPromptSetUpdates') {
                var GetPromptSetUpdates_parameters = [];
                var GetPromptSetUpdates_nodeParam;
                var GetPromptSetUpdates_nodeParamType;
                result = client.GetPromptSetUpdates(GetPromptSetUpdates_parameters);
            }
            if (!errorFlag && node.method === 'GetClientCrmUpdates') {
                var GetClientCrmUpdates_parameters = [];
                var GetClientCrmUpdates_nodeParam;
                var GetClientCrmUpdates_nodeParamType;
                result = client.GetClientCrmUpdates(GetClientCrmUpdates_parameters);
            }
            if (!errorFlag && node.method === 'GetServerCrmUpdates') {
                var GetServerCrmUpdates_parameters = [];
                var GetServerCrmUpdates_nodeParam;
                var GetServerCrmUpdates_nodeParamType;
                result = client.GetServerCrmUpdates(GetServerCrmUpdates_parameters);
            }
            if (!errorFlag && node.method === 'InstallUpdates') {
                var InstallUpdates_parameters = [];
                var InstallUpdates_nodeParam;
                var InstallUpdates_nodeParamType;

                if (typeof msg.payload === 'object') {
                    InstallUpdates_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.InstallUpdates(InstallUpdates_parameters);
            }
            if (!errorFlag && node.method === 'GetUpdatesStats') {
                var GetUpdatesStats_parameters = [];
                var GetUpdatesStats_nodeParam;
                var GetUpdatesStats_nodeParamType;
                result = client.GetUpdatesStats(GetUpdatesStats_parameters);
            }
            if (!errorFlag && node.method === 'HasDuplicatedEmail') {
                var HasDuplicatedEmail_parameters = [];
                var HasDuplicatedEmail_nodeParam;
                var HasDuplicatedEmail_nodeParamType;

                HasDuplicatedEmail_nodeParam = node.HasDuplicatedEmail_id;
                HasDuplicatedEmail_nodeParamType = node.HasDuplicatedEmail_idType;
                if (HasDuplicatedEmail_nodeParamType === 'str') {
                    HasDuplicatedEmail_parameters.id = HasDuplicatedEmail_nodeParam || '';
                } else {
                    HasDuplicatedEmail_parameters.id = RED.util.getMessageProperty(msg, HasDuplicatedEmail_nodeParam);
                }
                HasDuplicatedEmail_parameters.id = !!HasDuplicatedEmail_parameters.id ? HasDuplicatedEmail_parameters.id : msg.payload;
                                result = client.HasDuplicatedEmail(HasDuplicatedEmail_parameters);
            }
            if (!errorFlag && node.method === 'GetDuplicatedEmails') {
                var GetDuplicatedEmails_parameters = [];
                var GetDuplicatedEmails_nodeParam;
                var GetDuplicatedEmails_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GetDuplicatedEmails_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GetDuplicatedEmails(GetDuplicatedEmails_parameters);
            }
            if (!errorFlag && node.method === 'GetFirstAvailableExtensionNumber') {
                var GetFirstAvailableExtensionNumber_parameters = [];
                var GetFirstAvailableExtensionNumber_nodeParam;
                var GetFirstAvailableExtensionNumber_nodeParamType;
                result = client.GetFirstAvailableExtensionNumber(GetFirstAvailableExtensionNumber_parameters);
            }
            if (!errorFlag && node.method === 'GetFirstAvailableHotdeskingNumber') {
                var GetFirstAvailableHotdeskingNumber_parameters = [];
                var GetFirstAvailableHotdeskingNumber_nodeParam;
                var GetFirstAvailableHotdeskingNumber_nodeParamType;
                result = client.GetFirstAvailableHotdeskingNumber(GetFirstAvailableHotdeskingNumber_parameters);
            }
            if (!errorFlag && node.method === 'SendWelcomeEmail') {
                var SendWelcomeEmail_parameters = [];
                var SendWelcomeEmail_nodeParam;
                var SendWelcomeEmail_nodeParamType;

                SendWelcomeEmail_nodeParam = node.SendWelcomeEmail_id;
                SendWelcomeEmail_nodeParamType = node.SendWelcomeEmail_idType;
                if (SendWelcomeEmail_nodeParamType === 'str') {
                    SendWelcomeEmail_parameters.id = SendWelcomeEmail_nodeParam || '';
                } else {
                    SendWelcomeEmail_parameters.id = RED.util.getMessageProperty(msg, SendWelcomeEmail_nodeParam);
                }
                SendWelcomeEmail_parameters.id = !!SendWelcomeEmail_parameters.id ? SendWelcomeEmail_parameters.id : msg.payload;
                                result = client.SendWelcomeEmail(SendWelcomeEmail_parameters);
            }
            if (!errorFlag && node.method === 'ListGroups') {
                var ListGroups_parameters = [];
                var ListGroups_nodeParam;
                var ListGroups_nodeParamType;

                ListGroups_nodeParam = node.ListGroups_id;
                ListGroups_nodeParamType = node.ListGroups_idType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.id = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.id = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.id = !!ListGroups_parameters.id ? ListGroups_parameters.id : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_top;
                ListGroups_nodeParamType = node.ListGroups_topType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.top = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.top = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.top = !!ListGroups_parameters.top ? ListGroups_parameters.top : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_skip;
                ListGroups_nodeParamType = node.ListGroups_skipType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.skip = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.skip = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.skip = !!ListGroups_parameters.skip ? ListGroups_parameters.skip : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_search;
                ListGroups_nodeParamType = node.ListGroups_searchType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.search = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.search = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.search = !!ListGroups_parameters.search ? ListGroups_parameters.search : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_filter;
                ListGroups_nodeParamType = node.ListGroups_filterType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.filter = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.filter = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.filter = !!ListGroups_parameters.filter ? ListGroups_parameters.filter : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_count;
                ListGroups_nodeParamType = node.ListGroups_countType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.count = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.count = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.count = !!ListGroups_parameters.count ? ListGroups_parameters.count : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_orderby;
                ListGroups_nodeParamType = node.ListGroups_orderbyType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.orderby = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.orderby = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.orderby = !!ListGroups_parameters.orderby ? ListGroups_parameters.orderby : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_select;
                ListGroups_nodeParamType = node.ListGroups_selectType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.select = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.select = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.select = !!ListGroups_parameters.select ? ListGroups_parameters.select : msg.payload;
                
                ListGroups_nodeParam = node.ListGroups_expand;
                ListGroups_nodeParamType = node.ListGroups_expandType;
                if (ListGroups_nodeParamType === 'str') {
                    ListGroups_parameters.expand = ListGroups_nodeParam || '';
                } else {
                    ListGroups_parameters.expand = RED.util.getMessageProperty(msg, ListGroups_nodeParam);
                }
                ListGroups_parameters.expand = !!ListGroups_parameters.expand ? ListGroups_parameters.expand : msg.payload;
                                result = client.ListGroups(ListGroups_parameters);
            }
            if (!errorFlag && node.method === 'ListForwardingProfiles') {
                var ListForwardingProfiles_parameters = [];
                var ListForwardingProfiles_nodeParam;
                var ListForwardingProfiles_nodeParamType;

                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_id;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_idType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.id = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.id = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.id = !!ListForwardingProfiles_parameters.id ? ListForwardingProfiles_parameters.id : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_top;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_topType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.top = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.top = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.top = !!ListForwardingProfiles_parameters.top ? ListForwardingProfiles_parameters.top : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_skip;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_skipType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.skip = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.skip = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.skip = !!ListForwardingProfiles_parameters.skip ? ListForwardingProfiles_parameters.skip : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_search;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_searchType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.search = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.search = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.search = !!ListForwardingProfiles_parameters.search ? ListForwardingProfiles_parameters.search : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_filter;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_filterType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.filter = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.filter = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.filter = !!ListForwardingProfiles_parameters.filter ? ListForwardingProfiles_parameters.filter : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_count;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_countType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.count = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.count = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.count = !!ListForwardingProfiles_parameters.count ? ListForwardingProfiles_parameters.count : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_orderby;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_orderbyType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.orderby = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.orderby = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.orderby = !!ListForwardingProfiles_parameters.orderby ? ListForwardingProfiles_parameters.orderby : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_select;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_selectType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.select = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.select = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.select = !!ListForwardingProfiles_parameters.select ? ListForwardingProfiles_parameters.select : msg.payload;
                
                ListForwardingProfiles_nodeParam = node.ListForwardingProfiles_expand;
                ListForwardingProfiles_nodeParamType = node.ListForwardingProfiles_expandType;
                if (ListForwardingProfiles_nodeParamType === 'str') {
                    ListForwardingProfiles_parameters.expand = ListForwardingProfiles_nodeParam || '';
                } else {
                    ListForwardingProfiles_parameters.expand = RED.util.getMessageProperty(msg, ListForwardingProfiles_nodeParam);
                }
                ListForwardingProfiles_parameters.expand = !!ListForwardingProfiles_parameters.expand ? ListForwardingProfiles_parameters.expand : msg.payload;
                                result = client.ListForwardingProfiles(ListForwardingProfiles_parameters);
            }
            if (!errorFlag && node.method === 'GetPhoneSecret') {
                var GetPhoneSecret_parameters = [];
                var GetPhoneSecret_nodeParam;
                var GetPhoneSecret_nodeParamType;

                GetPhoneSecret_nodeParam = node.GetPhoneSecret_id;
                GetPhoneSecret_nodeParamType = node.GetPhoneSecret_idType;
                if (GetPhoneSecret_nodeParamType === 'str') {
                    GetPhoneSecret_parameters.id = GetPhoneSecret_nodeParam || '';
                } else {
                    GetPhoneSecret_parameters.id = RED.util.getMessageProperty(msg, GetPhoneSecret_nodeParam);
                }
                GetPhoneSecret_parameters.id = !!GetPhoneSecret_parameters.id ? GetPhoneSecret_parameters.id : msg.payload;
                                result = client.GetPhoneSecret(GetPhoneSecret_parameters);
            }
            if (!errorFlag && node.method === 'Regenerate') {
                var Regenerate_parameters = [];
                var Regenerate_nodeParam;
                var Regenerate_nodeParamType;

                Regenerate_nodeParam = node.Regenerate_id;
                Regenerate_nodeParamType = node.Regenerate_idType;
                if (Regenerate_nodeParamType === 'str') {
                    Regenerate_parameters.id = Regenerate_nodeParam || '';
                } else {
                    Regenerate_parameters.id = RED.util.getMessageProperty(msg, Regenerate_nodeParam);
                }
                Regenerate_parameters.id = !!Regenerate_parameters.id ? Regenerate_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    Regenerate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.Regenerate(Regenerate_parameters);
            }
            if (!errorFlag && node.method === 'RegeneratePasswords') {
                var RegeneratePasswords_parameters = [];
                var RegeneratePasswords_nodeParam;
                var RegeneratePasswords_nodeParamType;

                if (typeof msg.payload === 'object') {
                    RegeneratePasswords_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.RegeneratePasswords(RegeneratePasswords_parameters);
            }
            if (!errorFlag && node.method === 'ExportExtensions') {
                var ExportExtensions_parameters = [];
                var ExportExtensions_nodeParam;
                var ExportExtensions_nodeParamType;

                ExportExtensions_nodeParam = node.ExportExtensions_top;
                ExportExtensions_nodeParamType = node.ExportExtensions_topType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.top = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.top = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.top = !!ExportExtensions_parameters.top ? ExportExtensions_parameters.top : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_skip;
                ExportExtensions_nodeParamType = node.ExportExtensions_skipType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.skip = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.skip = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.skip = !!ExportExtensions_parameters.skip ? ExportExtensions_parameters.skip : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_search;
                ExportExtensions_nodeParamType = node.ExportExtensions_searchType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.search = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.search = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.search = !!ExportExtensions_parameters.search ? ExportExtensions_parameters.search : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_filter;
                ExportExtensions_nodeParamType = node.ExportExtensions_filterType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.filter = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.filter = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.filter = !!ExportExtensions_parameters.filter ? ExportExtensions_parameters.filter : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_count;
                ExportExtensions_nodeParamType = node.ExportExtensions_countType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.count = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.count = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.count = !!ExportExtensions_parameters.count ? ExportExtensions_parameters.count : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_select;
                ExportExtensions_nodeParamType = node.ExportExtensions_selectType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.select = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.select = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.select = !!ExportExtensions_parameters.select ? ExportExtensions_parameters.select : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_orderby;
                ExportExtensions_nodeParamType = node.ExportExtensions_orderbyType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.orderby = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.orderby = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.orderby = !!ExportExtensions_parameters.orderby ? ExportExtensions_parameters.orderby : msg.payload;
                
                ExportExtensions_nodeParam = node.ExportExtensions_expand;
                ExportExtensions_nodeParamType = node.ExportExtensions_expandType;
                if (ExportExtensions_nodeParamType === 'str') {
                    ExportExtensions_parameters.expand = ExportExtensions_nodeParam || '';
                } else {
                    ExportExtensions_parameters.expand = RED.util.getMessageProperty(msg, ExportExtensions_nodeParam);
                }
                ExportExtensions_parameters.expand = !!ExportExtensions_parameters.expand ? ExportExtensions_parameters.expand : msg.payload;
                                result = client.ExportExtensions(ExportExtensions_parameters);
            }
            if (!errorFlag && node.method === 'GetPhoneRegistrar') {
                var GetPhoneRegistrar_parameters = [];
                var GetPhoneRegistrar_nodeParam;
                var GetPhoneRegistrar_nodeParamType;

                GetPhoneRegistrar_nodeParam = node.GetPhoneRegistrar_mac;
                GetPhoneRegistrar_nodeParamType = node.GetPhoneRegistrar_macType;
                if (GetPhoneRegistrar_nodeParamType === 'str') {
                    GetPhoneRegistrar_parameters.mac = GetPhoneRegistrar_nodeParam || '';
                } else {
                    GetPhoneRegistrar_parameters.mac = RED.util.getMessageProperty(msg, GetPhoneRegistrar_nodeParam);
                }
                GetPhoneRegistrar_parameters.mac = !!GetPhoneRegistrar_parameters.mac ? GetPhoneRegistrar_parameters.mac : msg.payload;
                                result = client.GetPhoneRegistrar(GetPhoneRegistrar_parameters);
            }
            if (!errorFlag && node.method === 'BulkUpdate') {
                var BulkUpdate_parameters = [];
                var BulkUpdate_nodeParam;
                var BulkUpdate_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkUpdate_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkUpdate(BulkUpdate_parameters);
            }
            if (!errorFlag && node.method === 'GetPhoneRegistrars') {
                var GetPhoneRegistrars_parameters = [];
                var GetPhoneRegistrars_nodeParam;
                var GetPhoneRegistrars_nodeParamType;

                if (typeof msg.payload === 'object') {
                    GetPhoneRegistrars_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.GetPhoneRegistrars(GetPhoneRegistrars_parameters);
            }
            if (!errorFlag && node.method === 'RebootPhone') {
                var RebootPhone_parameters = [];
                var RebootPhone_nodeParam;
                var RebootPhone_nodeParamType;

                if (typeof msg.payload === 'object') {
                    RebootPhone_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.RebootPhone(RebootPhone_parameters);
            }
            if (!errorFlag && node.method === 'ReprovisionPhone') {
                var ReprovisionPhone_parameters = [];
                var ReprovisionPhone_nodeParam;
                var ReprovisionPhone_nodeParamType;

                if (typeof msg.payload === 'object') {
                    ReprovisionPhone_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.ReprovisionPhone(ReprovisionPhone_parameters);
            }
            if (!errorFlag && node.method === 'UpgradePhone') {
                var UpgradePhone_parameters = [];
                var UpgradePhone_nodeParam;
                var UpgradePhone_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpgradePhone_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpgradePhone(UpgradePhone_parameters);
            }
            if (!errorFlag && node.method === 'GenerateProvLink') {
                var GenerateProvLink_parameters = [];
                var GenerateProvLink_nodeParam;
                var GenerateProvLink_nodeParamType;

                GenerateProvLink_nodeParam = node.GenerateProvLink_id;
                GenerateProvLink_nodeParamType = node.GenerateProvLink_idType;
                if (GenerateProvLink_nodeParamType === 'str') {
                    GenerateProvLink_parameters.id = GenerateProvLink_nodeParam || '';
                } else {
                    GenerateProvLink_parameters.id = RED.util.getMessageProperty(msg, GenerateProvLink_nodeParam);
                }
                GenerateProvLink_parameters.id = !!GenerateProvLink_parameters.id ? GenerateProvLink_parameters.id : msg.payload;
                                result = client.GenerateProvLink(GenerateProvLink_parameters);
            }
            if (!errorFlag && node.method === 'GetUser') {
                var GetUser_parameters = [];
                var GetUser_nodeParam;
                var GetUser_nodeParamType;

                GetUser_nodeParam = node.GetUser_id;
                GetUser_nodeParamType = node.GetUser_idType;
                if (GetUser_nodeParamType === 'str') {
                    GetUser_parameters.id = GetUser_nodeParam || '';
                } else {
                    GetUser_parameters.id = RED.util.getMessageProperty(msg, GetUser_nodeParam);
                }
                GetUser_parameters.id = !!GetUser_parameters.id ? GetUser_parameters.id : msg.payload;
                
                GetUser_nodeParam = node.GetUser_select;
                GetUser_nodeParamType = node.GetUser_selectType;
                if (GetUser_nodeParamType === 'str') {
                    GetUser_parameters.select = GetUser_nodeParam || '';
                } else {
                    GetUser_parameters.select = RED.util.getMessageProperty(msg, GetUser_nodeParam);
                }
                GetUser_parameters.select = !!GetUser_parameters.select ? GetUser_parameters.select : msg.payload;
                
                GetUser_nodeParam = node.GetUser_expand;
                GetUser_nodeParamType = node.GetUser_expandType;
                if (GetUser_nodeParamType === 'str') {
                    GetUser_parameters.expand = GetUser_nodeParam || '';
                } else {
                    GetUser_parameters.expand = RED.util.getMessageProperty(msg, GetUser_nodeParam);
                }
                GetUser_parameters.expand = !!GetUser_parameters.expand ? GetUser_parameters.expand : msg.payload;
                                result = client.GetUser(GetUser_parameters);
            }
            if (!errorFlag && node.method === 'UpdateUser') {
                var UpdateUser_parameters = [];
                var UpdateUser_nodeParam;
                var UpdateUser_nodeParamType;

                UpdateUser_nodeParam = node.UpdateUser_id;
                UpdateUser_nodeParamType = node.UpdateUser_idType;
                if (UpdateUser_nodeParamType === 'str') {
                    UpdateUser_parameters.id = UpdateUser_nodeParam || '';
                } else {
                    UpdateUser_parameters.id = RED.util.getMessageProperty(msg, UpdateUser_nodeParam);
                }
                UpdateUser_parameters.id = !!UpdateUser_parameters.id ? UpdateUser_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateUser_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateUser(UpdateUser_parameters);
            }
            if (!errorFlag && node.method === 'DeleteUser') {
                var DeleteUser_parameters = [];
                var DeleteUser_nodeParam;
                var DeleteUser_nodeParamType;

                DeleteUser_nodeParam = node.DeleteUser_id;
                DeleteUser_nodeParamType = node.DeleteUser_idType;
                if (DeleteUser_nodeParamType === 'str') {
                    DeleteUser_parameters.id = DeleteUser_nodeParam || '';
                } else {
                    DeleteUser_parameters.id = RED.util.getMessageProperty(msg, DeleteUser_nodeParam);
                }
                DeleteUser_parameters.id = !!DeleteUser_parameters.id ? DeleteUser_parameters.id : msg.payload;
                
                DeleteUser_nodeParam = node.DeleteUser_ifMatch;
                DeleteUser_nodeParamType = node.DeleteUser_ifMatchType;
                if (DeleteUser_nodeParamType === 'str') {
                    DeleteUser_parameters.ifMatch = DeleteUser_nodeParam || '';
                } else {
                    DeleteUser_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteUser_nodeParam);
                }
                DeleteUser_parameters.ifMatch = !!DeleteUser_parameters.ifMatch ? DeleteUser_parameters.ifMatch : msg.payload;
                                result = client.DeleteUser(DeleteUser_parameters);
            }
            if (!errorFlag && node.method === 'ListGreetings') {
                var ListGreetings_parameters = [];
                var ListGreetings_nodeParam;
                var ListGreetings_nodeParamType;

                ListGreetings_nodeParam = node.ListGreetings_id;
                ListGreetings_nodeParamType = node.ListGreetings_idType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.id = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.id = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.id = !!ListGreetings_parameters.id ? ListGreetings_parameters.id : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_top;
                ListGreetings_nodeParamType = node.ListGreetings_topType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.top = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.top = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.top = !!ListGreetings_parameters.top ? ListGreetings_parameters.top : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_skip;
                ListGreetings_nodeParamType = node.ListGreetings_skipType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.skip = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.skip = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.skip = !!ListGreetings_parameters.skip ? ListGreetings_parameters.skip : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_search;
                ListGreetings_nodeParamType = node.ListGreetings_searchType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.search = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.search = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.search = !!ListGreetings_parameters.search ? ListGreetings_parameters.search : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_filter;
                ListGreetings_nodeParamType = node.ListGreetings_filterType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.filter = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.filter = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.filter = !!ListGreetings_parameters.filter ? ListGreetings_parameters.filter : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_count;
                ListGreetings_nodeParamType = node.ListGreetings_countType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.count = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.count = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.count = !!ListGreetings_parameters.count ? ListGreetings_parameters.count : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_orderby;
                ListGreetings_nodeParamType = node.ListGreetings_orderbyType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.orderby = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.orderby = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.orderby = !!ListGreetings_parameters.orderby ? ListGreetings_parameters.orderby : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_select;
                ListGreetings_nodeParamType = node.ListGreetings_selectType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.select = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.select = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.select = !!ListGreetings_parameters.select ? ListGreetings_parameters.select : msg.payload;
                
                ListGreetings_nodeParam = node.ListGreetings_expand;
                ListGreetings_nodeParamType = node.ListGreetings_expandType;
                if (ListGreetings_nodeParamType === 'str') {
                    ListGreetings_parameters.expand = ListGreetings_nodeParam || '';
                } else {
                    ListGreetings_parameters.expand = RED.util.getMessageProperty(msg, ListGreetings_nodeParam);
                }
                ListGreetings_parameters.expand = !!ListGreetings_parameters.expand ? ListGreetings_parameters.expand : msg.payload;
                                result = client.ListGreetings(ListGreetings_parameters);
            }
            if (!errorFlag && node.method === 'MakeCallUserRecordGreeting') {
                var MakeCallUserRecordGreeting_parameters = [];
                var MakeCallUserRecordGreeting_nodeParam;
                var MakeCallUserRecordGreeting_nodeParamType;

                MakeCallUserRecordGreeting_nodeParam = node.MakeCallUserRecordGreeting_id;
                MakeCallUserRecordGreeting_nodeParamType = node.MakeCallUserRecordGreeting_idType;
                if (MakeCallUserRecordGreeting_nodeParamType === 'str') {
                    MakeCallUserRecordGreeting_parameters.id = MakeCallUserRecordGreeting_nodeParam || '';
                } else {
                    MakeCallUserRecordGreeting_parameters.id = RED.util.getMessageProperty(msg, MakeCallUserRecordGreeting_nodeParam);
                }
                MakeCallUserRecordGreeting_parameters.id = !!MakeCallUserRecordGreeting_parameters.id ? MakeCallUserRecordGreeting_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    MakeCallUserRecordGreeting_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.MakeCallUserRecordGreeting(MakeCallUserRecordGreeting_parameters);
            }
            if (!errorFlag && node.method === 'DownloadGreeting') {
                var DownloadGreeting_parameters = [];
                var DownloadGreeting_nodeParam;
                var DownloadGreeting_nodeParamType;

                DownloadGreeting_nodeParam = node.DownloadGreeting_userId;
                DownloadGreeting_nodeParamType = node.DownloadGreeting_userIdType;
                if (DownloadGreeting_nodeParamType === 'str') {
                    DownloadGreeting_parameters.userId = DownloadGreeting_nodeParam || '';
                } else {
                    DownloadGreeting_parameters.userId = RED.util.getMessageProperty(msg, DownloadGreeting_nodeParam);
                }
                DownloadGreeting_parameters.userId = !!DownloadGreeting_parameters.userId ? DownloadGreeting_parameters.userId : msg.payload;
                
                DownloadGreeting_nodeParam = node.DownloadGreeting_fileName;
                DownloadGreeting_nodeParamType = node.DownloadGreeting_fileNameType;
                if (DownloadGreeting_nodeParamType === 'str') {
                    DownloadGreeting_parameters.fileName = DownloadGreeting_nodeParam || '';
                } else {
                    DownloadGreeting_parameters.fileName = RED.util.getMessageProperty(msg, DownloadGreeting_nodeParam);
                }
                DownloadGreeting_parameters.fileName = !!DownloadGreeting_parameters.fileName ? DownloadGreeting_parameters.fileName : msg.payload;
                                result = client.DownloadGreeting(DownloadGreeting_parameters);
            }
            if (!errorFlag && node.method === 'BatchDelete') {
                var BatchDelete_parameters = [];
                var BatchDelete_nodeParam;
                var BatchDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BatchDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BatchDelete(BatchDelete_parameters);
            }
            if (!errorFlag && node.method === 'GetMonitorStatus') {
                var GetMonitorStatus_parameters = [];
                var GetMonitorStatus_nodeParam;
                var GetMonitorStatus_nodeParamType;

                GetMonitorStatus_nodeParam = node.GetMonitorStatus_top;
                GetMonitorStatus_nodeParamType = node.GetMonitorStatus_topType;
                if (GetMonitorStatus_nodeParamType === 'str') {
                    GetMonitorStatus_parameters.top = GetMonitorStatus_nodeParam || '';
                } else {
                    GetMonitorStatus_parameters.top = RED.util.getMessageProperty(msg, GetMonitorStatus_nodeParam);
                }
                GetMonitorStatus_parameters.top = !!GetMonitorStatus_parameters.top ? GetMonitorStatus_parameters.top : msg.payload;
                
                GetMonitorStatus_nodeParam = node.GetMonitorStatus_skip;
                GetMonitorStatus_nodeParamType = node.GetMonitorStatus_skipType;
                if (GetMonitorStatus_nodeParamType === 'str') {
                    GetMonitorStatus_parameters.skip = GetMonitorStatus_nodeParam || '';
                } else {
                    GetMonitorStatus_parameters.skip = RED.util.getMessageProperty(msg, GetMonitorStatus_nodeParam);
                }
                GetMonitorStatus_parameters.skip = !!GetMonitorStatus_parameters.skip ? GetMonitorStatus_parameters.skip : msg.payload;
                
                GetMonitorStatus_nodeParam = node.GetMonitorStatus_search;
                GetMonitorStatus_nodeParamType = node.GetMonitorStatus_searchType;
                if (GetMonitorStatus_nodeParamType === 'str') {
                    GetMonitorStatus_parameters.search = GetMonitorStatus_nodeParam || '';
                } else {
                    GetMonitorStatus_parameters.search = RED.util.getMessageProperty(msg, GetMonitorStatus_nodeParam);
                }
                GetMonitorStatus_parameters.search = !!GetMonitorStatus_parameters.search ? GetMonitorStatus_parameters.search : msg.payload;
                
                GetMonitorStatus_nodeParam = node.GetMonitorStatus_filter;
                GetMonitorStatus_nodeParamType = node.GetMonitorStatus_filterType;
                if (GetMonitorStatus_nodeParamType === 'str') {
                    GetMonitorStatus_parameters.filter = GetMonitorStatus_nodeParam || '';
                } else {
                    GetMonitorStatus_parameters.filter = RED.util.getMessageProperty(msg, GetMonitorStatus_nodeParam);
                }
                GetMonitorStatus_parameters.filter = !!GetMonitorStatus_parameters.filter ? GetMonitorStatus_parameters.filter : msg.payload;
                
                GetMonitorStatus_nodeParam = node.GetMonitorStatus_count;
                GetMonitorStatus_nodeParamType = node.GetMonitorStatus_countType;
                if (GetMonitorStatus_nodeParamType === 'str') {
                    GetMonitorStatus_parameters.count = GetMonitorStatus_nodeParam || '';
                } else {
                    GetMonitorStatus_parameters.count = RED.util.getMessageProperty(msg, GetMonitorStatus_nodeParam);
                }
                GetMonitorStatus_parameters.count = !!GetMonitorStatus_parameters.count ? GetMonitorStatus_parameters.count : msg.payload;
                                result = client.GetMonitorStatus(GetMonitorStatus_parameters);
            }
            if (!errorFlag && node.method === 'SetMonitorStatus') {
                var SetMonitorStatus_parameters = [];
                var SetMonitorStatus_nodeParam;
                var SetMonitorStatus_nodeParamType;

                SetMonitorStatus_nodeParam = node.SetMonitorStatus_id;
                SetMonitorStatus_nodeParamType = node.SetMonitorStatus_idType;
                if (SetMonitorStatus_nodeParamType === 'str') {
                    SetMonitorStatus_parameters.id = SetMonitorStatus_nodeParam || '';
                } else {
                    SetMonitorStatus_parameters.id = RED.util.getMessageProperty(msg, SetMonitorStatus_nodeParam);
                }
                SetMonitorStatus_parameters.id = !!SetMonitorStatus_parameters.id ? SetMonitorStatus_parameters.id : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    SetMonitorStatus_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.SetMonitorStatus(SetMonitorStatus_parameters);
            }
            if (!errorFlag && node.method === 'GetUserByNumber') {
                var GetUserByNumber_parameters = [];
                var GetUserByNumber_nodeParam;
                var GetUserByNumber_nodeParamType;

                GetUserByNumber_nodeParam = node.GetUserByNumber_number;
                GetUserByNumber_nodeParamType = node.GetUserByNumber_numberType;
                if (GetUserByNumber_nodeParamType === 'str') {
                    GetUserByNumber_parameters.number = GetUserByNumber_nodeParam || '';
                } else {
                    GetUserByNumber_parameters.number = RED.util.getMessageProperty(msg, GetUserByNumber_nodeParam);
                }
                GetUserByNumber_parameters.number = !!GetUserByNumber_parameters.number ? GetUserByNumber_parameters.number : msg.payload;
                                result = client.GetUserByNumber(GetUserByNumber_parameters);
            }
            if (!errorFlag && node.method === 'ListUser') {
                var ListUser_parameters = [];
                var ListUser_nodeParam;
                var ListUser_nodeParamType;

                ListUser_nodeParam = node.ListUser_top;
                ListUser_nodeParamType = node.ListUser_topType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.top = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.top = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.top = !!ListUser_parameters.top ? ListUser_parameters.top : msg.payload;
                
                ListUser_nodeParam = node.ListUser_skip;
                ListUser_nodeParamType = node.ListUser_skipType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.skip = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.skip = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.skip = !!ListUser_parameters.skip ? ListUser_parameters.skip : msg.payload;
                
                ListUser_nodeParam = node.ListUser_search;
                ListUser_nodeParamType = node.ListUser_searchType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.search = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.search = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.search = !!ListUser_parameters.search ? ListUser_parameters.search : msg.payload;
                
                ListUser_nodeParam = node.ListUser_filter;
                ListUser_nodeParamType = node.ListUser_filterType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.filter = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.filter = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.filter = !!ListUser_parameters.filter ? ListUser_parameters.filter : msg.payload;
                
                ListUser_nodeParam = node.ListUser_count;
                ListUser_nodeParamType = node.ListUser_countType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.count = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.count = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.count = !!ListUser_parameters.count ? ListUser_parameters.count : msg.payload;
                
                ListUser_nodeParam = node.ListUser_orderby;
                ListUser_nodeParamType = node.ListUser_orderbyType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.orderby = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.orderby = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.orderby = !!ListUser_parameters.orderby ? ListUser_parameters.orderby : msg.payload;
                
                ListUser_nodeParam = node.ListUser_select;
                ListUser_nodeParamType = node.ListUser_selectType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.select = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.select = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.select = !!ListUser_parameters.select ? ListUser_parameters.select : msg.payload;
                
                ListUser_nodeParam = node.ListUser_expand;
                ListUser_nodeParamType = node.ListUser_expandType;
                if (ListUser_nodeParamType === 'str') {
                    ListUser_parameters.expand = ListUser_nodeParam || '';
                } else {
                    ListUser_parameters.expand = RED.util.getMessageProperty(msg, ListUser_nodeParam);
                }
                ListUser_parameters.expand = !!ListUser_parameters.expand ? ListUser_parameters.expand : msg.payload;
                                result = client.ListUser(ListUser_parameters);
            }
            if (!errorFlag && node.method === 'CreateUser') {
                var CreateUser_parameters = [];
                var CreateUser_nodeParam;
                var CreateUser_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateUser_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateUser(CreateUser_parameters);
            }
            if (!errorFlag && node.method === 'GetTranscribeLanguages') {
                var GetTranscribeLanguages_parameters = [];
                var GetTranscribeLanguages_nodeParam;
                var GetTranscribeLanguages_nodeParamType;

                GetTranscribeLanguages_nodeParam = node.GetTranscribeLanguages_top;
                GetTranscribeLanguages_nodeParamType = node.GetTranscribeLanguages_topType;
                if (GetTranscribeLanguages_nodeParamType === 'str') {
                    GetTranscribeLanguages_parameters.top = GetTranscribeLanguages_nodeParam || '';
                } else {
                    GetTranscribeLanguages_parameters.top = RED.util.getMessageProperty(msg, GetTranscribeLanguages_nodeParam);
                }
                GetTranscribeLanguages_parameters.top = !!GetTranscribeLanguages_parameters.top ? GetTranscribeLanguages_parameters.top : msg.payload;
                
                GetTranscribeLanguages_nodeParam = node.GetTranscribeLanguages_skip;
                GetTranscribeLanguages_nodeParamType = node.GetTranscribeLanguages_skipType;
                if (GetTranscribeLanguages_nodeParamType === 'str') {
                    GetTranscribeLanguages_parameters.skip = GetTranscribeLanguages_nodeParam || '';
                } else {
                    GetTranscribeLanguages_parameters.skip = RED.util.getMessageProperty(msg, GetTranscribeLanguages_nodeParam);
                }
                GetTranscribeLanguages_parameters.skip = !!GetTranscribeLanguages_parameters.skip ? GetTranscribeLanguages_parameters.skip : msg.payload;
                
                GetTranscribeLanguages_nodeParam = node.GetTranscribeLanguages_search;
                GetTranscribeLanguages_nodeParamType = node.GetTranscribeLanguages_searchType;
                if (GetTranscribeLanguages_nodeParamType === 'str') {
                    GetTranscribeLanguages_parameters.search = GetTranscribeLanguages_nodeParam || '';
                } else {
                    GetTranscribeLanguages_parameters.search = RED.util.getMessageProperty(msg, GetTranscribeLanguages_nodeParam);
                }
                GetTranscribeLanguages_parameters.search = !!GetTranscribeLanguages_parameters.search ? GetTranscribeLanguages_parameters.search : msg.payload;
                
                GetTranscribeLanguages_nodeParam = node.GetTranscribeLanguages_filter;
                GetTranscribeLanguages_nodeParamType = node.GetTranscribeLanguages_filterType;
                if (GetTranscribeLanguages_nodeParamType === 'str') {
                    GetTranscribeLanguages_parameters.filter = GetTranscribeLanguages_nodeParam || '';
                } else {
                    GetTranscribeLanguages_parameters.filter = RED.util.getMessageProperty(msg, GetTranscribeLanguages_nodeParam);
                }
                GetTranscribeLanguages_parameters.filter = !!GetTranscribeLanguages_parameters.filter ? GetTranscribeLanguages_parameters.filter : msg.payload;
                
                GetTranscribeLanguages_nodeParam = node.GetTranscribeLanguages_count;
                GetTranscribeLanguages_nodeParamType = node.GetTranscribeLanguages_countType;
                if (GetTranscribeLanguages_nodeParamType === 'str') {
                    GetTranscribeLanguages_parameters.count = GetTranscribeLanguages_nodeParam || '';
                } else {
                    GetTranscribeLanguages_parameters.count = RED.util.getMessageProperty(msg, GetTranscribeLanguages_nodeParam);
                }
                GetTranscribeLanguages_parameters.count = !!GetTranscribeLanguages_parameters.count ? GetTranscribeLanguages_parameters.count : msg.payload;
                                result = client.GetTranscribeLanguages(GetTranscribeLanguages_parameters);
            }
            if (!errorFlag && node.method === 'GetVoicemailSettings') {
                var GetVoicemailSettings_parameters = [];
                var GetVoicemailSettings_nodeParam;
                var GetVoicemailSettings_nodeParamType;

                GetVoicemailSettings_nodeParam = node.GetVoicemailSettings_select;
                GetVoicemailSettings_nodeParamType = node.GetVoicemailSettings_selectType;
                if (GetVoicemailSettings_nodeParamType === 'str') {
                    GetVoicemailSettings_parameters.select = GetVoicemailSettings_nodeParam || '';
                } else {
                    GetVoicemailSettings_parameters.select = RED.util.getMessageProperty(msg, GetVoicemailSettings_nodeParam);
                }
                GetVoicemailSettings_parameters.select = !!GetVoicemailSettings_parameters.select ? GetVoicemailSettings_parameters.select : msg.payload;
                
                GetVoicemailSettings_nodeParam = node.GetVoicemailSettings_expand;
                GetVoicemailSettings_nodeParamType = node.GetVoicemailSettings_expandType;
                if (GetVoicemailSettings_nodeParamType === 'str') {
                    GetVoicemailSettings_parameters.expand = GetVoicemailSettings_nodeParam || '';
                } else {
                    GetVoicemailSettings_parameters.expand = RED.util.getMessageProperty(msg, GetVoicemailSettings_nodeParam);
                }
                GetVoicemailSettings_parameters.expand = !!GetVoicemailSettings_parameters.expand ? GetVoicemailSettings_parameters.expand : msg.payload;
                                result = client.GetVoicemailSettings(GetVoicemailSettings_parameters);
            }
            if (!errorFlag && node.method === 'UpdateVoicemailSettings') {
                var UpdateVoicemailSettings_parameters = [];
                var UpdateVoicemailSettings_nodeParam;
                var UpdateVoicemailSettings_nodeParamType;

                if (typeof msg.payload === 'object') {
                    UpdateVoicemailSettings_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateVoicemailSettings(UpdateVoicemailSettings_parameters);
            }
            if (!errorFlag && node.method === 'DeleteAllUserVoicemails') {
                var DeleteAllUserVoicemails_parameters = [];
                var DeleteAllUserVoicemails_nodeParam;
                var DeleteAllUserVoicemails_nodeParamType;
                result = client.DeleteAllUserVoicemails(DeleteAllUserVoicemails_parameters);
            }
            if (!errorFlag && node.method === 'ListWeblink') {
                var ListWeblink_parameters = [];
                var ListWeblink_nodeParam;
                var ListWeblink_nodeParamType;

                ListWeblink_nodeParam = node.ListWeblink_top;
                ListWeblink_nodeParamType = node.ListWeblink_topType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.top = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.top = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.top = !!ListWeblink_parameters.top ? ListWeblink_parameters.top : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_skip;
                ListWeblink_nodeParamType = node.ListWeblink_skipType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.skip = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.skip = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.skip = !!ListWeblink_parameters.skip ? ListWeblink_parameters.skip : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_search;
                ListWeblink_nodeParamType = node.ListWeblink_searchType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.search = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.search = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.search = !!ListWeblink_parameters.search ? ListWeblink_parameters.search : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_filter;
                ListWeblink_nodeParamType = node.ListWeblink_filterType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.filter = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.filter = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.filter = !!ListWeblink_parameters.filter ? ListWeblink_parameters.filter : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_count;
                ListWeblink_nodeParamType = node.ListWeblink_countType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.count = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.count = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.count = !!ListWeblink_parameters.count ? ListWeblink_parameters.count : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_orderby;
                ListWeblink_nodeParamType = node.ListWeblink_orderbyType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.orderby = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.orderby = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.orderby = !!ListWeblink_parameters.orderby ? ListWeblink_parameters.orderby : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_select;
                ListWeblink_nodeParamType = node.ListWeblink_selectType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.select = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.select = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.select = !!ListWeblink_parameters.select ? ListWeblink_parameters.select : msg.payload;
                
                ListWeblink_nodeParam = node.ListWeblink_expand;
                ListWeblink_nodeParamType = node.ListWeblink_expandType;
                if (ListWeblink_nodeParamType === 'str') {
                    ListWeblink_parameters.expand = ListWeblink_nodeParam || '';
                } else {
                    ListWeblink_parameters.expand = RED.util.getMessageProperty(msg, ListWeblink_nodeParam);
                }
                ListWeblink_parameters.expand = !!ListWeblink_parameters.expand ? ListWeblink_parameters.expand : msg.payload;
                                result = client.ListWeblink(ListWeblink_parameters);
            }
            if (!errorFlag && node.method === 'CreateWeblink') {
                var CreateWeblink_parameters = [];
                var CreateWeblink_nodeParam;
                var CreateWeblink_nodeParamType;

                if (typeof msg.payload === 'object') {
                    CreateWeblink_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.CreateWeblink(CreateWeblink_parameters);
            }
            if (!errorFlag && node.method === 'ValidateLink') {
                var ValidateLink_parameters = [];
                var ValidateLink_nodeParam;
                var ValidateLink_nodeParamType;

                if (typeof msg.payload === 'object') {
                    ValidateLink_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.ValidateLink(ValidateLink_parameters);
            }
            if (!errorFlag && node.method === 'BulkLinksDelete') {
                var BulkLinksDelete_parameters = [];
                var BulkLinksDelete_nodeParam;
                var BulkLinksDelete_nodeParamType;

                if (typeof msg.payload === 'object') {
                    BulkLinksDelete_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.BulkLinksDelete(BulkLinksDelete_parameters);
            }
            if (!errorFlag && node.method === 'GetWeblink') {
                var GetWeblink_parameters = [];
                var GetWeblink_nodeParam;
                var GetWeblink_nodeParamType;

                GetWeblink_nodeParam = node.GetWeblink_link;
                GetWeblink_nodeParamType = node.GetWeblink_linkType;
                if (GetWeblink_nodeParamType === 'str') {
                    GetWeblink_parameters.link = GetWeblink_nodeParam || '';
                } else {
                    GetWeblink_parameters.link = RED.util.getMessageProperty(msg, GetWeblink_nodeParam);
                }
                GetWeblink_parameters.link = !!GetWeblink_parameters.link ? GetWeblink_parameters.link : msg.payload;
                
                GetWeblink_nodeParam = node.GetWeblink_select;
                GetWeblink_nodeParamType = node.GetWeblink_selectType;
                if (GetWeblink_nodeParamType === 'str') {
                    GetWeblink_parameters.select = GetWeblink_nodeParam || '';
                } else {
                    GetWeblink_parameters.select = RED.util.getMessageProperty(msg, GetWeblink_nodeParam);
                }
                GetWeblink_parameters.select = !!GetWeblink_parameters.select ? GetWeblink_parameters.select : msg.payload;
                
                GetWeblink_nodeParam = node.GetWeblink_expand;
                GetWeblink_nodeParamType = node.GetWeblink_expandType;
                if (GetWeblink_nodeParamType === 'str') {
                    GetWeblink_parameters.expand = GetWeblink_nodeParam || '';
                } else {
                    GetWeblink_parameters.expand = RED.util.getMessageProperty(msg, GetWeblink_nodeParam);
                }
                GetWeblink_parameters.expand = !!GetWeblink_parameters.expand ? GetWeblink_parameters.expand : msg.payload;
                                result = client.GetWeblink(GetWeblink_parameters);
            }
            if (!errorFlag && node.method === 'UpdateWeblink') {
                var UpdateWeblink_parameters = [];
                var UpdateWeblink_nodeParam;
                var UpdateWeblink_nodeParamType;

                UpdateWeblink_nodeParam = node.UpdateWeblink_link;
                UpdateWeblink_nodeParamType = node.UpdateWeblink_linkType;
                if (UpdateWeblink_nodeParamType === 'str') {
                    UpdateWeblink_parameters.link = UpdateWeblink_nodeParam || '';
                } else {
                    UpdateWeblink_parameters.link = RED.util.getMessageProperty(msg, UpdateWeblink_nodeParam);
                }
                UpdateWeblink_parameters.link = !!UpdateWeblink_parameters.link ? UpdateWeblink_parameters.link : msg.payload;
                
                if (typeof msg.payload === 'object') {
                    UpdateWeblink_parameters.body = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be JSON object or buffer.', msg);
                    errorFlag = true;
                }
                                result = client.UpdateWeblink(UpdateWeblink_parameters);
            }
            if (!errorFlag && node.method === 'DeleteWeblink') {
                var DeleteWeblink_parameters = [];
                var DeleteWeblink_nodeParam;
                var DeleteWeblink_nodeParamType;

                DeleteWeblink_nodeParam = node.DeleteWeblink_link;
                DeleteWeblink_nodeParamType = node.DeleteWeblink_linkType;
                if (DeleteWeblink_nodeParamType === 'str') {
                    DeleteWeblink_parameters.link = DeleteWeblink_nodeParam || '';
                } else {
                    DeleteWeblink_parameters.link = RED.util.getMessageProperty(msg, DeleteWeblink_nodeParam);
                }
                DeleteWeblink_parameters.link = !!DeleteWeblink_parameters.link ? DeleteWeblink_parameters.link : msg.payload;
                
                DeleteWeblink_nodeParam = node.DeleteWeblink_ifMatch;
                DeleteWeblink_nodeParamType = node.DeleteWeblink_ifMatchType;
                if (DeleteWeblink_nodeParamType === 'str') {
                    DeleteWeblink_parameters.ifMatch = DeleteWeblink_nodeParam || '';
                } else {
                    DeleteWeblink_parameters.ifMatch = RED.util.getMessageProperty(msg, DeleteWeblink_nodeParam);
                }
                DeleteWeblink_parameters.ifMatch = !!DeleteWeblink_parameters.ifMatch ? DeleteWeblink_parameters.ifMatch : msg.payload;
                                result = client.DeleteWeblink(DeleteWeblink_parameters);
            }
            if (!errorFlag && result === undefined) {
                node.error('Method is not specified.', msg);
                errorFlag = true;
            }
            var setData = function (msg, data) {
                if (data) {
                    if (data.response) {
                        if (data.response.statusCode) {
                            msg.statusCode = data.response.statusCode;
                        }
                        if (data.response.headers) {
                            msg.headers = data.response.headers;
                        }
                        if (data.response.request && data.response.request.uri && data.response.request.uri.href) {
                            msg.responseUrl = data.response.request.uri.href;
                        }
                    }
                    if (data.body) {
                        msg.payload = data.body;
                    }
                }
                return msg;
            };
            if (!errorFlag) {
                node.status({ fill: 'blue', shape: 'dot', text: 'Xapi.status.requesting' });
                result.then(function (data) {
                    node.send(setData(msg, data));
                    node.status({});
                }).catch(function (error) {
                    var message = null;
                    if (error && error.body && error.body.message) {
                        message = error.body.message;
                    }
                    node.error(message, setData(msg, error));
                    node.status({ fill: 'red', shape: 'ring', text: 'node-red:common.status.error' });
                });
            }
        });
    }

    RED.nodes.registerType('xapi', XapiNode);
    function XapiServiceNode(n) {
        RED.nodes.createNode(this, n);
        this.host = n.host;

        this.secureTokenValue = n.secureTokenValue;
        this.secureTokenHeaderOrQueryName = n.secureTokenHeaderOrQueryName;
        this.secureTokenIsQuery = n.secureTokenIsQuery;
    }

    RED.nodes.registerType('xapi-service', XapiServiceNode, {
        credentials: {
            secureTokenValue: { type: 'password' },
            temp: { type: 'text' }
        }
    });
};
